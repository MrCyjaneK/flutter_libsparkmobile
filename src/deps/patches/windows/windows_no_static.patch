Index: secp256k1/src/scratch.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/secp256k1/src/scratch.h b/secp256k1/src/scratch.h
--- a/secp256k1/src/scratch.h	(revision 13348a6212b4b20615549e3757a54528460b6c21)
+++ b/secp256k1/src/scratch.h	(date 1704214297332)
@@ -20,20 +20,20 @@
     const secp256k1_callback* error_callback;
 } secp256k1_scratch;
 
-static secp256k1_scratch* secp256k1_scratch_create(const secp256k1_callback* error_callback, size_t max_size);
+secp256k1_scratch* secp256k1_scratch_create(const secp256k1_callback* error_callback, size_t max_size);
 
-static void secp256k1_scratch_destroy(secp256k1_scratch* scratch);
+void secp256k1_scratch_destroy(secp256k1_scratch* scratch);
 
 /** Attempts to allocate a new stack frame with `n` available bytes. Returns 1 on success, 0 on failure */
-static int secp256k1_scratch_allocate_frame(secp256k1_scratch* scratch, size_t n, size_t objects);
+int secp256k1_scratch_allocate_frame(secp256k1_scratch* scratch, size_t n, size_t objects);
 
 /** Deallocates a stack frame */
-static void secp256k1_scratch_deallocate_frame(secp256k1_scratch* scratch);
+void secp256k1_scratch_deallocate_frame(secp256k1_scratch* scratch);
 
 /** Returns the maximum allocation the scratch space will allow */
-static size_t secp256k1_scratch_max_allocation(const secp256k1_scratch* scratch, size_t n_objects);
+size_t secp256k1_scratch_max_allocation(const secp256k1_scratch* scratch, size_t n_objects);
 
 /** Returns a pointer into the most recently allocated frame, or NULL if there is insufficient available space */
-static void *secp256k1_scratch_alloc(secp256k1_scratch* scratch, size_t n);
+void *secp256k1_scratch_alloc(secp256k1_scratch* scratch, size_t n);
 
 #endif
Index: secp256k1/src/scratch_impl.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/secp256k1/src/scratch_impl.h b/secp256k1/src/scratch_impl.h
--- a/secp256k1/src/scratch_impl.h	(revision 13348a6212b4b20615549e3757a54528460b6c21)
+++ b/secp256k1/src/scratch_impl.h	(date 1704214297336)
@@ -15,7 +15,7 @@
  * TODO: Determine this at configure time. */
 #define ALIGNMENT 16
 
-static secp256k1_scratch* secp256k1_scratch_create(const secp256k1_callback* error_callback, size_t max_size) {
+secp256k1_scratch* secp256k1_scratch_create(const secp256k1_callback* error_callback, size_t max_size) {
     secp256k1_scratch* ret = (secp256k1_scratch*)checked_malloc(error_callback, sizeof(*ret));
     if (ret != NULL) {
         memset(ret, 0, sizeof(*ret));
@@ -25,14 +25,14 @@
     return ret;
 }
 
-static void secp256k1_scratch_destroy(secp256k1_scratch* scratch) {
+void secp256k1_scratch_destroy(secp256k1_scratch* scratch) {
     if (scratch != NULL) {
         VERIFY_CHECK(scratch->frame == 0);
         free(scratch);
     }
 }
 
-static size_t secp256k1_scratch_max_allocation(const secp256k1_scratch* scratch, size_t objects) {
+size_t secp256k1_scratch_max_allocation(const secp256k1_scratch* scratch, size_t objects) {
     size_t i = 0;
     size_t allocated = 0;
     for (i = 0; i < scratch->frame; i++) {
@@ -44,7 +44,7 @@
     return scratch->max_size - allocated - objects * ALIGNMENT;
 }
 
-static int secp256k1_scratch_allocate_frame(secp256k1_scratch* scratch, size_t n, size_t objects) {
+int secp256k1_scratch_allocate_frame(secp256k1_scratch* scratch, size_t n, size_t objects) {
     VERIFY_CHECK(scratch->frame < SECP256K1_SCRATCH_MAX_FRAMES);
 
     if (n <= secp256k1_scratch_max_allocation(scratch, objects)) {
@@ -62,13 +62,13 @@
     }
 }
 
-static void secp256k1_scratch_deallocate_frame(secp256k1_scratch* scratch) {
+void secp256k1_scratch_deallocate_frame(secp256k1_scratch* scratch) {
     VERIFY_CHECK(scratch->frame > 0);
     scratch->frame -= 1;
     free(scratch->data[scratch->frame]);
 }
 
-static void *secp256k1_scratch_alloc(secp256k1_scratch* scratch, size_t size) {
+void *secp256k1_scratch_alloc(secp256k1_scratch* scratch, size_t size) {
     void *ret;
     size_t frame = scratch->frame - 1;
     size = ((size + ALIGNMENT - 1) / ALIGNMENT) * ALIGNMENT;
