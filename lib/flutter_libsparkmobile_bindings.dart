// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, return_of_invalid_type, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for sparkmobile.
class SparkMobileBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SparkMobileBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SparkMobileBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> getAddress(
    ffi.Pointer<ffi.Char> keyDataHex,
    int index,
    int diversifier,
    int isTestNet,
  ) {
    return _getAddress(
      keyDataHex,
      index,
      diversifier,
      isTestNet,
    );
  }

  late final _getAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int)>>('getAddress');
  late final _getAddress = _getAddressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  CIdentifiedCoinData identifyCoin(
    CCoin c_struct,
    ffi.Pointer<ffi.Char> keyDataHex,
    int index,
  ) {
    return _identifyCoin(
      c_struct,
      keyDataHex,
      index,
    );
  }

  late final _identifyCoinPtr = _lookup<
      ffi.NativeFunction<
          CIdentifiedCoinData Function(
              CCoin, ffi.Pointer<ffi.Char>, ffi.Int)>>('identifyCoin');
  late final _identifyCoin = _identifyCoinPtr.asFunction<
      CIdentifiedCoinData Function(CCoin, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<CCRecipient> createSparkMintRecipients(
    int numRecipients,
    ffi.Pointer<PubKeyScript> pubKeyScripts,
    ffi.Pointer<ffi.Uint64> amounts,
    ffi.Pointer<ffi.Char> memo,
    int subtractFee,
  ) {
    return _createSparkMintRecipients(
      numRecipients,
      pubKeyScripts,
      amounts,
      memo,
      subtractFee,
    );
  }

  late final _createSparkMintRecipientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CCRecipient> Function(
              ffi.Int,
              ffi.Pointer<PubKeyScript>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('createSparkMintRecipients');
  late final _createSparkMintRecipients =
      _createSparkMintRecipientsPtr.asFunction<
          ffi.Pointer<CCRecipient> Function(int, ffi.Pointer<PubKeyScript>,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Char>, int)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class CCoin extends ffi.Struct {
  @ffi.Char()
  external int type;

  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int v;

  external ffi.Pointer<ffi.UnsignedChar> memo;

  @ffi.Int()
  external int memoLength;

  external ffi.Pointer<ffi.UnsignedChar> serial_context;

  @ffi.Int()
  external int serial_contextLength;
}

final class CIdentifiedCoinData extends ffi.Struct {
  @ffi.Uint64()
  external int i;

  external ffi.Pointer<ffi.UnsignedChar> d;

  @ffi.Int()
  external int dLength;

  @ffi.Uint64()
  external int v;

  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> memo;

  @ffi.Int()
  external int memoLength;
}

final class CCRecipient extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> pubKey;

  @ffi.Int()
  external int pubKeyLength;

  @ffi.Uint64()
  external int cAmount;

  @ffi.Int()
  external int subtractFee;
}

final class CMintedCoinData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> memo;
}

final class PubKeyScript extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> bytes;

  @ffi.Int()
  external int length;
}

final class COutputCoinData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> memo;
}

final class CCSparkMintMeta extends ffi.Struct {
  @ffi.Uint64()
  external int height;

  external ffi.Pointer<ffi.Char> id;

  @ffi.Int()
  external int isUsed;

  external ffi.Pointer<ffi.Char> txid;

  @ffi.Uint64()
  external int i;

  external ffi.Pointer<ffi.UnsignedChar> d;

  @ffi.Int()
  external int dLength;

  @ffi.Uint64()
  external int v;

  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> memo;

  @ffi.Int()
  external int memoLength;

  external ffi.Pointer<ffi.UnsignedChar> serial_context;

  @ffi.Int()
  external int serial_contextLength;

  @ffi.Char()
  external int type;

  external CCoin coin;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;
