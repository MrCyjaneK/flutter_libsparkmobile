// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_libsparkmobile.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterLibsparkmobileBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterLibsparkmobileBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterLibsparkmobileBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> getAddress(
    ffi.Pointer<ffi.Char> keyDataHex,
    int index,
    int diversifier,
    int isTestNet,
  ) {
    return _getAddress(
      keyDataHex,
      index,
      diversifier,
      isTestNet,
    );
  }

  late final _getAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int)>>('getAddress');
  late final _getAddress = _getAddressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  /// FFI-friendly wrapper for spark::identifyCoin.
  ///
  /// identifyCoin: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/spark.cpp#L400
  CIdentifiedCoinData identifyCoin(
    CCoin c_struct,
    ffi.Pointer<ffi.Char> keyDataHex,
    int index,
  ) {
    return _identifyCoin(
      c_struct,
      keyDataHex,
      index,
    );
  }

  late final _identifyCoinPtr = _lookup<
      ffi.NativeFunction<
          CIdentifiedCoinData Function(
              CCoin, ffi.Pointer<ffi.Char>, ffi.Int)>>('identifyCoin');
  late final _identifyCoin = _identifyCoinPtr.asFunction<
      CIdentifiedCoinData Function(CCoin, ffi.Pointer<ffi.Char>, int)>();

  /// FFI-friendly wrapper for spark::createSparkMintRecipients.
  ///
  /// createSparkMintRecipients: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/spark.cpp#L43
  ffi.Pointer<CCRecipient> createSparkMintRecipients(
    ffi.Pointer<CMintedCoinData> outputs,
    int outputsLength,
    ffi.Pointer<ffi.Char> serial_context,
    int serial_contextLength,
    int generate,
  ) {
    return _createSparkMintRecipients(
      outputs,
      outputsLength,
      serial_context,
      serial_contextLength,
      generate,
    );
  }

  late final _createSparkMintRecipientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CCRecipient> Function(
              ffi.Pointer<CMintedCoinData>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('createSparkMintRecipients');
  late final _createSparkMintRecipients =
      _createSparkMintRecipientsPtr.asFunction<
          ffi.Pointer<CCRecipient> Function(ffi.Pointer<CMintedCoinData>, int,
              ffi.Pointer<ffi.Char>, int, int)>();

  /// FFI-friendly wrapper for spark::createSparkSpendTransaction.
  ///
  /// createSparkSpendTransaction: https://github.com/firoorg/sparkmobile/blob/23099b0d9010a970ad75b9cfe05d568d634088f3/src/spark.cpp#L190
  ffi.Pointer<ffi.UnsignedChar> cCreateSparkSpendTransaction(
    ffi.Pointer<ffi.Char> keyDataHex,
    int index,
    ffi.Pointer<CRecip> recipients,
    int recipientsLength,
    ffi.Pointer<COutputRecipient> privateRecipients,
    int privateRecipientsLength,
    ffi.Pointer<CCSparkMintMeta> coins,
    int coinsLength,
    ffi.Pointer<CCoverSets> cover_set_data_all,
    int cover_set_data_allLength,
    ffi.Pointer<ffi.Char> txHashSig,
    int txHashSigLength,
    int fee,
    ffi.Pointer<OutputScript> outputScripts,
    int outputScriptsLength,
  ) {
    return _cCreateSparkSpendTransaction(
      keyDataHex,
      index,
      recipients,
      recipientsLength,
      privateRecipients,
      privateRecipientsLength,
      coins,
      coinsLength,
      cover_set_data_all,
      cover_set_data_allLength,
      txHashSig,
      txHashSigLength,
      fee,
      outputScripts,
      outputScriptsLength,
    );
  }

  late final _cCreateSparkSpendTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<CRecip>,
              ffi.Int,
              ffi.Pointer<COutputRecipient>,
              ffi.Int,
              ffi.Pointer<CCSparkMintMeta>,
              ffi.Int,
              ffi.Pointer<CCoverSets>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Uint64,
              ffi.Pointer<OutputScript>,
              ffi.Int)>>('cCreateSparkSpendTransaction');
  late final _cCreateSparkSpendTransaction =
      _cCreateSparkSpendTransactionPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<CRecip>,
              int,
              ffi.Pointer<COutputRecipient>,
              int,
              ffi.Pointer<CCSparkMintMeta>,
              int,
              ffi.Pointer<CCoverSets>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<OutputScript>,
              int)>();
}

/// FFI-friendly wrapper for a spark::Coin.
///
/// Coin: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/coin.h#L66
final class CCoin extends ffi.Struct {
  @ffi.Char()
  external int type;

  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int v;

  external ffi.Pointer<ffi.UnsignedChar> memo;

  @ffi.Int()
  external int memoLength;

  external ffi.Pointer<ffi.UnsignedChar> serial_context;

  @ffi.Int()
  external int serial_contextLength;
}

/// FFI-friendly wrapper for a spark::IdentifiedCoinData.
///
/// IdentifiedCoinData: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/coin.h#L19
final class CIdentifiedCoinData extends ffi.Struct {
  @ffi.Uint64()
  external int i;

  external ffi.Pointer<ffi.UnsignedChar> d;

  @ffi.Int()
  external int dLength;

  @ffi.Uint64()
  external int v;

  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> memo;

  @ffi.Int()
  external int memoLength;
}

/// FFI-friendly wrapper for a spark::CRecipient.
///
/// CRecipient: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/include/spark.h#L27
final class CCRecipient extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> pubKey;

  @ffi.Int()
  external int pubKeyLength;

  @ffi.Uint64()
  external int cAmount;

  @ffi.Int()
  external int subtractFee;
}

/// FFI-friendly wrapper for a spark::MintedCoinData.
///
/// MintedCoinData: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/mint_transaction.h#L12
final class CMintedCoinData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> memo;
}

final class PubKeyScript extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> bytes;

  @ffi.Int()
  external int length;
}

/// FFI-friendly wrapper for a std::pair<CAmount, bool>.
///
/// Note this is an ambiguation of a spark::CRecipient.  This CRecip(ient) is just a wrapper for a
/// CAmount and bool pair, and is not the same as the spark::CRecipient struct above, which gets
/// wrapped for us as a CCRecipient and is unrelated to this struct.
///
/// See https://github.com/firoorg/sparkmobile/blob/23099b0d9010a970ad75b9cfe05d568d634088f3/src/spark.cpp#L190
final class CRecip extends ffi.Struct {
  @ffi.Uint64()
  external int amount;

  @ffi.Int()
  external int subtractFee;
}

/// FFI-friendly wrapper for a spark::OutputCoinData.
///
/// OutputCoinData: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/spend_transaction.h#L33
final class COutputCoinData extends ffi.Struct {
  external ffi.Pointer<ffi.Char> address;

  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> memo;
}

/// FFI-friendly wrapper for a <spark::OutputCoinData, bool>.
///
/// See https://github.com/firoorg/sparkmobile/blob/23099b0d9010a970ad75b9cfe05d568d634088f3/src/spark.cpp#L195
final class COutputRecipient extends ffi.Struct {
  external COutputCoinData output;

  @ffi.Int()
  external int subtractFee;
}

final class CCDataStream extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @ffi.Int()
  external int length;
}

/// FFI-friendly wrapper for a spark::CSparkMintMeta.
///
/// CSparkMintMeta: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/primitives.h#L9
final class CCSparkMintMeta extends ffi.Struct {
  @ffi.Uint64()
  external int height;

  external ffi.Pointer<ffi.Char> id;

  @ffi.Int()
  external int isUsed;

  external ffi.Pointer<ffi.Char> txid;

  /// Diversifier.
  @ffi.Uint64()
  external int i;

  /// Encrypted diversifier.
  external ffi.Pointer<ffi.UnsignedChar> d;

  @ffi.Int()
  external int dLength;

  /// Value.
  @ffi.Uint64()
  external int v;

  /// Nonce.
  external ffi.Pointer<ffi.UnsignedChar> k;

  @ffi.Int()
  external int kLength;

  external ffi.Pointer<ffi.Char> memo;

  @ffi.Int()
  external int memoLength;

  external ffi.Pointer<ffi.UnsignedChar> serial_context;

  @ffi.Int()
  external int serial_contextLength;

  @ffi.Char()
  external int type;

  external CCDataStream coin;
}

/// FFI-friendly wrapper for a spark::CoverSetData.
///
/// CoverSetData: https://github.com/firoorg/sparkmobile/blob/8bf17cd3deba6c3b0d10e89282e02936d7e71cdd/src/spend_transaction.h#L28
final class CCoverSetData extends ffi.Struct {
  /// vs. struct CCoin* cover_set;
  external ffi.Pointer<ffi.Pointer<CCDataStream>> cover_set;

  @ffi.Int()
  external int cover_setLength;

  external ffi.Pointer<ffi.UnsignedChar> cover_set_representation;

  @ffi.Int()
  external int cover_set_representationLength;
}

/// FFI-friendly wrapper for a std::unordered_map<uint64_t, spark::CoverSetData>.
///
/// See https://github.com/firoorg/sparkmobile/blob/23099b0d9010a970ad75b9cfe05d568d634088f3/src/spark.cpp#L197
final class CCoverSets extends ffi.Struct {
  external ffi.Pointer<CCoverSetData> cover_sets;

  @ffi.Int()
  external int cover_setsLength;
}

final class OutputScript extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> bytes;

  @ffi.Int()
  external int length;
}
