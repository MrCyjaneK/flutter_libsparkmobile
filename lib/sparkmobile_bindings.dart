// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for sparkmobile.
class flutter_libsparkmobile {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  flutter_libsparkmobile(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  flutter_libsparkmobile.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit1(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  /// A hasher class for RIPEMD-160.
  late final ffi.Pointer<ffi.Int> _CRIPEMD160 = _lookup<ffi.Int>('CRIPEMD160');

  int get CRIPEMD160 => _CRIPEMD160.value;

  set CRIPEMD160(int value) => _CRIPEMD160.value = value;

  /// A hasher class for SHA-256.
  late final ffi.Pointer<ffi.Int> _CSHA256 = _lookup<ffi.Int>('CSHA256');

  int get CSHA256 => _CSHA256.value;

  set CSHA256(int value) => _CSHA256.value = value;

  /// Autodetect the best available SHA256 implementation.
  /// Returns the name of the implementation.
  late final ffi.Pointer<ffi.Int> _std = _lookup<ffi.Int>('std');

  int get std => _std.value;

  set std(int value) => _std.value = value;

  /// A hasher class for SHA-512.
  late final ffi.Pointer<ffi.Int> _CSHA512 = _lookup<ffi.Int>('CSHA512');

  int get CSHA512 => _CSHA512.value;

  set CSHA512(int value) => _CSHA512.value = value;

  void __assert_fail(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('__assert_fail');
  late final ___assert_fail = ___assert_failPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('__assert_perror_fail');
  late final ___assert_perror_fail = ___assert_perror_failPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void __assert(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('__assert');
  late final ___assert = ___assertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _namespace = _lookup<ffi.Int>('namespace');

  int get namespace => _namespace.value;

  set namespace(int value) => _namespace.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _MAX_SIZE =
      _lookup<ffi.UnsignedInt>('MAX_SIZE');

  int get MAX_SIZE => _MAX_SIZE.value;

  set MAX_SIZE(int value) => _MAX_SIZE.value = value;

  late final ffi.Pointer<ffi.Int> _deserialize_type1 =
      _lookup<ffi.Int>('deserialize_type');

  int get deserialize_type1 => _deserialize_type1.value;

  set deserialize_type1(int value) => _deserialize_type1.value = value;

  /// //////////////////////////////////////////////////////////////
  late final ffi.Pointer<ffi.Int> _CSizeComputer =
      _lookup<ffi.Int>('CSizeComputer');

  int get CSizeComputer => _CSizeComputer.value;

  set CSizeComputer(int value) => _CSizeComputer.value = value;

  /// Wrapper for serializing arrays and POD.
  late final ffi.Pointer<ffi.Int> _CFlatData = _lookup<ffi.Int>('CFlatData');

  int get CFlatData => _CFlatData.value;

  set CFlatData(int value) => _CFlatData.value = value;

  late final ffi.Pointer<ffi.Int> _CFixedBitSet =
      _lookup<ffi.Int>('CFixedBitSet');

  int get CFixedBitSet => _CFixedBitSet.value;

  set CFixedBitSet(int value) => _CFixedBitSet.value = value;

  late final ffi.Pointer<ffi.Int> _CDynamicBitSet =
      _lookup<ffi.Int>('CDynamicBitSet');

  int get CDynamicBitSet => _CDynamicBitSet.value;

  set CDynamicBitSet(int value) => _CDynamicBitSet.value = value;

  /// Stores a fixed size bitset as a series of VarInts. Each VarInt is an offset from the last entry and the sum of the
  /// last entry and the offset gives an index into the bitset for a set bit. The series of VarInts ends with a 0.
  late final ffi.Pointer<ffi.Int> _CFixedVarIntsBitSet =
      _lookup<ffi.Int>('CFixedVarIntsBitSet');

  int get CFixedVarIntsBitSet => _CFixedVarIntsBitSet.value;

  set CFixedVarIntsBitSet(int value) => _CFixedVarIntsBitSet.value = value;

  /// Serializes either as a CFixedBitSet or CFixedVarIntsBitSet, depending on which would give a smaller size
  late final ffi.Pointer<ffi.Int> _CAutoBitSet =
      _lookup<ffi.Int>('CAutoBitSet');

  int get CAutoBitSet => _CAutoBitSet.value;

  set CAutoBitSet(int value) => _CAutoBitSet.value = value;

  late final ffi.Pointer<ffi.Int> _CCompactSize =
      _lookup<ffi.Int>('CCompactSize');

  int get CCompactSize => _CCompactSize.value;

  set CCompactSize(int value) => _CCompactSize.value = value;

  /// 160-bit opaque blob.
  /// @note This type is called uint160 for historical reasons only. It is an opaque
  /// blob of 160 bits and has no integer operations.
  late final ffi.Pointer<ffi.Int> _uint160 = _lookup<ffi.Int>('uint160');

  int get uint160 => _uint160.value;

  set uint160(int value) => _uint160.value = value;

  late final ffi.Pointer<ffi.Int> _base_blob = _lookup<ffi.Int>('base_blob');

  int get base_blob => _base_blob.value;

  set base_blob(int value) => _base_blob.value = value;

  /// 256-bit opaque blob.
  /// @note This type is called uint256 for historical reasons only. It is an
  /// opaque blob of 256 bits and has no integer operations. Use arith_uint256 if
  /// those are required.
  late final ffi.Pointer<ffi.Int> _uint256 = _lookup<ffi.Int>('uint256');

  int get uint256 => _uint256.value;

  set uint256(int value) => _uint256.value = value;

  /// 512-bit opaque blob.
  /// @note This type is called uint512 for historical reasons only. It is an
  /// opaque blob of 512 bits and has no integer operations. Use arith_uint512 if
  /// those are required.
  late final ffi.Pointer<ffi.Int> _uint512 = _lookup<ffi.Int>('uint512');

  int get uint512 => _uint512.value;

  set uint512(int value) => _uint512.value = value;

  late final ffi.Pointer<ffi.Int> _uint_error = _lookup<ffi.Int>('uint_error');

  int get uint_error => _uint_error.value;

  set uint_error(int value) => _uint_error.value = value;

  /// 256-bit unsigned big integer.
  late final ffi.Pointer<ffi.Int> _arith_uint256 =
      _lookup<ffi.Int>('arith_uint256');

  int get arith_uint256 => _arith_uint256.value;

  set arith_uint256(int value) => _arith_uint256.value = value;

  late final ffi.Pointer<ffi.Int> _base_uint = _lookup<ffi.Int>('base_uint');

  int get base_uint => _base_uint.value;

  set base_uint(int value) => _base_uint.value = value;

  /// 512-bit unsigned big integer.
  late final ffi.Pointer<ffi.Int> _arith_uint512 =
      _lookup<ffi.Int>('arith_uint512');

  int get arith_uint512 => _arith_uint512.value;

  set arith_uint512(int value) => _arith_uint512.value = value;

  int ArithToUint256(
    int arg0,
  ) {
    return _ArithToUint256(
      arg0,
    );
  }

  late final _ArithToUint256Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ArithToUint256');
  late final _ArithToUint256 =
      _ArithToUint256Ptr.asFunction<int Function(int)>();

  int UintToArith256(
    int arg0,
  ) {
    return _UintToArith256(
      arg0,
    );
  }

  late final _UintToArith256Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('UintToArith256');
  late final _UintToArith256 =
      _UintToArith256Ptr.asFunction<int Function(int)>();

  int ArithToUint512(
    int arg0,
  ) {
    return _ArithToUint512(
      arg0,
    );
  }

  late final _ArithToUint512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ArithToUint512');
  late final _ArithToUint512 =
      _ArithToUint512Ptr.asFunction<int Function(int)>();

  int UintToArith512(
    int arg0,
  ) {
    return _UintToArith512(
      arg0,
    );
  }

  late final _UintToArith512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('UintToArith512');
  late final _UintToArith512 =
      _UintToArith512Ptr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Int> _PROTOCOL_VERSION =
      _lookup<ffi.Int>('PROTOCOL_VERSION');

  int get PROTOCOL_VERSION => _PROTOCOL_VERSION.value;

  set PROTOCOL_VERSION(int value) => _PROTOCOL_VERSION.value = value;

  /// A hasher class for Bitcoin's 256-bit hash (double SHA-256).
  late final ffi.Pointer<ffi.Int> _CHash256 = _lookup<ffi.Int>('CHash256');

  int get CHash256 => _CHash256.value;

  set CHash256(int value) => _CHash256.value = value;

  /// A hasher class for Bitcoin's 160-bit hash (SHA-256 + RIPEMD-160).
  late final ffi.Pointer<ffi.Int> _CHash160 = _lookup<ffi.Int>('CHash160');

  int get CHash160 => _CHash160.value;

  set CHash160(int value) => _CHash160.value = value;

  late final ffi.Pointer<ffi.Int> _CHash512 = _lookup<ffi.Int>('CHash512');

  int get CHash512 => _CHash512.value;

  set CHash512(int value) => _CHash512.value = value;

  /// A writer stream (for serialization) that computes a 256-bit hash.
  late final ffi.Pointer<ffi.Int> _CHashWriter =
      _lookup<ffi.Int>('CHashWriter');

  int get CHashWriter => _CHashWriter.value;

  set CHashWriter(int value) => _CHashWriter.value = value;

  int MurmurHash3(
    int nHashSeed,
    int std,
  ) {
    return _MurmurHash3(
      nHashSeed,
      std,
    );
  }

  late final _MurmurHash3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('MurmurHash3');
  late final _MurmurHash3 =
      _MurmurHash3Ptr.asFunction<int Function(int, int)>();

  void BIP32Hash(
    int arg0,
  ) {
    return _BIP32Hash(
      arg0,
    );
  }

  late final _BIP32HashPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ChainCode)>>('BIP32Hash');
  late final _BIP32Hash = _BIP32HashPtr.asFunction<void Function(int)>();

  /// SipHash-2-4
  late final ffi.Pointer<ffi.Int> _CSipHasher = _lookup<ffi.Int>('CSipHasher');

  int get CSipHasher => _CSipHasher.value;

  set CSipHasher(int value) => _CSipHasher.value = value;

  /// Optimized SipHash-2-4 implementation for uint256.
  ///
  /// It is identical to:
  /// SipHasher(k0, k1)
  /// .Write(val.GetUint64(0))
  /// .Write(val.GetUint64(1))
  /// .Write(val.GetUint64(2))
  /// .Write(val.GetUint64(3))
  /// .Finalize()
  int SipHashUint256(
    int k0,
    int k1,
    int arg2,
  ) {
    return _SipHashUint256(
      k0,
      k1,
      arg2,
    );
  }

  late final _SipHashUint256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Uint64, ffi.Uint64, ffi.Int)>>('SipHashUint256');
  late final _SipHashUint256 =
      _SipHashUint256Ptr.asFunction<int Function(int, int, int)>();

  int SipHashUint256Extra(
    int k0,
    int k1,
    int arg2,
  ) {
    return _SipHashUint256Extra(
      k0,
      k1,
      arg2,
    );
  }

  late final _SipHashUint256ExtraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Uint64, ffi.Uint64, ffi.Int)>>('SipHashUint256Extra');
  late final _SipHashUint256Extra =
      _SipHashUint256ExtraPtr.asFunction<int Function(int, int, int)>();

  /// secp256k1:
  /// const unsigned int PRIVATE_KEY_SIZE = 279;
  /// const unsigned int PUBLIC_KEY_SIZE  = 65;
  /// const unsigned int SIGNATURE_SIZE   = 72;
  ///
  /// see www.keylength.com
  /// script supports up to 75 for single byte push
  late final ffi.Pointer<ffi.UnsignedInt> _BIP32_EXTKEY_SIZE =
      _lookup<ffi.UnsignedInt>('BIP32_EXTKEY_SIZE');

  int get BIP32_EXTKEY_SIZE => _BIP32_EXTKEY_SIZE.value;

  set BIP32_EXTKEY_SIZE(int value) => _BIP32_EXTKEY_SIZE.value = value;

  /// A reference to a CKey: the Hash160 of its serialized public key
  late final ffi.Pointer<ffi.Int> _CKeyID = _lookup<ffi.Int>('CKeyID');

  int get CKeyID => _CKeyID.value;

  set CKeyID(int value) => _CKeyID.value = value;

  /// An encapsulated public key.
  late final ffi.Pointer<ffi.Int> _CPubKey = _lookup<ffi.Int>('CPubKey');

  int get CPubKey => _CPubKey.value;

  set CPubKey(int value) => _CPubKey.value = value;

  /// Users of this module must hold an ECCVerifyHandle. The constructor and
  /// destructor of these are not allowed to run in parallel, though.
  late final ffi.Pointer<ffi.Int> _ECCVerifyHandle =
      _lookup<ffi.Int>('ECCVerifyHandle');

  int get ECCVerifyHandle => _ECCVerifyHandle.value;

  set ECCVerifyHandle(int value) => _ECCVerifyHandle.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _MAX_SCRIPT_ELEMENT_SIZE =
      _lookup<ffi.UnsignedInt>('MAX_SCRIPT_ELEMENT_SIZE');

  int get MAX_SCRIPT_ELEMENT_SIZE => _MAX_SCRIPT_ELEMENT_SIZE.value;

  set MAX_SCRIPT_ELEMENT_SIZE(int value) =>
      _MAX_SCRIPT_ELEMENT_SIZE.value = value;

  late final ffi.Pointer<ffi.Int> _MAX_OPS_PER_SCRIPT =
      _lookup<ffi.Int>('MAX_OPS_PER_SCRIPT');

  int get MAX_OPS_PER_SCRIPT => _MAX_OPS_PER_SCRIPT.value;

  set MAX_OPS_PER_SCRIPT(int value) => _MAX_OPS_PER_SCRIPT.value = value;

  late final ffi.Pointer<ffi.Int> _MAX_PUBKEYS_PER_MULTISIG =
      _lookup<ffi.Int>('MAX_PUBKEYS_PER_MULTISIG');

  int get MAX_PUBKEYS_PER_MULTISIG => _MAX_PUBKEYS_PER_MULTISIG.value;

  set MAX_PUBKEYS_PER_MULTISIG(int value) =>
      _MAX_PUBKEYS_PER_MULTISIG.value = value;

  late final ffi.Pointer<ffi.Int> _MAX_SCRIPT_SIZE =
      _lookup<ffi.Int>('MAX_SCRIPT_SIZE');

  int get MAX_SCRIPT_SIZE => _MAX_SCRIPT_SIZE.value;

  set MAX_SCRIPT_SIZE(int value) => _MAX_SCRIPT_SIZE.value = value;

  late final ffi.Pointer<ffi.UnsignedInt> _LOCKTIME_THRESHOLD =
      _lookup<ffi.UnsignedInt>('LOCKTIME_THRESHOLD');

  int get LOCKTIME_THRESHOLD => _LOCKTIME_THRESHOLD.value;

  set LOCKTIME_THRESHOLD(int value) => _LOCKTIME_THRESHOLD.value = value;

  ffi.Pointer<ffi.Char> GetOpName(
    int opcode,
  ) {
    return _GetOpName(
      opcode,
    );
  }

  late final _GetOpNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'GetOpName');
  late final _GetOpName =
      _GetOpNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<ffi.Int> _scriptnum_error =
      _lookup<ffi.Int>('scriptnum_error');

  int get scriptnum_error => _scriptnum_error.value;

  set scriptnum_error(int value) => _scriptnum_error.value = value;

  late final ffi.Pointer<ffi.Int> _CScriptNum = _lookup<ffi.Int>('CScriptNum');

  int get CScriptNum => _CScriptNum.value;

  set CScriptNum(int value) => _CScriptNum.value = value;

  /// Serialized script, used inside transaction inputs and outputs
  late final ffi.Pointer<ffi.Int> _CScript = _lookup<ffi.Int>('CScript');

  int get CScript => _CScript.value;

  set CScript(int value) => _CScript.value = value;

  late final ffi.Pointer<ffi.Int> _CScriptBase =
      _lookup<ffi.Int>('CScriptBase');

  int get CScriptBase => _CScriptBase.value;

  set CScriptBase(int value) => _CScriptBase.value = value;

  late final ffi.Pointer<ffi.Int> _CReserveScript =
      _lookup<ffi.Int>('CReserveScript');

  int get CReserveScript => _CReserveScript.value;

  set CReserveScript(int value) => _CReserveScript.value = value;

  late final ffi.Pointer<CAmount> _COIN = _lookup<CAmount>('COIN');

  int get COIN => _COIN.value;

  set COIN(int value) => _COIN.value = value;

  late final ffi.Pointer<CAmount> _CENT = _lookup<CAmount>('CENT');

  int get CENT => _CENT.value;

  set CENT(int value) => _CENT.value = value;

  /// No amount larger than this (in satoshi) is valid.
  ///
  /// Note that this constant is *not* the total money supply, which in Bitcoin
  /// currently happens to be less than 21,000,000 BTC for various reasons, but
  /// rather a sanity check. As this sanity check is used by consensus-critical
  /// validation code, the exact value of the MAX_MONEY constant is consensus
  /// critical; in unusual circumstances like a(nother) overflow bug that allowed
  /// for the creation of coins out of thin air modification could lead to a fork.
  late final ffi.Pointer<CAmount> _MAX_MONEY = _lookup<CAmount>('MAX_MONEY');

  int get MAX_MONEY => _MAX_MONEY.value;

  set MAX_MONEY(int value) => _MAX_MONEY.value = value;

  /// Fee rate in satoshis per kilobyte: CAmount / kB
  late final ffi.Pointer<ffi.Int> _CFeeRate = _lookup<ffi.Int>('CFeeRate');

  int get CFeeRate => _CFeeRate.value;

  set CFeeRate(int value) => _CFeeRate.value = value;

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int wcstoumax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  late final ffi.Pointer<ffi.Int> _secp_primitives =
      _lookup<ffi.Int>('secp_primitives');

  int get secp_primitives => _secp_primitives.value;

  set secp_primitives(int value) => _secp_primitives.value = value;

  late final ffi.Pointer<ffi.Int> _StdLockGuard =
      _lookup<ffi.Int>('StdLockGuard');

  int get StdLockGuard => _StdLockGuard.value;

  set StdLockGuard(int value) => _StdLockGuard.value = value;

  int access(
    ffi.Pointer<ffi.Char> __name,
    int __type,
  ) {
    return _access(
      __name,
      __type,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Int, __off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pipe(
    ffi.Pointer<ffi.Int> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int alarm(
    int __seconds,
  ) {
    return _alarm(
      __seconds,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int sleep(
    int __seconds,
  ) {
    return _sleep(
      __seconds,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int ualarm(
    int __value,
    int __interval,
  ) {
    return _ualarm(
      __value,
      __interval,
    );
  }

  late final _ualarmPtr = _lookup<
      ffi.NativeFunction<
          __useconds_t Function(__useconds_t, __useconds_t)>>('ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int __useconds,
  ) {
    return _usleep(
      __useconds,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int chown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __uid_t, __gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int lchown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __uid_t, __gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int chdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chdir(
      __path,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fchdir(
    int __fd,
  ) {
    return _fchdir(
      __fd,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _getcwd(
      __buf,
      __size,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _getwd(
      __buf,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___environ.value = value;

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  late final _fexecvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fexecve');
  late final _fexecve = _fexecvePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execle(
      __path,
      __arg,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execl(
      __path,
      __arg,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execlp(
      __file,
      __arg,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nice(
    int __inc,
  ) {
    return _nice(
      __inc,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  void _exit(
    int __status,
  ) {
    return __exit(
      __status,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> __path,
    int __name,
  ) {
    return _pathconf(
      __path,
      __name,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fpathconf(
    int __fd,
    int __name,
  ) {
    return _fpathconf(
      __fd,
      __name,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  int sysconf(
    int __name,
  ) {
    return _sysconf(
      __name,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int confstr(
    int __name,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int __getpgid(
    int __pid,
  ) {
    return ___getpgid(
      __pid,
    );
  }

  late final ___getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('__getpgid');
  late final ___getpgid = ___getpgidPtr.asFunction<int Function(int)>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, __pid_t)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int getgroups(
    int __size,
    ffi.Pointer<__gid_t> __list,
  ) {
    return _getgroups(
      __size,
      __list,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<__gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<__gid_t>)>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t, __uid_t)>>(
          'setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t, __gid_t)>>(
          'setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ttyname(
    int __fd,
  ) {
    return _ttyname(
      __fd,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int isatty(
    int __fd,
  ) {
    return _isatty(
      __fd,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int link(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _link(
      __from,
      __to,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
    int __flags,
  ) {
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int symlink(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlink(
      __from,
      __to,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int readlink(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _rmdir(
      __path,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> __name,
    int __name_len,
  ) {
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _setlogin(
      __name,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
    ffi.Pointer<ffi.Char> __shortopts,
  ) {
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int gethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _gethostname(
      __name,
      __len,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _sethostname(
      __name,
      __len,
    );
  }

  late final _sethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _getdomainname(
      __name,
      __len,
    );
  }

  late final _getdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _setdomainname(
      __name,
      __len,
    );
  }

  late final _setdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vhangup');
  late final _vhangup = _vhangupPtr.asFunction<int Function()>();

  int revoke(
    ffi.Pointer<ffi.Char> __file,
  ) {
    return _revoke(
      __file,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int profil(
    ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, int, int, int)>();

  int acct(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _acct(
      __name,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  int chroot(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chroot(
      __path,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> __prompt,
  ) {
    return _getpass(
      __prompt,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> __file,
    int __length,
  ) {
    return _truncate(
      __file,
      __length,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, __off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ftruncate(
    int __fd,
    int __length,
  ) {
    return _ftruncate(
      __fd,
      __length,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    return _brk(
      __addr,
    );
  }

  late final _brkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'brk');
  late final _brk = _brkPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    return _sbrk(
      __delta,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int __sysno,
  ) {
    return _syscall(
      __sysno,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, __off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int fdatasync(
    int __fildes,
  ) {
    return _fdatasync(
      __fildes,
    );
  }

  late final _fdatasyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fdatasync');
  late final _fdatasync = _fdatasyncPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> __key,
    ffi.Pointer<ffi.Char> __salt,
  ) {
    return _crypt(
      __key,
      __salt,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    return _getentropy(
      __buffer,
      __length,
    );
  }

  late final _getentropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('getentropy');
  late final _getentropy =
      _getentropyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  late final ffi.Pointer<ffi.Int> _boost = _lookup<ffi.Int>('boost');

  int get boost => _boost.value;

  set boost(int value) => _boost.value = value;

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone1> __tz,
  ) {
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone1>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone1>)>();

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    return _getitimer(
      __which,
      __value,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __itimer_which_t, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__itimer_which_t, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _utimes(
      __file,
      __tvp,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _lutimes(
      __file,
      __tvp,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _futimes(
      __fd,
      __tvp,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  ffi.Pointer<ffi.WChar> wcscpy(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
  ) {
    return _wcscpy(
      __dest,
      __src,
    );
  }

  late final _wcscpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscpy');
  late final _wcscpy = _wcscpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcsncpy(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
    int __n,
  ) {
    return _wcsncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _wcsncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncpy');
  late final _wcsncpy = _wcsncpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcscat(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
  ) {
    return _wcscat(
      __dest,
      __src,
    );
  }

  late final _wcscatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscat');
  late final _wcscat = _wcscatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcsncat(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
    int __n,
  ) {
    return _wcsncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _wcsncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsncat');
  late final _wcsncat = _wcsncatPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int wcscmp(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
  ) {
    return _wcscmp(
      __s1,
      __s2,
    );
  }

  late final _wcscmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscmp');
  late final _wcscmp = _wcscmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsncmp(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wcsncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wcsncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsncmp');
  late final _wcsncmp = _wcsncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int wcscasecmp(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
  ) {
    return _wcscasecmp(
      __s1,
      __s2,
    );
  }

  late final _wcscasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscasecmp');
  late final _wcscasecmp = _wcscasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsncasecmp(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wcsncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wcsncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsncasecmp');
  late final _wcsncasecmp = _wcsncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int wcscasecmp_l(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    locale_t __loc,
  ) {
    return _wcscasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _wcscasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              locale_t)>>('wcscasecmp_l');
  late final _wcscasecmp_l = _wcscasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, locale_t)>();

  int wcsncasecmp_l(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _wcsncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _wcsncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, locale_t)>>('wcsncasecmp_l');
  late final _wcsncasecmp_l = _wcsncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, locale_t)>();

  int wcscoll(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
  ) {
    return _wcscoll(
      __s1,
      __s2,
    );
  }

  late final _wcscollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscoll');
  late final _wcscoll = _wcscollPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsxfrm(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wcsxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wcsxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcsxfrm');
  late final _wcsxfrm = _wcsxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int wcscoll_l(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    locale_t __loc,
  ) {
    return _wcscoll_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _wcscoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              locale_t)>>('wcscoll_l');
  late final _wcscoll_l = _wcscoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, locale_t)>();

  int wcsxfrm_l(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _wcsxfrm_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _wcsxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size, locale_t)>>('wcsxfrm_l');
  late final _wcsxfrm_l = _wcsxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int, locale_t)>();

  ffi.Pointer<ffi.WChar> wcsdup(
    ffi.Pointer<ffi.WChar> __s,
  ) {
    return _wcsdup(
      __s,
    );
  }

  late final _wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('wcsdup');
  late final _wcsdup = _wcsdupPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.Int> wcschr(
    ffi.Pointer<ffi.WChar> __wcs,
    int __wc,
  ) {
    return _wcschr(
      __wcs,
      __wc,
    );
  }

  late final _wcschrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcschr');
  late final _wcschr = _wcschrPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wcsrchr(
    ffi.Pointer<ffi.WChar> __wcs,
    int __wc,
  ) {
    return _wcsrchr(
      __wcs,
      __wc,
    );
  }

  late final _wcsrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar)>>('wcsrchr');
  late final _wcsrchr = _wcsrchrPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  int wcscspn(
    ffi.Pointer<ffi.WChar> __wcs,
    ffi.Pointer<ffi.WChar> __reject,
  ) {
    return _wcscspn(
      __wcs,
      __reject,
    );
  }

  late final _wcscspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcscspn');
  late final _wcscspn = _wcscspnPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int wcsspn(
    ffi.Pointer<ffi.WChar> __wcs,
    ffi.Pointer<ffi.WChar> __accept,
  ) {
    return _wcsspn(
      __wcs,
      __accept,
    );
  }

  late final _wcsspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsspn');
  late final _wcsspn = _wcsspnPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcspbrk(
    ffi.Pointer<ffi.WChar> __wcs,
    ffi.Pointer<ffi.WChar> __accept,
  ) {
    return _wcspbrk(
      __wcs,
      __accept,
    );
  }

  late final _wcspbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcspbrk');
  late final _wcspbrk = _wcspbrkPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcsstr(
    ffi.Pointer<ffi.WChar> __haystack,
    ffi.Pointer<ffi.WChar> __needle,
  ) {
    return _wcsstr(
      __haystack,
      __needle,
    );
  }

  late final _wcsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcsstr');
  late final _wcsstr = _wcsstrPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcstok(
    ffi.Pointer<ffi.WChar> __s,
    ffi.Pointer<ffi.WChar> __delim,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __ptr,
  ) {
    return _wcstok(
      __s,
      __delim,
      __ptr,
    );
  }

  late final _wcstokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstok');
  late final _wcstok = _wcstokPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int wcslen(
    ffi.Pointer<ffi.WChar> __s,
  ) {
    return _wcslen(
      __s,
    );
  }

  late final _wcslenPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>)>>('wcslen');
  late final _wcslen =
      _wcslenPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int wcsnlen(
    ffi.Pointer<ffi.WChar> __s,
    int __maxlen,
  ) {
    return _wcsnlen(
      __s,
      __maxlen,
    );
  }

  late final _wcsnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcsnlen');
  late final _wcsnlen =
      _wcsnlenPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.Int> wmemchr(
    ffi.Pointer<ffi.WChar> __s,
    int __c,
    int __n,
  ) {
    return _wmemchr(
      __s,
      __c,
      __n,
    );
  }

  late final _wmemchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('wmemchr');
  late final _wmemchr = _wmemchrPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>, int, int)>();

  int wmemcmp(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wmemcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wmemcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wmemcmp');
  late final _wmemcmp = _wmemcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.Int> wmemcpy(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wmemcpy(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wmemcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wmemcpy');
  late final _wmemcpy = _wmemcpyPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.Int> wmemmove(
    ffi.Pointer<ffi.WChar> __s1,
    ffi.Pointer<ffi.WChar> __s2,
    int __n,
  ) {
    return _wmemmove(
      __s1,
      __s2,
      __n,
    );
  }

  late final _wmemmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wmemmove');
  late final _wmemmove = _wmemmovePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> wmemset(
    ffi.Pointer<ffi.WChar> __s,
    int __c,
    int __n,
  ) {
    return _wmemset(
      __s,
      __c,
      __n,
    );
  }

  late final _wmemsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.WChar, ffi.Size)>>('wmemset');
  late final _wmemset = _wmemsetPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int, int)>();

  int btowc(
    int __c,
  ) {
    return _btowc(
      __c,
    );
  }

  late final _btowcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Int)>>('btowc');
  late final _btowc = _btowcPtr.asFunction<int Function(int)>();

  int wctob(
    int __c,
  ) {
    return _wctob(
      __c,
    );
  }

  late final _wctobPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(wint_t)>>('wctob');
  late final _wctob = _wctobPtr.asFunction<int Function(int)>();

  int mbsinit(
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _mbsinit(
      __ps,
    );
  }

  late final _mbsinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mbstate_t>)>>(
          'mbsinit');
  late final _mbsinit =
      _mbsinitPtr.asFunction<int Function(ffi.Pointer<mbstate_t>)>();

  int mbrtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<mbstate_t> __p,
  ) {
    return _mbrtowc(
      __pwc,
      __s,
      __n,
      __p,
    );
  }

  late final _mbrtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<mbstate_t>)>>('mbrtowc');
  late final _mbrtowc = _mbrtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<mbstate_t>)>();

  int wcrtomb(
    ffi.Pointer<ffi.Char> __s,
    int __wc,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _wcrtomb(
      __s,
      __wc,
      __ps,
    );
  }

  late final _wcrtombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.WChar,
              ffi.Pointer<mbstate_t>)>>('wcrtomb');
  late final _wcrtomb = _wcrtombPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<mbstate_t>)>();

  int __mbrlen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return ___mbrlen(
      __s,
      __n,
      __ps,
    );
  }

  late final ___mbrlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<mbstate_t>)>>('__mbrlen');
  late final ___mbrlen = ___mbrlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<mbstate_t>)>();

  int mbrlen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _mbrlen(
      __s,
      __n,
      __ps,
    );
  }

  late final _mbrlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbrlen');
  late final _mbrlen = _mbrlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<mbstate_t>)>();

  int mbsrtowcs(
    ffi.Pointer<ffi.WChar> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __src,
    int __len,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _mbsrtowcs(
      __dst,
      __src,
      __len,
      __ps,
    );
  }

  late final _mbsrtowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbsrtowcs');
  late final _mbsrtowcs = _mbsrtowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<mbstate_t>)>();

  int wcsrtombs(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __src,
    int __len,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _wcsrtombs(
      __dst,
      __src,
      __len,
      __ps,
    );
  }

  late final _wcsrtombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('wcsrtombs');
  late final _wcsrtombs = _wcsrtombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, ffi.Pointer<mbstate_t>)>();

  int mbsnrtowcs(
    ffi.Pointer<ffi.WChar> __dst,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __src,
    int __nmc,
    int __len,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _mbsnrtowcs(
      __dst,
      __src,
      __nmc,
      __len,
      __ps,
    );
  }

  late final _mbsnrtowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('mbsnrtowcs');
  late final _mbsnrtowcs = _mbsnrtowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, int, ffi.Pointer<mbstate_t>)>();

  int wcsnrtombs(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __src,
    int __nwc,
    int __len,
    ffi.Pointer<mbstate_t> __ps,
  ) {
    return _wcsnrtombs(
      __dst,
      __src,
      __nwc,
      __len,
      __ps,
    );
  }

  late final _wcsnrtombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<mbstate_t>)>>('wcsnrtombs');
  late final _wcsnrtombs = _wcsnrtombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, int, ffi.Pointer<mbstate_t>)>();

  double wcstod(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
  ) {
    return _wcstod(
      __nptr,
      __endptr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double wcstof(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
  ) {
    return _wcstof(
      __nptr,
      __endptr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int wcstol(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoul(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoll(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoull(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  ffi.Pointer<ffi.WChar> wcpcpy(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
  ) {
    return _wcpcpy(
      __dest,
      __src,
    );
  }

  late final _wcpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('wcpcpy');
  late final _wcpcpy = _wcpcpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> wcpncpy(
    ffi.Pointer<ffi.WChar> __dest,
    ffi.Pointer<ffi.WChar> __src,
    int __n,
  ) {
    return _wcpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _wcpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcpncpy');
  late final _wcpncpy = _wcpncpyPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<__FILE> open_wmemstream(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_wmemstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_wmemstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<__FILE> Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>)>>('open_wmemstream');
  late final _open_wmemstream = _open_wmemstreamPtr.asFunction<
      ffi.Pointer<__FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Pointer<ffi.Size>)>();

  int fwide(
    ffi.Pointer<__FILE> __fp,
    int __mode,
  ) {
    return _fwide(
      __fp,
      __mode,
    );
  }

  late final _fwidePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<__FILE>, ffi.Int)>>(
      'fwide');
  late final _fwide =
      _fwidePtr.asFunction<int Function(ffi.Pointer<__FILE>, int)>();

  int fwprintf(
    ffi.Pointer<__FILE> __stream,
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _fwprintf(
      __stream,
      __format,
    );
  }

  late final _fwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>)>>('fwprintf');
  late final _fwprintf = _fwprintfPtr
      .asFunction<int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>)>();

  int wprintf(
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _wprintf(
      __format,
    );
  }

  late final _wprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          'wprintf');
  late final _wprintf =
      _wprintfPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int swprintf(
    ffi.Pointer<ffi.WChar> __s,
    int __n,
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _swprintf(
      __s,
      __n,
      __format,
    );
  }

  late final _swprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>)>>('swprintf');
  late final _swprintf = _swprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>)>();

  int vfwprintf(
    ffi.Pointer<__FILE> __s,
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfwprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<__va_list_tag>)>>('vfwprintf');
  late final _vfwprintf = _vfwprintfPtr.asFunction<
      int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<__va_list_tag>)>();

  int vwprintf(
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vwprintf(
      __format,
      __arg,
    );
  }

  late final _vwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<__va_list_tag>)>>('vwprintf');
  late final _vwprintf = _vwprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<__va_list_tag>)>();

  int vswprintf(
    ffi.Pointer<ffi.WChar> __s,
    int __n,
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vswprintf(
      __s,
      __n,
      __format,
      __arg,
    );
  }

  late final _vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<__va_list_tag>)>>('vswprintf');
  late final _vswprintf = _vswprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<__va_list_tag>)>();

  int fwscanf(
    ffi.Pointer<__FILE> __stream,
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _fwscanf(
      __stream,
      __format,
    );
  }

  late final _fwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>)>>('fwscanf');
  late final _fwscanf = _fwscanfPtr
      .asFunction<int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>)>();

  int wscanf(
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _wscanf(
      __format,
    );
  }

  late final _wscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          'wscanf');
  late final _wscanf =
      _wscanfPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int swscanf(
    ffi.Pointer<ffi.WChar> __s,
    ffi.Pointer<ffi.WChar> __format,
  ) {
    return _swscanf(
      __s,
      __format,
    );
  }

  late final _swscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('swscanf');
  late final _swscanf = _swscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int vfwscanf(
    ffi.Pointer<__FILE> __s,
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfwscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<__va_list_tag>)>>('vfwscanf');
  late final _vfwscanf = _vfwscanfPtr.asFunction<
      int Function(ffi.Pointer<__FILE>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<__va_list_tag>)>();

  int vwscanf(
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vwscanf(
      __format,
      __arg,
    );
  }

  late final _vwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<__va_list_tag>)>>('vwscanf');
  late final _vwscanf = _vwscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<__va_list_tag>)>();

  int vswscanf(
    ffi.Pointer<ffi.WChar> __s,
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vswscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<__va_list_tag>)>>('vswscanf');
  late final _vswscanf = _vswscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<__va_list_tag>)>();

  int fgetwc(
    ffi.Pointer<__FILE> __stream,
  ) {
    return _fgetwc(
      __stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<__FILE>)>>(
          'fgetwc');
  late final _fgetwc =
      _fgetwcPtr.asFunction<int Function(ffi.Pointer<__FILE>)>();

  int getwc(
    ffi.Pointer<__FILE> __stream,
  ) {
    return _getwc(
      __stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<__FILE>)>>(
          'getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<__FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  int fputwc(
    int __wc,
    ffi.Pointer<__FILE> __stream,
  ) {
    return _fputwc(
      __wc,
      __stream,
    );
  }

  late final _fputwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<__FILE>)>>(
      'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<__FILE>)>();

  int putwc(
    int __wc,
    ffi.Pointer<__FILE> __stream,
  ) {
    return _putwc(
      __wc,
      __stream,
    );
  }

  late final _putwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<__FILE>)>>(
      'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<__FILE>)>();

  int putwchar(
    int __wc,
  ) {
    return _putwchar(
      __wc,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> __ws,
    int __n,
    ffi.Pointer<__FILE> __stream,
  ) {
    return _fgetws(
      __ws,
      __n,
      __stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Int, ffi.Pointer<__FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<__FILE>)>();

  int fputws(
    ffi.Pointer<ffi.WChar> __ws,
    ffi.Pointer<__FILE> __stream,
  ) {
    return _fputws(
      __ws,
      __stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<__FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<__FILE>)>();

  int ungetwc(
    int __wc,
    ffi.Pointer<__FILE> __stream,
  ) {
    return _ungetwc(
      __wc,
      __stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<__FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<__FILE>)>();

  int wcsftime(
    ffi.Pointer<ffi.WChar> __s,
    int __maxsize,
    ffi.Pointer<ffi.WChar> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _wcsftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>)>();

  /// Wrapped boost mutex: supports recursive locking, but no waiting
  /// TODO: We should move away from using the recursive lock by default.
  late final ffi.Pointer<ffi.Int> _CCriticalSection =
      _lookup<ffi.Int>('CCriticalSection');

  int get CCriticalSection => _CCriticalSection.value;

  set CCriticalSection(int value) => _CCriticalSection.value = value;

  late final ffi.Pointer<ffi.Int> _AnnotatedMixin =
      _lookup<ffi.Int>('AnnotatedMixin');

  int get AnnotatedMixin => _AnnotatedMixin.value;

  set AnnotatedMixin(int value) => _AnnotatedMixin.value = value;

  late final ffi.Pointer<ffi.Int> _CSemaphore = _lookup<ffi.Int>('CSemaphore');

  int get CSemaphore => _CSemaphore.value;

  set CSemaphore(int value) => _CSemaphore.value = value;

  /// RAII-style semaphore lock
  late final ffi.Pointer<ffi.Int> _CSemaphoreGrant =
      _lookup<ffi.Int>('CSemaphoreGrant');

  int get CSemaphoreGrant => _CSemaphoreGrant.value;

  set CSemaphoreGrant(int value) => _CSemaphoreGrant.value = value;

  late final ffi.Pointer<ffi.Int> _spark = _lookup<ffi.Int>('spark');

  int get spark => _spark.value;

  set spark(int value) => _spark.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int OPENSSL_sk_num(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_num(
      arg0,
    );
  }

  late final _OPENSSL_sk_numPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_num');
  late final _OPENSSL_sk_num =
      _OPENSSL_sk_numPtr.asFunction<int Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_value(
    ffi.Pointer<OPENSSL_STACK> arg0,
    int arg1,
  ) {
    return _OPENSSL_sk_value(
      arg0,
      arg1,
    );
  }

  late final _OPENSSL_sk_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_value');
  late final _OPENSSL_sk_value = _OPENSSL_sk_valuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_set(
    ffi.Pointer<OPENSSL_STACK> st,
    int i,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_set(
      st,
      i,
      data,
    );
  }

  late final _OPENSSL_sk_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_set');
  late final _OPENSSL_sk_set = _OPENSSL_sk_setPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new(
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_new(
      cmp,
    );
  }

  late final _OPENSSL_sk_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_new');
  late final _OPENSSL_sk_new = _OPENSSL_sk_newPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_null() {
    return _OPENSSL_sk_new_null();
  }

  late final _OPENSSL_sk_new_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OPENSSL_STACK> Function()>>(
          'OPENSSL_sk_new_null');
  late final _OPENSSL_sk_new_null = _OPENSSL_sk_new_nullPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function()>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_reserve(
    OPENSSL_sk_compfunc c,
    int n,
  ) {
    return _OPENSSL_sk_new_reserve(
      c,
      n,
    );
  }

  late final _OPENSSL_sk_new_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc, ffi.Int)>>('OPENSSL_sk_new_reserve');
  late final _OPENSSL_sk_new_reserve = _OPENSSL_sk_new_reservePtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc, int)>();

  int OPENSSL_sk_reserve(
    ffi.Pointer<OPENSSL_STACK> st,
    int n,
  ) {
    return _OPENSSL_sk_reserve(
      st,
      n,
    );
  }

  late final _OPENSSL_sk_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_reserve');
  late final _OPENSSL_sk_reserve = _OPENSSL_sk_reservePtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  void OPENSSL_sk_free(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_free(
      arg0,
    );
  }

  late final _OPENSSL_sk_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_free');
  late final _OPENSSL_sk_free = _OPENSSL_sk_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_pop_free(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        func,
  ) {
    return _OPENSSL_sk_pop_free(
      st,
      func,
    );
  }

  late final _OPENSSL_sk_pop_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('OPENSSL_sk_pop_free');
  late final _OPENSSL_sk_pop_free = _OPENSSL_sk_pop_freePtr.asFunction<
      void Function(
          ffi.Pointer<OPENSSL_STACK>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_deep_copy(
    ffi.Pointer<OPENSSL_STACK> arg0,
    OPENSSL_sk_copyfunc c,
    OPENSSL_sk_freefunc f,
  ) {
    return _OPENSSL_sk_deep_copy(
      arg0,
      c,
      f,
    );
  }

  late final _OPENSSL_sk_deep_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_copyfunc,
              OPENSSL_sk_freefunc)>>('OPENSSL_sk_deep_copy');
  late final _OPENSSL_sk_deep_copy = _OPENSSL_sk_deep_copyPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc)>();

  int OPENSSL_sk_insert(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Void> data,
    int where,
  ) {
    return _OPENSSL_sk_insert(
      sk,
      data,
      where,
    );
  }

  late final _OPENSSL_sk_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('OPENSSL_sk_insert');
  late final _OPENSSL_sk_insert = _OPENSSL_sk_insertPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete(
    ffi.Pointer<OPENSSL_STACK> st,
    int loc,
  ) {
    return _OPENSSL_sk_delete(
      st,
      loc,
    );
  }

  late final _OPENSSL_sk_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_delete');
  late final _OPENSSL_sk_delete = _OPENSSL_sk_deletePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete_ptr(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _OPENSSL_sk_delete_ptr(
      st,
      p,
    );
  }

  late final _OPENSSL_sk_delete_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_delete_ptr');
  late final _OPENSSL_sk_delete_ptr = _OPENSSL_sk_delete_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find');
  late final _OPENSSL_sk_find = _OPENSSL_sk_findPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find_ex(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find_ex(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_find_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find_ex');
  late final _OPENSSL_sk_find_ex = _OPENSSL_sk_find_exPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_push(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_push(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_push');
  late final _OPENSSL_sk_push = _OPENSSL_sk_pushPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_unshift(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_unshift(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_unshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_unshift');
  late final _OPENSSL_sk_unshift = _OPENSSL_sk_unshiftPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_shift(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_shift(
      st,
    );
  }

  late final _OPENSSL_sk_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_shift');
  late final _OPENSSL_sk_shift = _OPENSSL_sk_shiftPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_pop(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_pop(
      st,
    );
  }

  late final _OPENSSL_sk_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_pop');
  late final _OPENSSL_sk_pop = _OPENSSL_sk_popPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_zero(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_zero(
      st,
    );
  }

  late final _OPENSSL_sk_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_zero');
  late final _OPENSSL_sk_zero = _OPENSSL_sk_zeroPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_set_cmp_func(
      sk,
      cmp,
    );
  }

  late final _OPENSSL_sk_set_cmp_funcPtr = _lookup<
      ffi.NativeFunction<
          OPENSSL_sk_compfunc Function(ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_set_cmp_func');
  late final _OPENSSL_sk_set_cmp_func = _OPENSSL_sk_set_cmp_funcPtr.asFunction<
      OPENSSL_sk_compfunc Function(
          ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_dup(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_dup(
      st,
    );
  }

  late final _OPENSSL_sk_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_dup');
  late final _OPENSSL_sk_dup = _OPENSSL_sk_dupPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_sort(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_sort(
      st,
    );
  }

  late final _OPENSSL_sk_sortPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_sort');
  late final _OPENSSL_sk_sort = _OPENSSL_sk_sortPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  int OPENSSL_sk_is_sorted(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_is_sorted(
      st,
    );
  }

  late final _OPENSSL_sk_is_sortedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_is_sorted');
  late final _OPENSSL_sk_is_sorted = _OPENSSL_sk_is_sortedPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>)>();

  int ERR_load_CRYPTO_strings() {
    return _ERR_load_CRYPTO_strings();
  }

  late final _ERR_load_CRYPTO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_CRYPTO_strings');
  late final _ERR_load_CRYPTO_strings =
      _ERR_load_CRYPTO_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<CRYPTO_RWLOCK> CRYPTO_THREAD_lock_new() {
    return _CRYPTO_THREAD_lock_new();
  }

  late final _CRYPTO_THREAD_lock_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CRYPTO_RWLOCK> Function()>>(
          'CRYPTO_THREAD_lock_new');
  late final _CRYPTO_THREAD_lock_new = _CRYPTO_THREAD_lock_newPtr.asFunction<
      ffi.Pointer<CRYPTO_RWLOCK> Function()>();

  int CRYPTO_THREAD_read_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_read_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_read_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_read_lock');
  late final _CRYPTO_THREAD_read_lock = _CRYPTO_THREAD_read_lockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_write_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_write_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_write_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_write_lock');
  late final _CRYPTO_THREAD_write_lock = _CRYPTO_THREAD_write_lockPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_unlock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_unlock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_unlock');
  late final _CRYPTO_THREAD_unlock = _CRYPTO_THREAD_unlockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  void CRYPTO_THREAD_lock_free(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_lock_free(
      lock,
    );
  }

  late final _CRYPTO_THREAD_lock_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
      'CRYPTO_THREAD_lock_free');
  late final _CRYPTO_THREAD_lock_free = _CRYPTO_THREAD_lock_freePtr.asFunction<
      void Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_add(
    ffi.Pointer<ffi.Int> val,
    int amount,
    ffi.Pointer<ffi.Int> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_add(
      val,
      amount,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_add');
  late final _CRYPTO_atomic_add = _CRYPTO_atomic_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_mem_ctrl(
    int mode,
  ) {
    return _CRYPTO_mem_ctrl(
      mode,
    );
  }

  late final _CRYPTO_mem_ctrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('CRYPTO_mem_ctrl');
  late final _CRYPTO_mem_ctrl =
      _CRYPTO_mem_ctrlPtr.asFunction<int Function(int)>();

  int OPENSSL_strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcpy(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OPENSSL_strlcpy');
  late final _OPENSSL_strlcpy = _OPENSSL_strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcat(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('OPENSSL_strlcat');
  late final _OPENSSL_strlcat = _OPENSSL_strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strnlen(
    ffi.Pointer<ffi.Char> str,
    int maxlen,
  ) {
    return _OPENSSL_strnlen(
      str,
      maxlen,
    );
  }

  late final _OPENSSL_strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('OPENSSL_strnlen');
  late final _OPENSSL_strnlen = _OPENSSL_strnlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> OPENSSL_buf2hexstr(
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int len,
  ) {
    return _OPENSSL_buf2hexstr(
      buffer,
      len,
    );
  }

  late final _OPENSSL_buf2hexstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('OPENSSL_buf2hexstr');
  late final _OPENSSL_buf2hexstr = _OPENSSL_buf2hexstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.UnsignedChar> OPENSSL_hexstr2buf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Long> len,
  ) {
    return _OPENSSL_hexstr2buf(
      str,
      len,
    );
  }

  late final _OPENSSL_hexstr2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('OPENSSL_hexstr2buf');
  late final _OPENSSL_hexstr2buf = _OPENSSL_hexstr2bufPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  int OPENSSL_hexchar2int(
    int c,
  ) {
    return _OPENSSL_hexchar2int(
      c,
    );
  }

  late final _OPENSSL_hexchar2intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedChar)>>(
          'OPENSSL_hexchar2int');
  late final _OPENSSL_hexchar2int =
      _OPENSSL_hexchar2intPtr.asFunction<int Function(int)>();

  int OpenSSL_version_num() {
    return _OpenSSL_version_num();
  }

  late final _OpenSSL_version_numPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'OpenSSL_version_num');
  late final _OpenSSL_version_num =
      _OpenSSL_version_numPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> OpenSSL_version(
    int type,
  ) {
    return _OpenSSL_version(
      type,
    );
  }

  late final _OpenSSL_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OpenSSL_version');
  late final _OpenSSL_version =
      _OpenSSL_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OPENSSL_issetugid() {
    return _OPENSSL_issetugid();
  }

  late final _OPENSSL_issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_issetugid');
  late final _OPENSSL_issetugid =
      _OPENSSL_issetugidPtr.asFunction<int Function()>();

  int CRYPTO_get_ex_new_index(
    int class_index,
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_new> new_func,
    ffi.Pointer<CRYPTO_EX_dup> dup_func,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _CRYPTO_get_ex_new_index(
      class_index,
      argl,
      argp,
      new_func,
      dup_func,
      free_func,
    );
  }

  late final _CRYPTO_get_ex_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Long,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_new>,
              ffi.Pointer<CRYPTO_EX_dup>,
              ffi.Pointer<CRYPTO_EX_free>)>>('CRYPTO_get_ex_new_index');
  late final _CRYPTO_get_ex_new_index = _CRYPTO_get_ex_new_indexPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_new>,
          ffi.Pointer<CRYPTO_EX_dup>, ffi.Pointer<CRYPTO_EX_free>)>();

  int CRYPTO_free_ex_index(
    int class_index,
    int idx,
  ) {
    return _CRYPTO_free_ex_index(
      class_index,
      idx,
    );
  }

  late final _CRYPTO_free_ex_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'CRYPTO_free_ex_index');
  late final _CRYPTO_free_ex_index =
      _CRYPTO_free_ex_indexPtr.asFunction<int Function(int, int)>();

  int CRYPTO_new_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_new_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_new_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_new_ex_data');
  late final _CRYPTO_new_ex_data = _CRYPTO_new_ex_dataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_dup_ex_data(
    int class_index,
    ffi.Pointer<CRYPTO_EX_DATA> to,
    ffi.Pointer<CRYPTO_EX_DATA> from,
  ) {
    return _CRYPTO_dup_ex_data(
      class_index,
      to,
      from,
    );
  }

  late final _CRYPTO_dup_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<CRYPTO_EX_DATA>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_dup_ex_data');
  late final _CRYPTO_dup_ex_data = _CRYPTO_dup_ex_dataPtr.asFunction<
      int Function(
          int, ffi.Pointer<CRYPTO_EX_DATA>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  void CRYPTO_free_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_free_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_free_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_free_ex_data');
  late final _CRYPTO_free_ex_data = _CRYPTO_free_ex_dataPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_set_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_set_ex_data(
      ad,
      idx,
      val,
    );
  }

  late final _CRYPTO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_set_ex_data');
  late final _CRYPTO_set_ex_data = _CRYPTO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_EX_DATA>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CRYPTO_get_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
  ) {
    return _CRYPTO_get_ex_data(
      ad,
      idx,
    );
  }

  late final _CRYPTO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int)>>('CRYPTO_get_ex_data');
  late final _CRYPTO_get_ex_data = _CRYPTO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_EX_DATA>, int)>();

  int CRYPTO_set_mem_functions(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>
        m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
                    ffi.Pointer<ffi.Char>, ffi.Int)>>
        r,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        f,
  ) {
    return _CRYPTO_set_mem_functions(
      m,
      r,
      f,
    );
  }

  late final _CRYPTO_set_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                          ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('CRYPTO_set_mem_functions');
  late final _CRYPTO_set_mem_functions =
      _CRYPTO_set_mem_functionsPtr.asFunction<
          int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                          ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int CRYPTO_set_mem_debug(
    int flag,
  ) {
    return _CRYPTO_set_mem_debug(
      flag,
    );
  }

  late final _CRYPTO_set_mem_debugPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CRYPTO_set_mem_debug');
  late final _CRYPTO_set_mem_debug =
      _CRYPTO_set_mem_debugPtr.asFunction<int Function(int)>();

  void CRYPTO_get_mem_functions(
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>
        m,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                        ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>
        r,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Char>, ffi.Int)>>>
        f,
  ) {
    return _CRYPTO_get_mem_functions(
      m,
      r,
      f,
    );
  }

  late final _CRYPTO_get_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>,
                              ffi.Int)>>>)>>('CRYPTO_get_mem_functions');
  late final _CRYPTO_get_mem_functions =
      _CRYPTO_get_mem_functionsPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>, ffi.Int)>>>)>();

  ffi.Pointer<ffi.Void> CRYPTO_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_malloc');
  late final _CRYPTO_malloc = _CRYPTO_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_zalloc');
  late final _CRYPTO_zalloc = _CRYPTO_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_memdup(
    ffi.Pointer<ffi.Void> str,
    int siz,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_memdup(
      str,
      siz,
      file,
      line,
    );
  }

  late final _CRYPTO_memdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_memdup');
  late final _CRYPTO_memdup = _CRYPTO_memdupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strdup(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strdup(
      str,
      file,
      line,
    );
  }

  late final _CRYPTO_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strdup');
  late final _CRYPTO_strdup = _CRYPTO_strdupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strndup(
    ffi.Pointer<ffi.Char> str,
    int s,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strndup(
      str,
      s,
      file,
      line,
    );
  }

  late final _CRYPTO_strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strndup');
  late final _CRYPTO_strndup = _CRYPTO_strndupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_free');
  late final _CRYPTO_free = _CRYPTO_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_clear_free');
  late final _CRYPTO_clear_free = _CRYPTO_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_realloc(
    ffi.Pointer<ffi.Void> addr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_realloc(
      addr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_realloc');
  late final _CRYPTO_realloc = _CRYPTO_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_clear_realloc(
    ffi.Pointer<ffi.Void> addr,
    int old_num,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_realloc(
      addr,
      old_num,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_clear_realloc');
  late final _CRYPTO_clear_realloc = _CRYPTO_clear_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_malloc_init(
    int sz,
    int minsize,
  ) {
    return _CRYPTO_secure_malloc_init(
      sz,
      minsize,
    );
  }

  late final _CRYPTO_secure_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size, ffi.Int)>>(
          'CRYPTO_secure_malloc_init');
  late final _CRYPTO_secure_malloc_init =
      _CRYPTO_secure_malloc_initPtr.asFunction<int Function(int, int)>();

  int CRYPTO_secure_malloc_done() {
    return _CRYPTO_secure_malloc_done();
  }

  late final _CRYPTO_secure_malloc_donePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_done');
  late final _CRYPTO_secure_malloc_done =
      _CRYPTO_secure_malloc_donePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_malloc');
  late final _CRYPTO_secure_malloc = _CRYPTO_secure_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_zalloc');
  late final _CRYPTO_secure_zalloc = _CRYPTO_secure_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_free');
  late final _CRYPTO_secure_free = _CRYPTO_secure_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_secure_clear_free');
  late final _CRYPTO_secure_clear_free =
      _CRYPTO_secure_clear_freePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_allocated(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_allocated(
      ptr,
    );
  }

  late final _CRYPTO_secure_allocatedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_allocated');
  late final _CRYPTO_secure_allocated = _CRYPTO_secure_allocatedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_malloc_initialized() {
    return _CRYPTO_secure_malloc_initialized();
  }

  late final _CRYPTO_secure_malloc_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_initialized');
  late final _CRYPTO_secure_malloc_initialized =
      _CRYPTO_secure_malloc_initializedPtr.asFunction<int Function()>();

  int CRYPTO_secure_actual_size(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_actual_size(
      ptr,
    );
  }

  late final _CRYPTO_secure_actual_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_actual_size');
  late final _CRYPTO_secure_actual_size = _CRYPTO_secure_actual_sizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_used() {
    return _CRYPTO_secure_used();
  }

  late final _CRYPTO_secure_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('CRYPTO_secure_used');
  late final _CRYPTO_secure_used =
      _CRYPTO_secure_usedPtr.asFunction<int Function()>();

  void OPENSSL_cleanse(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OPENSSL_cleanse(
      ptr,
      len,
    );
  }

  late final _OPENSSL_cleansePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('OPENSSL_cleanse');
  late final _OPENSSL_cleanse = _OPENSSL_cleansePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_die(
    ffi.Pointer<ffi.Char> assertion,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _OPENSSL_die(
      assertion,
      file,
      line,
    );
  }

  late final _OPENSSL_diePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('OPENSSL_die');
  late final _OPENSSL_die = _OPENSSL_diePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_isservice() {
    return _OPENSSL_isservice();
  }

  late final _OPENSSL_isservicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_isservice');
  late final _OPENSSL_isservice =
      _OPENSSL_isservicePtr.asFunction<int Function()>();

  int FIPS_mode() {
    return _FIPS_mode();
  }

  late final _FIPS_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('FIPS_mode');
  late final _FIPS_mode = _FIPS_modePtr.asFunction<int Function()>();

  int FIPS_mode_set(
    int r,
  ) {
    return _FIPS_mode_set(
      r,
    );
  }

  late final _FIPS_mode_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('FIPS_mode_set');
  late final _FIPS_mode_set = _FIPS_mode_setPtr.asFunction<int Function(int)>();

  void OPENSSL_init() {
    return _OPENSSL_init();
  }

  late final _OPENSSL_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_init');
  late final _OPENSSL_init = _OPENSSL_initPtr.asFunction<void Function()>();

  void OPENSSL_fork_prepare() {
    return _OPENSSL_fork_prepare();
  }

  late final _OPENSSL_fork_preparePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_prepare');
  late final _OPENSSL_fork_prepare =
      _OPENSSL_fork_preparePtr.asFunction<void Function()>();

  void OPENSSL_fork_parent() {
    return _OPENSSL_fork_parent();
  }

  late final _OPENSSL_fork_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_parent');
  late final _OPENSSL_fork_parent =
      _OPENSSL_fork_parentPtr.asFunction<void Function()>();

  void OPENSSL_fork_child() {
    return _OPENSSL_fork_child();
  }

  late final _OPENSSL_fork_childPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_child');
  late final _OPENSSL_fork_child =
      _OPENSSL_fork_childPtr.asFunction<void Function()>();

  ffi.Pointer<tm> OPENSSL_gmtime(
    ffi.Pointer<time_t> timer,
    ffi.Pointer<tm> result,
  ) {
    return _OPENSSL_gmtime(
      timer,
      result,
    );
  }

  late final _OPENSSL_gmtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('OPENSSL_gmtime');
  late final _OPENSSL_gmtime = _OPENSSL_gmtimePtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int OPENSSL_gmtime_adj(
    ffi.Pointer<tm> tm,
    int offset_day,
    int offset_sec,
  ) {
    return _OPENSSL_gmtime_adj(
      tm,
      offset_day,
      offset_sec,
    );
  }

  late final _OPENSSL_gmtime_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<tm>, ffi.Int, ffi.Long)>>('OPENSSL_gmtime_adj');
  late final _OPENSSL_gmtime_adj = _OPENSSL_gmtime_adjPtr.asFunction<
      int Function(ffi.Pointer<tm>, int, int)>();

  int OPENSSL_gmtime_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<tm> from,
    ffi.Pointer<tm> to,
  ) {
    return _OPENSSL_gmtime_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _OPENSSL_gmtime_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<tm>, ffi.Pointer<tm>)>>('OPENSSL_gmtime_diff');
  late final _OPENSSL_gmtime_diff = _OPENSSL_gmtime_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<tm>,
          ffi.Pointer<tm>)>();

  int CRYPTO_memcmp(
    ffi.Pointer<ffi.Void> in_a,
    ffi.Pointer<ffi.Void> in_b,
    int len,
  ) {
    return _CRYPTO_memcmp(
      in_a,
      in_b,
      len,
    );
  }

  late final _CRYPTO_memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('CRYPTO_memcmp');
  late final _CRYPTO_memcmp = _CRYPTO_memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_cleanup() {
    return _OPENSSL_cleanup();
  }

  late final _OPENSSL_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_cleanup');
  late final _OPENSSL_cleanup =
      _OPENSSL_cleanupPtr.asFunction<void Function()>();

  int OPENSSL_init_crypto(
    int opts,
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_init_crypto(
      opts,
      settings,
    );
  }

  late final _OPENSSL_init_cryptoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64,
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_init_crypto');
  late final _OPENSSL_init_crypto = _OPENSSL_init_cryptoPtr.asFunction<
      int Function(int, ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int OPENSSL_atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> handler,
  ) {
    return _OPENSSL_atexit(
      handler,
    );
  }

  late final _OPENSSL_atexitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'OPENSSL_atexit');
  late final _OPENSSL_atexit = _OPENSSL_atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void OPENSSL_thread_stop() {
    return _OPENSSL_thread_stop();
  }

  late final _OPENSSL_thread_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_thread_stop');
  late final _OPENSSL_thread_stop =
      _OPENSSL_thread_stopPtr.asFunction<void Function()>();

  ffi.Pointer<OPENSSL_INIT_SETTINGS> OPENSSL_INIT_new() {
    return _OPENSSL_INIT_new();
  }

  late final _OPENSSL_INIT_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>>(
      'OPENSSL_INIT_new');
  late final _OPENSSL_INIT_new = _OPENSSL_INIT_newPtr.asFunction<
      ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>();

  int OPENSSL_INIT_set_config_filename(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_filename,
  ) {
    return _OPENSSL_INIT_set_config_filename(
      settings,
      config_filename,
    );
  }

  late final _OPENSSL_INIT_set_config_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_filename');
  late final _OPENSSL_INIT_set_config_filename =
      _OPENSSL_INIT_set_config_filenamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_set_config_file_flags(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    int flags,
  ) {
    return _OPENSSL_INIT_set_config_file_flags(
      settings,
      flags,
    );
  }

  late final _OPENSSL_INIT_set_config_file_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.UnsignedLong)>>('OPENSSL_INIT_set_config_file_flags');
  late final _OPENSSL_INIT_set_config_file_flags =
      _OPENSSL_INIT_set_config_file_flagsPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>, int)>();

  int OPENSSL_INIT_set_config_appname(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_appname,
  ) {
    return _OPENSSL_INIT_set_config_appname(
      settings,
      config_appname,
    );
  }

  late final _OPENSSL_INIT_set_config_appnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_appname');
  late final _OPENSSL_INIT_set_config_appname =
      _OPENSSL_INIT_set_config_appnamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_free(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_INIT_free(
      settings,
    );
  }

  late final _OPENSSL_INIT_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_INIT_free');
  late final _OPENSSL_INIT_free = _OPENSSL_INIT_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int __sched_cpucount(
    int __setsize,
    ffi.Pointer<cpu_set_t> __setp,
  ) {
    return ___sched_cpucount(
      __setsize,
      __setp,
    );
  }

  late final ___sched_cpucountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size, ffi.Pointer<cpu_set_t>)>>('__sched_cpucount');
  late final ___sched_cpucount = ___sched_cpucountPtr
      .asFunction<int Function(int, ffi.Pointer<cpu_set_t>)>();

  ffi.Pointer<cpu_set_t> __sched_cpualloc(
    int __count,
  ) {
    return ___sched_cpualloc(
      __count,
    );
  }

  late final ___sched_cpuallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Size)>>(
          '__sched_cpualloc');
  late final ___sched_cpualloc =
      ___sched_cpuallocPtr.asFunction<ffi.Pointer<cpu_set_t> Function(int)>();

  void __sched_cpufree(
    ffi.Pointer<cpu_set_t> __set,
  ) {
    return ___sched_cpufree(
      __set,
    );
  }

  late final ___sched_cpufreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>(
          '__sched_cpufree');
  late final ___sched_cpufree =
      ___sched_cpufreePtr.asFunction<void Function(ffi.Pointer<cpu_set_t>)>();

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  late final _sched_setparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __pid_t, ffi.Pointer<sched_param>)>>('sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  late final _sched_getparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __pid_t, ffi.Pointer<sched_param>)>>('sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  late final _sched_setschedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__pid_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(
    int __pid,
  ) {
    return _sched_getscheduler(
      __pid,
    );
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t)>>(
          'sched_getscheduler');
  late final _sched_getscheduler =
      _sched_getschedulerPtr.asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(
    int __algorithm,
  ) {
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  int sched_get_priority_min(
    int __algorithm,
  ) {
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  late final _sched_rr_get_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>>(
      'sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(
      __newthread,
      __attr,
      __start_routine,
      __arg,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    return _pthread_exit(
      __retval,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(
    int __th,
  ) {
    return _pthread_detach(
      __th,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(int, int)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_init(
      __attr,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_destroy(
      __attr,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __guardsize,
  ) {
    return _pthread_attr_getguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> __attr,
    int __scope,
  ) {
    return _pthread_attr_setscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_setschedprio');
  late final _pthread_setschedprio =
      _pthread_setschedprioPtr.asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int> __oldstate,
  ) {
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int> __oldtype,
  ) {
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(
    int __th,
  ) {
    return _pthread_cancel(
      __th,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  void __pthread_register_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_register_cancel(
      __buf,
    );
  }

  late final ___pthread_register_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_register_cancel');
  late final ___pthread_register_cancel = ___pthread_register_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unregister_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unregister_cancel(
      __buf,
    );
  }

  late final ___pthread_unregister_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_unregister_cancel');
  late final ___pthread_unregister_cancel = ___pthread_unregister_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unwind_next(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unwind_next(
      __buf,
    );
  }

  late final ___pthread_unwind_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__pthread_unwind_buf_t>)>>('__pthread_unwind_next');
  late final ___pthread_unwind_next = ___pthread_unwind_nextPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  int __sigsetjmp(
    ffi.Pointer<__jmp_buf_tag> __env,
    int __savemask,
  ) {
    return ___sigsetjmp(
      __env,
      __savemask,
    );
  }

  late final ___sigsetjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__jmp_buf_tag>, ffi.Int)>>('__sigsetjmp');
  late final ___sigsetjmp = ___sigsetjmpPtr
      .asFunction<int Function(ffi.Pointer<__jmp_buf_tag>, int)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(
      __mutex,
      __mutexattr,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_destroy(
      __mutex,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_trylock(
      __mutex,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_lock(
      __mutex,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(
      __mutex,
      __abstime,
    );
  }

  late final _pthread_mutex_timedlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr.asFunction<
      int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_unlock(
      __mutex,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(
      __mutex,
      __prioceiling,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(
      __mutex,
      __prioceiling,
      __old_ceiling,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_consistent(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_consistent(
      __mutex,
    );
  }

  late final _pthread_mutex_consistentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_init(
      __attr,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_destroy(
      __attr,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_getrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust =
      _pthread_mutexattr_getrobustPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_setrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(
      __rwlock,
      __attr,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_destroy(
      __rwlock,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_rdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_tryrdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedrdlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock =
      _pthread_rwlock_timedrdlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_wrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_trywrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedwrlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock =
      _pthread_rwlock_timedwrlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_unlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_init(
      __attr,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_destroy(
      __attr,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_getkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np =
      _pthread_rwlockattr_getkind_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_setkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(
      __cond,
      __cond_attr,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_destroy(
      __cond,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_signal(
      __cond,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_broadcast(
      __cond,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(
      __cond,
      __mutex,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(
      __cond,
      __mutex,
      __abstime,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_init(
      __attr,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_destroy(
      __attr,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_condattr_getclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_getclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<__clockid_t>)>>('pthread_condattr_getclock');
  late final _pthread_condattr_getclock =
      _pthread_condattr_getclockPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_setclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              __clockid_t)>>('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(
      __barrier,
      __attr,
      __count,
    );
  }

  late final _pthread_barrier_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>>('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr.asFunction<
      int Function(ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_barrier_destroy(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_destroy(
      __barrier,
    );
  }

  late final _pthread_barrier_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_wait(
      __barrier,
    );
  }

  late final _pthread_barrier_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_init(
      __attr,
    );
  }

  late final _pthread_barrierattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrierattr_t>)>>('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_destroy(
      __attr,
    );
  }

  late final _pthread_barrierattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>(
      'pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Int)>>('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        __destr_function,
  ) {
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int __key,
  ) {
    return _pthread_key_delete(
      __key,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    return _pthread_getspecific(
      __key,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  late final _pthread_getcpuclockidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__clockid_t>)>>('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<__clockid_t>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int CRYPTO_THREAD_run_once(
    ffi.Pointer<CRYPTO_ONCE> once,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> init,
  ) {
    return _CRYPTO_THREAD_run_once(
      once,
      init,
    );
  }

  late final _CRYPTO_THREAD_run_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<CRYPTO_ONCE>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'CRYPTO_THREAD_run_once');
  late final _CRYPTO_THREAD_run_once = _CRYPTO_THREAD_run_oncePtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_ONCE>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int CRYPTO_THREAD_init_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        cleanup,
  ) {
    return _CRYPTO_THREAD_init_local(
      key,
      cleanup,
    );
  }

  late final _CRYPTO_THREAD_init_localPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<CRYPTO_THREAD_LOCAL>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'CRYPTO_THREAD_init_local');
  late final _CRYPTO_THREAD_init_local =
      _CRYPTO_THREAD_init_localPtr.asFunction<
          int Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> CRYPTO_THREAD_get_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_get_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_get_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>('CRYPTO_THREAD_get_local');
  late final _CRYPTO_THREAD_get_local = _CRYPTO_THREAD_get_localPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  int CRYPTO_THREAD_set_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_THREAD_set_local(
      key,
      val,
    );
  }

  late final _CRYPTO_THREAD_set_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_THREAD_set_local');
  late final _CRYPTO_THREAD_set_local = _CRYPTO_THREAD_set_localPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>, ffi.Pointer<ffi.Void>)>();

  int CRYPTO_THREAD_cleanup_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_cleanup_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_cleanup_localPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>(
      'CRYPTO_THREAD_cleanup_local');
  late final _CRYPTO_THREAD_cleanup_local = _CRYPTO_THREAD_cleanup_localPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  int CRYPTO_THREAD_get_current_id() {
    return _CRYPTO_THREAD_get_current_id();
  }

  late final _CRYPTO_THREAD_get_current_idPtr =
      _lookup<ffi.NativeFunction<CRYPTO_THREAD_ID Function()>>(
          'CRYPTO_THREAD_get_current_id');
  late final _CRYPTO_THREAD_get_current_id =
      _CRYPTO_THREAD_get_current_idPtr.asFunction<int Function()>();

  int CRYPTO_THREAD_compare_id(
    int a,
    int b,
  ) {
    return _CRYPTO_THREAD_compare_id(
      a,
      b,
    );
  }

  late final _CRYPTO_THREAD_compare_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CRYPTO_THREAD_ID, CRYPTO_THREAD_ID)>>('CRYPTO_THREAD_compare_id');
  late final _CRYPTO_THREAD_compare_id =
      _CRYPTO_THREAD_compare_idPtr.asFunction<int Function(int, int)>();

  int ERR_load_BIO_strings() {
    return _ERR_load_BIO_strings();
  }

  late final _ERR_load_BIO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BIO_strings');
  late final _ERR_load_BIO_strings =
      _ERR_load_BIO_stringsPtr.asFunction<int Function()>();

  int BIO_get_new_index() {
    return _BIO_get_new_index();
  }

  late final _BIO_get_new_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_get_new_index');
  late final _BIO_get_new_index =
      _BIO_get_new_indexPtr.asFunction<int Function()>();

  void BIO_set_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_set_flags(
      b,
      flags,
    );
  }

  late final _BIO_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_flags');
  late final _BIO_set_flags =
      _BIO_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_test_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_test_flags(
      b,
      flags,
    );
  }

  late final _BIO_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_test_flags');
  late final _BIO_test_flags =
      _BIO_test_flagsPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  void BIO_clear_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_clear_flags(
      b,
      flags,
    );
  }

  late final _BIO_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_clear_flags');
  late final _BIO_clear_flags =
      _BIO_clear_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  BIO_callback_fn BIO_get_callback(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback(
      b,
    );
  }

  late final _BIO_get_callbackPtr =
      _lookup<ffi.NativeFunction<BIO_callback_fn Function(ffi.Pointer<BIO>)>>(
          'BIO_get_callback');
  late final _BIO_get_callback = _BIO_get_callbackPtr.asFunction<
      BIO_callback_fn Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback(
    ffi.Pointer<BIO> b,
    BIO_callback_fn callback,
  ) {
    return _BIO_set_callback(
      b,
      callback,
    );
  }

  late final _BIO_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn)>>('BIO_set_callback');
  late final _BIO_set_callback = _BIO_set_callbackPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn)>();

  BIO_callback_fn_ex BIO_get_callback_ex(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_ex(
      b,
    );
  }

  late final _BIO_get_callback_exPtr = _lookup<
          ffi.NativeFunction<BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_ex');
  late final _BIO_get_callback_ex = _BIO_get_callback_exPtr.asFunction<
      BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_ex(
    ffi.Pointer<BIO> b,
    BIO_callback_fn_ex callback,
  ) {
    return _BIO_set_callback_ex(
      b,
      callback,
    );
  }

  late final _BIO_set_callback_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn_ex)>>('BIO_set_callback_ex');
  late final _BIO_set_callback_ex = _BIO_set_callback_exPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn_ex)>();

  ffi.Pointer<ffi.Char> BIO_get_callback_arg(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_arg(
      b,
    );
  }

  late final _BIO_get_callback_argPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_arg');
  late final _BIO_get_callback_arg = _BIO_get_callback_argPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_arg(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> arg,
  ) {
    return _BIO_set_callback_arg(
      b,
      arg,
    );
  }

  late final _BIO_set_callback_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>)>>('BIO_set_callback_arg');
  late final _BIO_set_callback_arg = _BIO_set_callback_argPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> BIO_method_name(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_name(
      b,
    );
  }

  late final _BIO_method_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_method_name');
  late final _BIO_method_name = _BIO_method_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  int BIO_method_type(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_type(
      b,
    );
  }

  late final _BIO_method_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_method_type');
  late final _BIO_method_type =
      _BIO_method_typePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_pending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_pending(
      b,
    );
  }

  late final _BIO_ctrl_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_pending');
  late final _BIO_ctrl_pending =
      _BIO_ctrl_pendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_wpending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_wpending(
      b,
    );
  }

  late final _BIO_ctrl_wpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_wpending');
  late final _BIO_ctrl_wpending =
      _BIO_ctrl_wpendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_write_guarantee(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_write_guarantee(
      b,
    );
  }

  late final _BIO_ctrl_get_write_guaranteePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_write_guarantee');
  late final _BIO_ctrl_get_write_guarantee = _BIO_ctrl_get_write_guaranteePtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_read_request(
      b,
    );
  }

  late final _BIO_ctrl_get_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_read_request');
  late final _BIO_ctrl_get_read_request = _BIO_ctrl_get_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_reset_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_reset_read_request(
      b,
    );
  }

  late final _BIO_ctrl_reset_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_reset_read_request');
  late final _BIO_ctrl_reset_read_request = _BIO_ctrl_reset_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_set_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _BIO_set_ex_data(
      bio,
      idx,
      data,
    );
  }

  late final _BIO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('BIO_set_ex_data');
  late final _BIO_set_ex_data = _BIO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
  ) {
    return _BIO_get_ex_data(
      bio,
      idx,
    );
  }

  late final _BIO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_get_ex_data');
  late final _BIO_get_ex_data = _BIO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int)>();

  int BIO_number_read(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_read(
      bio,
    );
  }

  late final _BIO_number_readPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_read');
  late final _BIO_number_read =
      _BIO_number_readPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_number_written(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_written(
      bio,
    );
  }

  late final _BIO_number_writtenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_written');
  late final _BIO_number_written =
      _BIO_number_writtenPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_asn1_set_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> prefix,
    ffi.Pointer<asn1_ps_func> prefix_free,
  ) {
    return _BIO_asn1_set_prefix(
      b,
      prefix,
      prefix_free,
    );
  }

  late final _BIO_asn1_set_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_prefix');
  late final _BIO_asn1_set_prefix = _BIO_asn1_set_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix_free,
  ) {
    return _BIO_asn1_get_prefix(
      b,
      pprefix,
      pprefix_free,
    );
  }

  late final _BIO_asn1_get_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_prefix');
  late final _BIO_asn1_get_prefix = _BIO_asn1_get_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  int BIO_asn1_set_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> suffix,
    ffi.Pointer<asn1_ps_func> suffix_free,
  ) {
    return _BIO_asn1_set_suffix(
      b,
      suffix,
      suffix_free,
    );
  }

  late final _BIO_asn1_set_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_suffix');
  late final _BIO_asn1_set_suffix = _BIO_asn1_set_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix_free,
  ) {
    return _BIO_asn1_get_suffix(
      b,
      psuffix,
      psuffix_free,
    );
  }

  late final _BIO_asn1_get_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_suffix');
  late final _BIO_asn1_get_suffix = _BIO_asn1_get_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  ffi.Pointer<BIO_METHOD> BIO_s_file() {
    return _BIO_s_file();
  }

  late final _BIO_s_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_file');
  late final _BIO_s_file =
      _BIO_s_filePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _BIO_new_file(
      filename,
      mode,
    );
  }

  late final _BIO_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('BIO_new_file');
  late final _BIO_new_file = _BIO_new_filePtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_fp(
    ffi.Pointer<FILE> stream,
    int close_flag,
  ) {
    return _BIO_new_fp(
      stream,
      close_flag,
    );
  }

  late final _BIO_new_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, ffi.Int)>>('BIO_new_fp');
  late final _BIO_new_fp = _BIO_new_fpPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, int)>();

  ffi.Pointer<BIO> BIO_new(
    ffi.Pointer<BIO_METHOD> type,
  ) {
    return _BIO_new(
      type,
    );
  }

  late final _BIO_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>>('BIO_new');
  late final _BIO_new = _BIO_newPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_free(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free(
      a,
    );
  }

  late final _BIO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_free');
  late final _BIO_free =
      _BIO_freePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_data(
    ffi.Pointer<BIO> a,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _BIO_set_data(
      a,
      ptr,
    );
  }

  late final _BIO_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('BIO_set_data');
  late final _BIO_set_data = _BIO_set_dataPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_data(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_data(
      a,
    );
  }

  late final _BIO_get_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_data');
  late final _BIO_get_data = _BIO_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>();

  void BIO_set_init(
    ffi.Pointer<BIO> a,
    int init,
  ) {
    return _BIO_set_init(
      a,
      init,
    );
  }

  late final _BIO_set_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_init');
  late final _BIO_set_init =
      _BIO_set_initPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_init(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_init(
      a,
    );
  }

  late final _BIO_get_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_init');
  late final _BIO_get_init =
      _BIO_get_initPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_shutdown(
    ffi.Pointer<BIO> a,
    int shut,
  ) {
    return _BIO_set_shutdown(
      a,
      shut,
    );
  }

  late final _BIO_set_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_shutdown');
  late final _BIO_set_shutdown =
      _BIO_set_shutdownPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_shutdown(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_shutdown(
      a,
    );
  }

  late final _BIO_get_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_shutdown');
  late final _BIO_get_shutdown =
      _BIO_get_shutdownPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_vfree(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_vfree(
      a,
    );
  }

  late final _BIO_vfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_vfree');
  late final _BIO_vfree =
      _BIO_vfreePtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_up_ref(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_up_ref(
      a,
    );
  }

  late final _BIO_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_up_ref');
  late final _BIO_up_ref =
      _BIO_up_refPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_read(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_read(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_read');
  late final _BIO_read = _BIO_readPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_read_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Size> readbytes,
  ) {
    return _BIO_read_ex(
      b,
      data,
      dlen,
      readbytes,
    );
  }

  late final _BIO_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('BIO_read_ex');
  late final _BIO_read_ex = _BIO_read_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_gets(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _BIO_gets(
      bp,
      buf,
      size,
    );
  }

  late final _BIO_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>('BIO_gets');
  late final _BIO_gets = _BIO_getsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_write(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_write(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_write');
  late final _BIO_write = _BIO_writePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_write_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Size> written,
  ) {
    return _BIO_write_ex(
      b,
      data,
      dlen,
      written,
    );
  }

  late final _BIO_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('BIO_write_ex');
  late final _BIO_write_ex = _BIO_write_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int BIO_puts(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _BIO_puts(
      bp,
      buf,
    );
  }

  late final _BIO_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_puts');
  late final _BIO_puts = _BIO_putsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_indent(
    ffi.Pointer<BIO> b,
    int indent,
    int max,
  ) {
    return _BIO_indent(
      b,
      indent,
      max,
    );
  }

  late final _BIO_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>>('BIO_indent');
  late final _BIO_indent =
      _BIO_indentPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    ffi.Pointer<ffi.Void> parg,
  ) {
    return _BIO_ctrl(
      bp,
      cmd,
      larg,
      parg,
    );
  }

  late final _BIO_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
              ffi.Pointer<ffi.Void>)>>('BIO_ctrl');
  late final _BIO_ctrl = _BIO_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_callback_ctrl(
    ffi.Pointer<BIO> b,
    int cmd,
    ffi.Pointer<BIO_info_cb> fp,
  ) {
    return _BIO_callback_ctrl(
      b,
      cmd,
      fp,
    );
  }

  late final _BIO_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<BIO_info_cb>)>>('BIO_callback_ctrl');
  late final _BIO_callback_ctrl = _BIO_callback_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<BIO_info_cb>)>();

  ffi.Pointer<ffi.Void> BIO_ptr_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
  ) {
    return _BIO_ptr_ctrl(
      bp,
      cmd,
      larg,
    );
  }

  late final _BIO_ptr_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long)>>('BIO_ptr_ctrl');
  late final _BIO_ptr_ctrl = _BIO_ptr_ctrlPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_int_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    int iarg,
  ) {
    return _BIO_int_ctrl(
      bp,
      cmd,
      larg,
      iarg,
    );
  }

  late final _BIO_int_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Int)>>('BIO_int_ctrl');
  late final _BIO_int_ctrl = _BIO_int_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, int)>();

  ffi.Pointer<BIO> BIO_push(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> append,
  ) {
    return _BIO_push(
      b,
      append,
    );
  }

  late final _BIO_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_push');
  late final _BIO_push = _BIO_pushPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_pop(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_pop(
      b,
    );
  }

  late final _BIO_popPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_pop');
  late final _BIO_pop =
      _BIO_popPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_free_all(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free_all(
      a,
    );
  }

  late final _BIO_free_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_free_all');
  late final _BIO_free_all =
      _BIO_free_allPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_find_type(
    ffi.Pointer<BIO> b,
    int bio_type,
  ) {
    return _BIO_find_type(
      b,
      bio_type,
    );
  }

  late final _BIO_find_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_find_type');
  late final _BIO_find_type = _BIO_find_typePtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_next(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_next(
      b,
    );
  }

  late final _BIO_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_next');
  late final _BIO_next =
      _BIO_nextPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_set_next(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> next,
  ) {
    return _BIO_set_next(
      b,
      next,
    );
  }

  late final _BIO_set_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_set_next');
  late final _BIO_set_next = _BIO_set_nextPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_get_retry_BIO(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Int> reason,
  ) {
    return _BIO_get_retry_BIO(
      bio,
      reason,
    );
  }

  late final _BIO_get_retry_BIOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>>('BIO_get_retry_BIO');
  late final _BIO_get_retry_BIO = _BIO_get_retry_BIOPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>();

  int BIO_get_retry_reason(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_get_retry_reason(
      bio,
    );
  }

  late final _BIO_get_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_retry_reason');
  late final _BIO_get_retry_reason =
      _BIO_get_retry_reasonPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_retry_reason(
    ffi.Pointer<BIO> bio,
    int reason,
  ) {
    return _BIO_set_retry_reason(
      bio,
      reason,
    );
  }

  late final _BIO_set_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_retry_reason');
  late final _BIO_set_retry_reason = _BIO_set_retry_reasonPtr.asFunction<
      void Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_dup_chain(
    ffi.Pointer<BIO> in1,
  ) {
    return _BIO_dup_chain(
      in1,
    );
  }

  late final _BIO_dup_chainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_dup_chain');
  late final _BIO_dup_chain = _BIO_dup_chainPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  int BIO_nread0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nread0(
      bio,
      buf,
    );
  }

  late final _BIO_nread0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nread0');
  late final _BIO_nread0 = _BIO_nread0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nread(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nread(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nread');
  late final _BIO_nread = _BIO_nreadPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_nwrite0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nwrite0(
      bio,
      buf,
    );
  }

  late final _BIO_nwrite0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nwrite0');
  late final _BIO_nwrite0 = _BIO_nwrite0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nwrite(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nwrite(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nwrite');
  late final _BIO_nwrite = _BIO_nwritePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_debug_callback(
    ffi.Pointer<BIO> bio,
    int cmd,
    ffi.Pointer<ffi.Char> argp,
    int argi,
    int argl,
    int ret,
  ) {
    return _BIO_debug_callback(
      bio,
      cmd,
      argp,
      argi,
      argl,
      ret,
    );
  }

  late final _BIO_debug_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Long, ffi.Long)>>('BIO_debug_callback');
  late final _BIO_debug_callback = _BIO_debug_callbackPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_mem() {
    return _BIO_s_mem();
  }

  late final _BIO_s_memPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_mem');
  late final _BIO_s_mem =
      _BIO_s_memPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_secmem() {
    return _BIO_s_secmem();
  }

  late final _BIO_s_secmemPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_secmem');
  late final _BIO_s_secmem =
      _BIO_s_secmemPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_mem_buf(
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _BIO_new_mem_buf(
      buf,
      len,
    );
  }

  late final _BIO_new_mem_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_new_mem_buf');
  late final _BIO_new_mem_buf = _BIO_new_mem_bufPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_socket() {
    return _BIO_s_socket();
  }

  late final _BIO_s_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_socket');
  late final _BIO_s_socket =
      _BIO_s_socketPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_connect() {
    return _BIO_s_connect();
  }

  late final _BIO_s_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_connect');
  late final _BIO_s_connect =
      _BIO_s_connectPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_accept() {
    return _BIO_s_accept();
  }

  late final _BIO_s_acceptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_accept');
  late final _BIO_s_accept =
      _BIO_s_acceptPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_fd() {
    return _BIO_s_fd();
  }

  late final _BIO_s_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_fd');
  late final _BIO_s_fd =
      _BIO_s_fdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_log() {
    return _BIO_s_log();
  }

  late final _BIO_s_logPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_log');
  late final _BIO_s_log =
      _BIO_s_logPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_bio() {
    return _BIO_s_bio();
  }

  late final _BIO_s_bioPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_bio');
  late final _BIO_s_bio =
      _BIO_s_bioPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_null() {
    return _BIO_s_null();
  }

  late final _BIO_s_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_null');
  late final _BIO_s_null =
      _BIO_s_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_null() {
    return _BIO_f_null();
  }

  late final _BIO_f_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_null');
  late final _BIO_f_null =
      _BIO_f_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_buffer() {
    return _BIO_f_buffer();
  }

  late final _BIO_f_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_buffer');
  late final _BIO_f_buffer =
      _BIO_f_bufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_linebuffer() {
    return _BIO_f_linebuffer();
  }

  late final _BIO_f_linebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_linebuffer');
  late final _BIO_f_linebuffer =
      _BIO_f_linebufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_nbio_test() {
    return _BIO_f_nbio_test();
  }

  late final _BIO_f_nbio_testPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_nbio_test');
  late final _BIO_f_nbio_test =
      _BIO_f_nbio_testPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_datagram() {
    return _BIO_s_datagram();
  }

  late final _BIO_s_datagramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_datagram');
  late final _BIO_s_datagram =
      _BIO_s_datagramPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  int BIO_dgram_non_fatal_error(
    int error,
  ) {
    return _BIO_dgram_non_fatal_error(
      error,
    );
  }

  late final _BIO_dgram_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_dgram_non_fatal_error');
  late final _BIO_dgram_non_fatal_error =
      _BIO_dgram_non_fatal_errorPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_dgram(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_dgram(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_dgramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_dgram');
  late final _BIO_new_dgram =
      _BIO_new_dgramPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_sock_should_retry(
    int i,
  ) {
    return _BIO_sock_should_retry(
      i,
    );
  }

  late final _BIO_sock_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_should_retry');
  late final _BIO_sock_should_retry =
      _BIO_sock_should_retryPtr.asFunction<int Function(int)>();

  int BIO_sock_non_fatal_error(
    int error,
  ) {
    return _BIO_sock_non_fatal_error(
      error,
    );
  }

  late final _BIO_sock_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_non_fatal_error');
  late final _BIO_sock_non_fatal_error =
      _BIO_sock_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_fd_should_retry(
    int i,
  ) {
    return _BIO_fd_should_retry(
      i,
    );
  }

  late final _BIO_fd_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_should_retry');
  late final _BIO_fd_should_retry =
      _BIO_fd_should_retryPtr.asFunction<int Function(int)>();

  int BIO_fd_non_fatal_error(
    int error,
  ) {
    return _BIO_fd_non_fatal_error(
      error,
    );
  }

  late final _BIO_fd_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_non_fatal_error');
  late final _BIO_fd_non_fatal_error =
      _BIO_fd_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_dump_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                    ffi.Pointer<ffi.Void> u)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Char> s,
    int len,
  ) {
    return _BIO_dump_cb(
      cb,
      u,
      s,
      len,
    );
  }

  late final _BIO_dump_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                          ffi.Pointer<ffi.Void> u)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('BIO_dump_cb');
  late final _BIO_dump_cb = _BIO_dump_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                      ffi.Pointer<ffi.Void> u)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int BIO_dump_indent_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                    ffi.Pointer<ffi.Void> u)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Char> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_cb(
      cb,
      u,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                          ffi.Pointer<ffi.Void> u)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('BIO_dump_indent_cb');
  late final _BIO_dump_indent_cb = _BIO_dump_indent_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> data, ffi.Size len,
                      ffi.Pointer<ffi.Void> u)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int,
          int)>();

  int BIO_dump(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> bytes,
    int len,
  ) {
    return _BIO_dump(
      b,
      bytes,
      len,
    );
  }

  late final _BIO_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>('BIO_dump');
  late final _BIO_dump = _BIO_dumpPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_dump_indent(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> bytes,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent(
      b,
      bytes,
      len,
      indent,
    );
  }

  late final _BIO_dump_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent');
  late final _BIO_dump_indent = _BIO_dump_indentPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int, int)>();

  int BIO_dump_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Char> s,
    int len,
  ) {
    return _BIO_dump_fp(
      fp,
      s,
      len,
    );
  }

  late final _BIO_dump_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('BIO_dump_fp');
  late final _BIO_dump_fp = _BIO_dump_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_dump_indent_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Char> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_fp(
      fp,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent_fp');
  late final _BIO_dump_indent_fp = _BIO_dump_indent_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int BIO_hex_string(
    ffi.Pointer<BIO> out,
    int indent,
    int width,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _BIO_hex_string(
      out,
      indent,
      width,
      data,
      datalen,
    );
  }

  late final _BIO_hex_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('BIO_hex_string');
  late final _BIO_hex_string = _BIO_hex_stringPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDR_new() {
    return _BIO_ADDR_new();
  }

  late final _BIO_ADDR_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_ADDR> Function()>>(
          'BIO_ADDR_new');
  late final _BIO_ADDR_new =
      _BIO_ADDR_newPtr.asFunction<ffi.Pointer<BIO_ADDR> Function()>();

  int BIO_ADDR_rawmake(
    ffi.Pointer<BIO_ADDR> ap,
    int family,
    ffi.Pointer<ffi.Void> where,
    int wherelen,
    int port,
  ) {
    return _BIO_ADDR_rawmake(
      ap,
      family,
      where,
      wherelen,
      port,
    );
  }

  late final _BIO_ADDR_rawmakePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_ADDR>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedShort)>>('BIO_ADDR_rawmake');
  late final _BIO_ADDR_rawmake = _BIO_ADDR_rawmakePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_ADDR>, int, ffi.Pointer<ffi.Void>, int, int)>();

  void BIO_ADDR_free(
    ffi.Pointer<BIO_ADDR> arg0,
  ) {
    return _BIO_ADDR_free(
      arg0,
    );
  }

  late final _BIO_ADDR_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_free');
  late final _BIO_ADDR_free =
      _BIO_ADDR_freePtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  void BIO_ADDR_clear(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_clear(
      ap,
    );
  }

  late final _BIO_ADDR_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_clear');
  late final _BIO_ADDR_clear =
      _BIO_ADDR_clearPtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_family(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_family(
      ap,
    );
  }

  late final _BIO_ADDR_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_family');
  late final _BIO_ADDR_family =
      _BIO_ADDR_familyPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_rawaddress(
    ffi.Pointer<BIO_ADDR> ap,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Size> l,
  ) {
    return _BIO_ADDR_rawaddress(
      ap,
      p,
      l,
    );
  }

  late final _BIO_ADDR_rawaddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('BIO_ADDR_rawaddress');
  late final _BIO_ADDR_rawaddress = _BIO_ADDR_rawaddressPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int BIO_ADDR_rawport(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_rawport(
      ap,
    );
  }

  late final _BIO_ADDR_rawportPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_rawport');
  late final _BIO_ADDR_rawport =
      _BIO_ADDR_rawportPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_hostname_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_hostname_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_hostname_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_hostname_string');
  late final _BIO_ADDR_hostname_string = _BIO_ADDR_hostname_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_service_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_service_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_service_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_service_string');
  late final _BIO_ADDR_service_string = _BIO_ADDR_service_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_path_string(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_path_string(
      ap,
    );
  }

  late final _BIO_ADDR_path_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_path_string');
  late final _BIO_ADDR_path_string = _BIO_ADDR_path_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<BIO_ADDRINFO> BIO_ADDRINFO_next(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_next(
      bai,
    );
  }

  late final _BIO_ADDRINFO_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDRINFO> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_next');
  late final _BIO_ADDRINFO_next = _BIO_ADDRINFO_nextPtr.asFunction<
      ffi.Pointer<BIO_ADDRINFO> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_family(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_family(
      bai,
    );
  }

  late final _BIO_ADDRINFO_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_family');
  late final _BIO_ADDRINFO_family = _BIO_ADDRINFO_familyPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_socktype(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_socktype(
      bai,
    );
  }

  late final _BIO_ADDRINFO_socktypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_socktype');
  late final _BIO_ADDRINFO_socktype = _BIO_ADDRINFO_socktypePtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_protocol(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_protocol(
      bai,
    );
  }

  late final _BIO_ADDRINFO_protocolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_protocol');
  late final _BIO_ADDRINFO_protocol = _BIO_ADDRINFO_protocolPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDRINFO_address(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_address(
      bai,
    );
  }

  late final _BIO_ADDRINFO_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDR> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_address');
  late final _BIO_ADDRINFO_address = _BIO_ADDRINFO_addressPtr.asFunction<
      ffi.Pointer<BIO_ADDR> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  void BIO_ADDRINFO_free(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_free(
      bai,
    );
  }

  late final _BIO_ADDRINFO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_free');
  late final _BIO_ADDRINFO_free = _BIO_ADDRINFO_freePtr.asFunction<
      void Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_parse_hostserv(
    ffi.Pointer<ffi.Char> hostserv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<ffi.Pointer<ffi.Char>> service,
    int hostserv_prio,
  ) {
    return _BIO_parse_hostserv(
      hostserv,
      host,
      service,
      hostserv_prio,
    );
  }

  late final _BIO_parse_hostservPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32)>>('BIO_parse_hostserv');
  late final _BIO_parse_hostserv = _BIO_parse_hostservPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_lookup(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    int lookup_type,
    int family,
    int socktype,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup(
      host,
      service,
      lookup_type,
      family,
      socktype,
      res,
    );
  }

  late final _BIO_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup');
  late final _BIO_lookup = _BIO_lookupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_lookup_ex(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    int lookup_type,
    int family,
    int socktype,
    int protocol,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup_ex(
      host,
      service,
      lookup_type,
      family,
      socktype,
      protocol,
      res,
    );
  }

  late final _BIO_lookup_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup_ex');
  late final _BIO_lookup_ex = _BIO_lookup_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          int, ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_sock_error(
    int sock,
  ) {
    return _BIO_sock_error(
      sock,
    );
  }

  late final _BIO_sock_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_sock_error');
  late final _BIO_sock_error =
      _BIO_sock_errorPtr.asFunction<int Function(int)>();

  int BIO_socket_ioctl(
    int fd,
    int type,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _BIO_socket_ioctl(
      fd,
      type,
      arg,
    );
  }

  late final _BIO_socket_ioctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>('BIO_socket_ioctl');
  late final _BIO_socket_ioctl = _BIO_socket_ioctlPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_socket_nbio(
    int fd,
    int mode,
  ) {
    return _BIO_socket_nbio(
      fd,
      mode,
    );
  }

  late final _BIO_socket_nbioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_socket_nbio');
  late final _BIO_socket_nbio =
      _BIO_socket_nbioPtr.asFunction<int Function(int, int)>();

  int BIO_sock_init() {
    return _BIO_sock_init();
  }

  late final _BIO_sock_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_sock_init');
  late final _BIO_sock_init = _BIO_sock_initPtr.asFunction<int Function()>();

  int BIO_set_tcp_ndelay(
    int sock,
    int turn_on,
  ) {
    return _BIO_set_tcp_ndelay(
      sock,
      turn_on,
    );
  }

  late final _BIO_set_tcp_ndelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_set_tcp_ndelay');
  late final _BIO_set_tcp_ndelay =
      _BIO_set_tcp_ndelayPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<hostent> BIO_gethostbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_gethostbyname(
      name,
    );
  }

  late final _BIO_gethostbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>)>>('BIO_gethostbyname');
  late final _BIO_gethostbyname = _BIO_gethostbynamePtr.asFunction<
      ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>)>();

  int BIO_get_port(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedShort> port_ptr,
  ) {
    return _BIO_get_port(
      str,
      port_ptr,
    );
  }

  late final _BIO_get_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedShort>)>>('BIO_get_port');
  late final _BIO_get_port = _BIO_get_portPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedShort>)>();

  int BIO_get_host_ip(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedChar> ip,
  ) {
    return _BIO_get_host_ip(
      str,
      ip,
    );
  }

  late final _BIO_get_host_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BIO_get_host_ip');
  late final _BIO_get_host_ip = _BIO_get_host_ipPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BIO_get_accept_socket(
    ffi.Pointer<ffi.Char> host_port,
    int mode,
  ) {
    return _BIO_get_accept_socket(
      host_port,
      mode,
    );
  }

  late final _BIO_get_accept_socketPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'BIO_get_accept_socket');
  late final _BIO_get_accept_socket = _BIO_get_accept_socketPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int BIO_accept(
    int sock,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ip_port,
  ) {
    return _BIO_accept(
      sock,
      ip_port,
    );
  }

  late final _BIO_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_accept');
  late final _BIO_accept = _BIO_acceptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_sock_info(
    int sock,
    int type,
    ffi.Pointer<BIO_sock_info_u> info,
  ) {
    return _BIO_sock_info(
      sock,
      type,
      info,
    );
  }

  late final _BIO_sock_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int32,
              ffi.Pointer<BIO_sock_info_u>)>>('BIO_sock_info');
  late final _BIO_sock_info = _BIO_sock_infoPtr.asFunction<
      int Function(int, int, ffi.Pointer<BIO_sock_info_u>)>();

  int BIO_socket(
    int domain,
    int socktype,
    int protocol,
    int options,
  ) {
    return _BIO_socket(
      domain,
      socktype,
      protocol,
      options,
    );
  }

  late final _BIO_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BIO_socket');
  late final _BIO_socket =
      _BIO_socketPtr.asFunction<int Function(int, int, int, int)>();

  int BIO_connect(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_connect(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_connect');
  late final _BIO_connect = _BIO_connectPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_bind(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_bind(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_bind');
  late final _BIO_bind =
      _BIO_bindPtr.asFunction<int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_listen(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_listen(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_listen');
  late final _BIO_listen = _BIO_listenPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_accept_ex(
    int accept_sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_accept_ex(
      accept_sock,
      addr,
      options,
    );
  }

  late final _BIO_accept_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_accept_ex');
  late final _BIO_accept_ex = _BIO_accept_exPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_closesocket(
    int sock,
  ) {
    return _BIO_closesocket(
      sock,
    );
  }

  late final _BIO_closesocketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_closesocket');
  late final _BIO_closesocket =
      _BIO_closesocketPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_socket(
    int sock,
    int close_flag,
  ) {
    return _BIO_new_socket(
      sock,
      close_flag,
    );
  }

  late final _BIO_new_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_socket');
  late final _BIO_new_socket =
      _BIO_new_socketPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  ffi.Pointer<BIO> BIO_new_connect(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_connect(
      host_port,
    );
  }

  late final _BIO_new_connectPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_connect');
  late final _BIO_new_connect = _BIO_new_connectPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_accept(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_accept(
      host_port,
    );
  }

  late final _BIO_new_acceptPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_accept');
  late final _BIO_new_accept = _BIO_new_acceptPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_fd(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_fd(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_fd');
  late final _BIO_new_fd =
      _BIO_new_fdPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_new_bio_pair(
    ffi.Pointer<ffi.Pointer<BIO>> bio1,
    int writebuf1,
    ffi.Pointer<ffi.Pointer<BIO>> bio2,
    int writebuf2,
  ) {
    return _BIO_new_bio_pair(
      bio1,
      writebuf1,
      bio2,
      writebuf2,
    );
  }

  late final _BIO_new_bio_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIO>>, ffi.Size,
              ffi.Pointer<ffi.Pointer<BIO>>, ffi.Size)>>('BIO_new_bio_pair');
  late final _BIO_new_bio_pair = _BIO_new_bio_pairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIO>>, int,
          ffi.Pointer<ffi.Pointer<BIO>>, int)>();

  void BIO_copy_next_retry(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_copy_next_retry(
      b,
    );
  }

  late final _BIO_copy_next_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_copy_next_retry');
  late final _BIO_copy_next_retry =
      _BIO_copy_next_retryPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_printf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_printf(
      bio,
      format,
    );
  }

  late final _BIO_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_printf');
  late final _BIO_printf = _BIO_printfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_vprintf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _BIO_vprintf(
      bio,
      format,
      args,
    );
  }

  late final _BIO_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('BIO_vprintf');
  late final _BIO_vprintf = _BIO_vprintfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int BIO_snprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_snprintf(
      buf,
      n,
      format,
    );
  }

  late final _BIO_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('BIO_snprintf');
  late final _BIO_snprintf = _BIO_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int BIO_vsnprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _BIO_vsnprintf(
      buf,
      n,
      format,
      args,
    );
  }

  late final _BIO_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('BIO_vsnprintf');
  late final _BIO_vsnprintf = _BIO_vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<BIO_METHOD> BIO_meth_new(
    int type,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_meth_new(
      type,
      name,
    );
  }

  late final _BIO_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_METHOD> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('BIO_meth_new');
  late final _BIO_meth_new = _BIO_meth_newPtr.asFunction<
      ffi.Pointer<BIO_METHOD> Function(int, ffi.Pointer<ffi.Char>)>();

  void BIO_meth_free(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_free(
      biom,
    );
  }

  late final _BIO_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_METHOD>)>>(
          'BIO_meth_free');
  late final _BIO_meth_free =
      _BIO_meth_freePtr.asFunction<void Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_write(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write(
      biom,
    );
  }

  late final _BIO_meth_get_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write');
  late final _BIO_meth_get_write = _BIO_meth_get_writePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write_ex(
      biom,
    );
  }

  late final _BIO_meth_get_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Size, ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write_ex');
  late final _BIO_meth_get_write_ex = _BIO_meth_get_write_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_write(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        write,
  ) {
    return _BIO_meth_set_write(
      biom,
      write,
    );
  }

  late final _BIO_meth_set_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_write');
  late final _BIO_meth_set_write = _BIO_meth_set_writePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Size>)>>
        bwrite,
  ) {
    return _BIO_meth_set_write_ex(
      biom,
      bwrite,
    );
  }

  late final _BIO_meth_set_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_write_ex');
  late final _BIO_meth_set_write_ex = _BIO_meth_set_write_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_read(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read(
      biom,
    );
  }

  late final _BIO_meth_get_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read');
  late final _BIO_meth_get_read = _BIO_meth_get_readPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Size>)>> BIO_meth_get_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read_ex(
      biom,
    );
  }

  late final _BIO_meth_get_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Size, ffi.Pointer<ffi.Size>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read_ex');
  late final _BIO_meth_get_read_ex = _BIO_meth_get_read_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_read(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        read,
  ) {
    return _BIO_meth_set_read(
      biom,
      read,
    );
  }

  late final _BIO_meth_set_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_read');
  late final _BIO_meth_set_read = _BIO_meth_set_readPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Size, ffi.Pointer<ffi.Size>)>>
        bread,
  ) {
    return _BIO_meth_set_read_ex(
      biom,
      bread,
    );
  }

  late final _BIO_meth_set_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Size,
                          ffi.Pointer<ffi.Size>)>>)>>('BIO_meth_set_read_ex');
  late final _BIO_meth_set_read_ex = _BIO_meth_set_read_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Size, ffi.Pointer<ffi.Size>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
      BIO_meth_get_puts(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_puts(
      biom,
    );
  }

  late final _BIO_meth_get_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_puts');
  late final _BIO_meth_get_puts = _BIO_meth_get_putsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_puts(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
        puts,
  ) {
    return _BIO_meth_set_puts(
      biom,
      puts,
    );
  }

  late final _BIO_meth_set_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>)>>)>>('BIO_meth_set_puts');
  late final _BIO_meth_set_puts = _BIO_meth_set_putsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_gets(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_gets(
      biom,
    );
  }

  late final _BIO_meth_get_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_gets');
  late final _BIO_meth_get_gets = _BIO_meth_get_getsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_gets(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        gets,
  ) {
    return _BIO_meth_set_gets(
      biom,
      gets,
    );
  }

  late final _BIO_meth_set_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_gets');
  late final _BIO_meth_set_gets = _BIO_meth_set_getsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>
      BIO_meth_get_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_ctrl');
  late final _BIO_meth_get_ctrl = _BIO_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _BIO_meth_set_ctrl(
      biom,
      ctrl,
    );
  }

  late final _BIO_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>)>>('BIO_meth_set_ctrl');
  late final _BIO_meth_set_ctrl = _BIO_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_create(
    ffi.Pointer<BIO_METHOD> bion,
  ) {
    return _BIO_meth_get_create(
      bion,
    );
  }

  late final _BIO_meth_get_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_create');
  late final _BIO_meth_get_create = _BIO_meth_get_createPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_create(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> create,
  ) {
    return _BIO_meth_set_create(
      biom,
      create,
    );
  }

  late final _BIO_meth_set_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>)>>)>>('BIO_meth_set_create');
  late final _BIO_meth_set_create = _BIO_meth_set_createPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_destroy(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_destroy(
      biom,
    );
  }

  late final _BIO_meth_get_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_destroy');
  late final _BIO_meth_get_destroy = _BIO_meth_get_destroyPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_destroy(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> destroy,
  ) {
    return _BIO_meth_set_destroy(
      biom,
      destroy,
    );
  }

  late final _BIO_meth_set_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>)>>)>>('BIO_meth_set_destroy');
  late final _BIO_meth_set_destroy = _BIO_meth_set_destroyPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
      BIO_meth_get_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_callback_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_callback_ctrl');
  late final _BIO_meth_get_callback_ctrl =
      _BIO_meth_get_callback_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(
                    ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
        callback_ctrl,
  ) {
    return _BIO_meth_set_callback_ctrl(
      biom,
      callback_ctrl,
    );
  }

  late final _BIO_meth_set_callback_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                              ffi.Pointer<BIO_info_cb>)>>)>>(
      'BIO_meth_set_callback_ctrl');
  late final _BIO_meth_set_callback_ctrl =
      _BIO_meth_set_callback_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                          ffi.Pointer<BIO_info_cb>)>>)>();

  int ERR_load_EVP_strings() {
    return _ERR_load_EVP_strings();
  }

  late final _ERR_load_EVP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EVP_strings');
  late final _ERR_load_EVP_strings =
      _ERR_load_EVP_stringsPtr.asFunction<int Function()>();

  int ERR_load_ASN1_strings() {
    return _ERR_load_ASN1_strings();
  }

  late final _ERR_load_ASN1_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASN1_strings');
  late final _ERR_load_ASN1_strings =
      _ERR_load_ASN1_stringsPtr.asFunction<int Function()>();

  int ERR_load_BN_strings() {
    return _ERR_load_BN_strings();
  }

  late final _ERR_load_BN_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BN_strings');
  late final _ERR_load_BN_strings =
      _ERR_load_BN_stringsPtr.asFunction<int Function()>();

  void BN_set_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_flags(
      b,
      n,
    );
  }

  late final _BN_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_flags');
  late final _BN_set_flags =
      _BN_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_get_flags(
      b,
      n,
    );
  }

  late final _BN_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_get_flags');
  late final _BN_get_flags =
      _BN_get_flagsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  void BN_with_flags(
    ffi.Pointer<BIGNUM> dest,
    ffi.Pointer<BIGNUM> b,
    int flags,
  ) {
    return _BN_with_flags(
      dest,
      b,
      flags,
    );
  }

  late final _BN_with_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Int)>>('BN_with_flags');
  late final _BN_with_flags = _BN_with_flagsPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_GENCB_call(
    ffi.Pointer<BN_GENCB> cb,
    int a,
    int b,
  ) {
    return _BN_GENCB_call(
      cb,
      a,
      b,
    );
  }

  late final _BN_GENCB_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BN_GENCB>, ffi.Int, ffi.Int)>>('BN_GENCB_call');
  late final _BN_GENCB_call = _BN_GENCB_callPtr.asFunction<
      int Function(ffi.Pointer<BN_GENCB>, int, int)>();

  ffi.Pointer<BN_GENCB> BN_GENCB_new() {
    return _BN_GENCB_new();
  }

  late final _BN_GENCB_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_GENCB> Function()>>(
          'BN_GENCB_new');
  late final _BN_GENCB_new =
      _BN_GENCB_newPtr.asFunction<ffi.Pointer<BN_GENCB> Function()>();

  void BN_GENCB_free(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_free(
      cb,
    );
  }

  late final _BN_GENCB_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_GENCB>)>>(
          'BN_GENCB_free');
  late final _BN_GENCB_free =
      _BN_GENCB_freePtr.asFunction<void Function(ffi.Pointer<BN_GENCB>)>();

  void BN_GENCB_set_old(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set_old(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_set_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set_old');
  late final _BN_GENCB_set_old = _BN_GENCB_set_oldPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void BN_GENCB_set(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set');
  late final _BN_GENCB_set = _BN_GENCB_setPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BN_GENCB_get_arg(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_get_arg(
      cb,
    );
  }

  late final _BN_GENCB_get_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BN_GENCB>)>>('BN_GENCB_get_arg');
  late final _BN_GENCB_get_arg = _BN_GENCB_get_argPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)>();

  int BN_abs_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_abs_is_word(
      a,
      w,
    );
  }

  late final _BN_abs_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_abs_is_word');
  late final _BN_abs_is_word =
      _BN_abs_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_zero(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_zero(
      a,
    );
  }

  late final _BN_is_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_zero');
  late final _BN_is_zero =
      _BN_is_zeroPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_one(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_one(
      a,
    );
  }

  late final _BN_is_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_one');
  late final _BN_is_one =
      _BN_is_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_is_word(
      a,
      w,
    );
  }

  late final _BN_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_is_word');
  late final _BN_is_word =
      _BN_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_odd(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_odd(
      a,
    );
  }

  late final _BN_is_oddPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_odd');
  late final _BN_is_odd =
      _BN_is_oddPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  void BN_zero_ex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_zero_ex(
      a,
    );
  }

  late final _BN_zero_exPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_zero_ex');
  late final _BN_zero_ex =
      _BN_zero_exPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_value_one() {
    return _BN_value_one();
  }

  late final _BN_value_onePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_value_one');
  late final _BN_value_one =
      _BN_value_onePtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<ffi.Char> BN_options() {
    return _BN_options();
  }

  late final _BN_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'BN_options');
  late final _BN_options =
      _BN_optionsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_new() {
    return _BN_CTX_new();
  }

  late final _BN_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>('BN_CTX_new');
  late final _BN_CTX_new =
      _BN_CTX_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new() {
    return _BN_CTX_secure_new();
  }

  late final _BN_CTX_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>(
          'BN_CTX_secure_new');
  late final _BN_CTX_secure_new =
      _BN_CTX_secure_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  void BN_CTX_free(
    ffi.Pointer<BN_CTX> c,
  ) {
    return _BN_CTX_free(
      c,
    );
  }

  late final _BN_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_free');
  late final _BN_CTX_free =
      _BN_CTX_freePtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_start(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_start(
      ctx,
    );
  }

  late final _BN_CTX_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_start');
  late final _BN_CTX_start =
      _BN_CTX_startPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_CTX_get(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_get(
      ctx,
    );
  }

  late final _BN_CTX_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>>('BN_CTX_get');
  late final _BN_CTX_get = _BN_CTX_getPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_end(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_end(
      ctx,
    );
  }

  late final _BN_CTX_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_end');
  late final _BN_CTX_end =
      _BN_CTX_endPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  int BN_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_rand');
  late final _BN_rand = _BN_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_priv_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_priv_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_priv_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_priv_rand');
  late final _BN_priv_rand = _BN_priv_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rand_range');
  late final _BN_rand_range = _BN_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_priv_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_priv_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_priv_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_priv_rand_range');
  late final _BN_priv_rand_range = _BN_priv_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_pseudo_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_pseudo_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_pseudo_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_pseudo_rand');
  late final _BN_pseudo_rand = _BN_pseudo_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_pseudo_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_pseudo_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_pseudo_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_pseudo_rand_range');
  late final _BN_pseudo_rand_range = _BN_pseudo_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_num_bits(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_num_bits(
      a,
    );
  }

  late final _BN_num_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_num_bits');
  late final _BN_num_bits =
      _BN_num_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_num_bits_word(
    int l,
  ) {
    return _BN_num_bits_word(
      l,
    );
  }

  late final _BN_num_bits_wordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong)>>(
          'BN_num_bits_word');
  late final _BN_num_bits_word =
      _BN_num_bits_wordPtr.asFunction<int Function(int)>();

  int BN_security_bits(
    int L,
    int N,
  ) {
    return _BN_security_bits(
      L,
      N,
    );
  }

  late final _BN_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BN_security_bits');
  late final _BN_security_bits =
      _BN_security_bitsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<BIGNUM> BN_new() {
    return _BN_new();
  }

  late final _BN_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>('BN_new');
  late final _BN_new = _BN_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_secure_new() {
    return _BN_secure_new();
  }

  late final _BN_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_secure_new');
  late final _BN_secure_new =
      _BN_secure_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  void BN_clear_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear_free(
      a,
    );
  }

  late final _BN_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear_free');
  late final _BN_clear_free =
      _BN_clear_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_copy(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_copy(
      a,
      b,
    );
  }

  late final _BN_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_copy');
  late final _BN_copy = _BN_copyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_swap(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_swap(
      a,
      b,
    );
  }

  late final _BN_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_swap');
  late final _BN_swap = _BN_swapPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_bin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_bin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_bin2bn');
  late final _BN_bin2bn = _BN_bin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2bin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2bin(
      a,
      to,
    );
  }

  late final _BN_bn2binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2bin');
  late final _BN_bn2bin = _BN_bn2binPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_bn2binpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2binpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2binpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2binpad');
  late final _BN_bn2binpad = _BN_bn2binpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_lebin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_lebin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_lebin2bn');
  late final _BN_lebin2bn = _BN_lebin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2lebinpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2lebinpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2lebinpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2lebinpad');
  late final _BN_bn2lebinpad = _BN_bn2lebinpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_mpi2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_mpi2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_mpi2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mpi2bn');
  late final _BN_mpi2bn = _BN_mpi2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2mpi(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2mpi(
      a,
      to,
    );
  }

  late final _BN_bn2mpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2mpi');
  late final _BN_bn2mpi = _BN_bn2mpiPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_sub(
      r,
      a,
      b,
    );
  }

  late final _BN_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_sub');
  late final _BN_sub = _BN_subPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_usub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_usub(
      r,
      a,
      b,
    );
  }

  late final _BN_usubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_usub');
  late final _BN_usub = _BN_usubPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_uadd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_uadd(
      r,
      a,
      b,
    );
  }

  late final _BN_uaddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_uadd');
  late final _BN_uadd = _BN_uaddPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_add(
      r,
      a,
      b,
    );
  }

  late final _BN_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_add');
  late final _BN_add = _BN_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mul(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mul');
  late final _BN_mul = _BN_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqr(
      r,
      a,
      ctx,
    );
  }

  late final _BN_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_sqr');
  late final _BN_sqr = _BN_sqrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  void BN_set_negative(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_negative(
      b,
      n,
    );
  }

  late final _BN_set_negativePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_negative');
  late final _BN_set_negative =
      _BN_set_negativePtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_negative(
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_is_negative(
      b,
    );
  }

  late final _BN_is_negativePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_negative');
  late final _BN_is_negative =
      _BN_is_negativePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_div(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div(
      dv,
      rem,
      m,
      d,
      ctx,
    );
  }

  late final _BN_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_div');
  late final _BN_div = _BN_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nnmod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nnmod(
      r,
      m,
      d,
      ctx,
    );
  }

  late final _BN_nnmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nnmod');
  late final _BN_nnmod = _BN_nnmodPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_add(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_add');
  late final _BN_mod_add = _BN_mod_addPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_add_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_add_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_add_quick');
  late final _BN_mod_add_quick = _BN_mod_add_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sub(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_sub');
  late final _BN_mod_sub = _BN_mod_subPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sub_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_sub_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_sub_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_sub_quick');
  late final _BN_mod_sub_quick = _BN_mod_sub_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul');
  late final _BN_mod_mul = _BN_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqr(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqr');
  late final _BN_mod_sqr = _BN_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift1(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift1');
  late final _BN_mod_lshift1 = _BN_mod_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift1_quick(
      r,
      a,
      m,
    );
  }

  late final _BN_mod_lshift1_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift1_quick');
  late final _BN_mod_lshift1_quick = _BN_mod_lshift1_quickPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift(
      r,
      a,
      n,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift');
  late final _BN_mod_lshift = _BN_mod_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift_quick(
      r,
      a,
      n,
      m,
    );
  }

  late final _BN_mod_lshift_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift_quick');
  late final _BN_mod_lshift_quick = _BN_mod_lshift_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>)>();

  int BN_mod_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mod_word(
      a,
      w,
    );
  }

  late final _BN_mod_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mod_word');
  late final _BN_mod_word =
      _BN_mod_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_div_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_div_word(
      a,
      w,
    );
  }

  late final _BN_div_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_div_word');
  late final _BN_div_word =
      _BN_div_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mul_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mul_word(
      a,
      w,
    );
  }

  late final _BN_mul_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mul_word');
  late final _BN_mul_word =
      _BN_mul_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_add_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_add_word(
      a,
      w,
    );
  }

  late final _BN_add_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_add_word');
  late final _BN_add_word =
      _BN_add_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sub_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_sub_word(
      a,
      w,
    );
  }

  late final _BN_sub_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_sub_word');
  late final _BN_sub_word =
      _BN_sub_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_set_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_set_word(
      a,
      w,
    );
  }

  late final _BN_set_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_set_word');
  late final _BN_set_word =
      _BN_set_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_word(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_get_word(
      a,
    );
  }

  late final _BN_get_wordPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_word');
  late final _BN_get_word =
      _BN_get_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_cmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_cmp(
      a,
      b,
    );
  }

  late final _BN_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_cmp');
  late final _BN_cmp = _BN_cmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_free(
      a,
    );
  }

  late final _BN_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_free');
  late final _BN_free =
      _BN_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_bit_set(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_is_bit_set(
      a,
      n,
    );
  }

  late final _BN_is_bit_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_is_bit_set');
  late final _BN_is_bit_set =
      _BN_is_bit_setPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_lshift(
      r,
      a,
      n,
    );
  }

  late final _BN_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_lshift');
  late final _BN_lshift = _BN_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_lshift1(
      r,
      a,
    );
  }

  late final _BN_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_lshift1');
  late final _BN_lshift1 = _BN_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_exp(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_exp');
  late final _BN_exp = _BN_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp');
  late final _BN_mod_exp = _BN_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont');
  late final _BN_mod_exp_mont = _BN_mod_exp_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_consttime(
    ffi.Pointer<BIGNUM> rr,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> in_mont,
  ) {
    return _BN_mod_exp_mont_consttime(
      rr,
      a,
      p,
      m,
      ctx,
      in_mont,
    );
  }

  late final _BN_mod_exp_mont_consttimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_consttime');
  late final _BN_mod_exp_mont_consttime =
      _BN_mod_exp_mont_consttimePtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_word(
    ffi.Pointer<BIGNUM> r,
    int a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont_word(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_mont_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.UnsignedLong,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_word');
  late final _BN_mod_exp_mont_word = _BN_mod_exp_mont_wordPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp2_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp2_mont(
      r,
      a1,
      p1,
      a2,
      p2,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp2_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp2_mont');
  late final _BN_mod_exp2_mont = _BN_mod_exp2_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_simple(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_simple(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_simple');
  late final _BN_mod_exp_simple = _BN_mod_exp_simplePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mask_bits(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_mask_bits(
      a,
      n,
    );
  }

  late final _BN_mask_bitsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_mask_bits');
  late final _BN_mask_bits =
      _BN_mask_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print_fp(
      fp,
      a,
    );
  }

  late final _BN_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>>('BN_print_fp');
  late final _BN_print_fp = _BN_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>();

  int BN_print(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print(
      bio,
      a,
    );
  }

  late final _BN_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>>('BN_print');
  late final _BN_print = _BN_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>();

  int BN_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_reciprocal(
      r,
      m,
      len,
      ctx,
    );
  }

  late final _BN_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_reciprocal');
  late final _BN_reciprocal = _BN_reciprocalPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_rshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_rshift(
      r,
      a,
      n,
    );
  }

  late final _BN_rshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_rshift');
  late final _BN_rshift = _BN_rshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_rshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_rshift1(
      r,
      a,
    );
  }

  late final _BN_rshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rshift1');
  late final _BN_rshift1 = _BN_rshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_clear(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear(
      a,
    );
  }

  late final _BN_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear');
  late final _BN_clear =
      _BN_clearPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_dup(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_dup(
      a,
    );
  }

  late final _BN_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>('BN_dup');
  late final _BN_dup = _BN_dupPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_ucmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_ucmp(
      a,
      b,
    );
  }

  late final _BN_ucmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_ucmp');
  late final _BN_ucmp = _BN_ucmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_set_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_set_bit(
      a,
      n,
    );
  }

  late final _BN_set_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_bit');
  late final _BN_set_bit =
      _BN_set_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_clear_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_clear_bit(
      a,
      n,
    );
  }

  late final _BN_clear_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_clear_bit');
  late final _BN_clear_bit =
      _BN_clear_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<ffi.Char> BN_bn2hex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2hex(
      a,
    );
  }

  late final _BN_bn2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2hex');
  late final _BN_bn2hex = _BN_bn2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<ffi.Char> BN_bn2dec(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2dec(
      a,
    );
  }

  late final _BN_bn2decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2dec');
  late final _BN_bn2dec = _BN_bn2decPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  int BN_hex2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_hex2bn(
      a,
      str,
    );
  }

  late final _BN_hex2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_hex2bn');
  late final _BN_hex2bn = _BN_hex2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_dec2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_dec2bn(
      a,
      str,
    );
  }

  late final _BN_dec2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_dec2bn');
  late final _BN_dec2bn = _BN_dec2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_asc2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_asc2bn(
      a,
      str,
    );
  }

  late final _BN_asc2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_asc2bn');
  late final _BN_asc2bn = _BN_asc2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_gcd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_gcd(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_gcdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_gcd');
  late final _BN_gcd = _BN_gcdPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_kronecker(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_kronecker(
      a,
      b,
      ctx,
    );
  }

  late final _BN_kroneckerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_kronecker');
  late final _BN_kronecker = _BN_kroneckerPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_inverse(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_inverse');
  late final _BN_mod_inverse = _BN_mod_inversePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_sqrt(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqrt(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqrt');
  late final _BN_mod_sqrt = _BN_mod_sqrtPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  void BN_consttime_swap(
    int swap,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    int nwords,
  ) {
    return _BN_consttime_swap(
      swap,
      a,
      b,
      nwords,
    );
  }

  late final _BN_consttime_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedLong, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_consttime_swap');
  late final _BN_consttime_swap = _BN_consttime_swapPtr.asFunction<
      void Function(int, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<BIGNUM> BN_generate_prime(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_generate_prime(
      ret,
      bits,
      safe,
      add,
      rem,
      callback,
      cb_arg,
    );
  }

  late final _BN_generate_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_generate_prime');
  late final _BN_generate_prime = _BN_generate_primePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_is_prime(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
    );
  }

  late final _BN_is_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>)>>('BN_is_prime');
  late final _BN_is_prime = _BN_is_primePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime_fasttest(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
    int do_trial_division,
  ) {
    return _BN_is_prime_fasttest(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
      do_trial_division,
    );
  }

  late final _BN_is_prime_fasttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('BN_is_prime_fasttest');
  late final _BN_is_prime_fasttest = _BN_is_prime_fasttestPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>,
          int)>();

  int BN_generate_prime_ex(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_generate_prime_ex(
      ret,
      bits,
      safe,
      add,
      rem,
      cb,
    );
  }

  late final _BN_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('BN_generate_prime_ex');
  late final _BN_generate_prime_ex = _BN_generate_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>();

  int BN_is_prime_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_ex(
      p,
      nchecks,
      ctx,
      cb,
    );
  }

  late final _BN_is_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_is_prime_ex');
  late final _BN_is_prime_ex = _BN_is_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_is_prime_fasttest_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    int do_trial_division,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_fasttest_ex(
      p,
      nchecks,
      ctx,
      do_trial_division,
      cb,
    );
  }

  late final _BN_is_prime_fasttest_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Int, ffi.Pointer<BN_GENCB>)>>('BN_is_prime_fasttest_ex');
  late final _BN_is_prime_fasttest_ex = _BN_is_prime_fasttest_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>, int,
          ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_Xpq(
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xq,
    int nbits,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_X931_generate_Xpq(
      Xp,
      Xq,
      nbits,
      ctx,
    );
  }

  late final _BN_X931_generate_XpqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_X931_generate_Xpq');
  late final _BN_X931_generate_Xpq = _BN_X931_generate_XpqPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_X931_derive_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_derive_prime_ex(
      p,
      p1,
      p2,
      Xp,
      Xp1,
      Xp2,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_derive_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_derive_prime_ex');
  late final _BN_X931_derive_prime_ex = _BN_X931_derive_prime_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_generate_prime_ex(
      p,
      p1,
      p2,
      Xp1,
      Xp2,
      Xp,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_generate_prime_ex');
  late final _BN_X931_generate_prime_ex =
      _BN_X931_generate_prime_exPtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new() {
    return _BN_MONT_CTX_new();
  }

  late final _BN_MONT_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_MONT_CTX> Function()>>(
          'BN_MONT_CTX_new');
  late final _BN_MONT_CTX_new =
      _BN_MONT_CTX_newPtr.asFunction<ffi.Pointer<BN_MONT_CTX> Function()>();

  int BN_mod_mul_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_montgomery(
      r,
      a,
      b,
      mont,
      ctx,
    );
  }

  late final _BN_mod_mul_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_montgomery');
  late final _BN_mod_mul_montgomery = _BN_mod_mul_montgomeryPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_to_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_to_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_to_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_to_montgomery');
  late final _BN_to_montgomery = _BN_to_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  int BN_from_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_from_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_from_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_from_montgomery');
  late final _BN_from_montgomery = _BN_from_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  void BN_MONT_CTX_free(
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_MONT_CTX_free(
      mont,
    );
  }

  late final _BN_MONT_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_MONT_CTX>)>>(
          'BN_MONT_CTX_free');
  late final _BN_MONT_CTX_free = _BN_MONT_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_MONT_CTX>)>();

  int BN_MONT_CTX_set(
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set(
      mont,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set');
  late final _BN_MONT_CTX_set = _BN_MONT_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_copy(
    ffi.Pointer<BN_MONT_CTX> to,
    ffi.Pointer<BN_MONT_CTX> from,
  ) {
    return _BN_MONT_CTX_copy(
      to,
      from,
    );
  }

  late final _BN_MONT_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_MONT_CTX_copy');
  late final _BN_MONT_CTX_copy = _BN_MONT_CTX_copyPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_MONT_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_set_locked(
    ffi.Pointer<ffi.Pointer<BN_MONT_CTX>> pmont,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set_locked(
      pmont,
      lock,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_set_lockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
              ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
              ffi.Pointer<CRYPTO_RWLOCK>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set_locked');
  late final _BN_MONT_CTX_set_locked = _BN_MONT_CTX_set_lockedPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
          ffi.Pointer<CRYPTO_RWLOCK>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_new(
    ffi.Pointer<BIGNUM> A,
    ffi.Pointer<BIGNUM> Ai,
    ffi.Pointer<BIGNUM> mod,
  ) {
    return _BN_BLINDING_new(
      A,
      Ai,
      mod,
    );
  }

  late final _BN_BLINDING_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_BLINDING_new');
  late final _BN_BLINDING_new = _BN_BLINDING_newPtr.asFunction<
      ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_BLINDING_free(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_free(
      b,
    );
  }

  late final _BN_BLINDING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_free');
  late final _BN_BLINDING_free = _BN_BLINDING_freePtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_update(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_update(
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_update');
  late final _BN_BLINDING_update = _BN_BLINDING_updatePtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_convert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert');
  late final _BN_BLINDING_convert = _BN_BLINDING_convertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_invert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert');
  late final _BN_BLINDING_invert = _BN_BLINDING_invertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_convert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_convert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert_ex');
  late final _BN_BLINDING_convert_ex = _BN_BLINDING_convert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_invert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_invert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert_ex');
  late final _BN_BLINDING_invert_ex = _BN_BLINDING_invert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_is_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_is_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_is_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_is_current_thread');
  late final _BN_BLINDING_is_current_thread = _BN_BLINDING_is_current_threadPtr
      .asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_set_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_set_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_set_current_thread');
  late final _BN_BLINDING_set_current_thread =
      _BN_BLINDING_set_current_threadPtr.asFunction<
          void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_lock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_lock(
      b,
    );
  }

  late final _BN_BLINDING_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_lock');
  late final _BN_BLINDING_lock =
      _BN_BLINDING_lockPtr.asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_unlock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_unlock(
      b,
    );
  }

  late final _BN_BLINDING_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_unlock');
  late final _BN_BLINDING_unlock = _BN_BLINDING_unlockPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_get_flags(
    ffi.Pointer<BN_BLINDING> arg0,
  ) {
    return _BN_BLINDING_get_flags(
      arg0,
    );
  }

  late final _BN_BLINDING_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BN_BLINDING>)>>('BN_BLINDING_get_flags');
  late final _BN_BLINDING_get_flags = _BN_BLINDING_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_flags(
    ffi.Pointer<BN_BLINDING> arg0,
    int arg1,
  ) {
    return _BN_BLINDING_set_flags(
      arg0,
      arg1,
    );
  }

  late final _BN_BLINDING_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BN_BLINDING>,
              ffi.UnsignedLong)>>('BN_BLINDING_set_flags');
  late final _BN_BLINDING_set_flags = _BN_BLINDING_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>, int)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_create_param(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIGNUM> r,
                    ffi.Pointer<BIGNUM> a,
                    ffi.Pointer<BIGNUM> p,
                    ffi.Pointer<BIGNUM> m,
                    ffi.Pointer<BN_CTX> ctx,
                    ffi.Pointer<BN_MONT_CTX> m_ctx)>>
        bn_mod_exp,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_BLINDING_create_param(
      b,
      e,
      m,
      ctx,
      bn_mod_exp,
      m_ctx,
    );
  }

  late final _BN_BLINDING_create_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM> r,
                          ffi.Pointer<BIGNUM> a,
                          ffi.Pointer<BIGNUM> p,
                          ffi.Pointer<BIGNUM> m,
                          ffi.Pointer<BN_CTX> ctx,
                          ffi.Pointer<BN_MONT_CTX> m_ctx)>>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_BLINDING_create_param');
  late final _BN_BLINDING_create_param =
      _BN_BLINDING_create_paramPtr.asFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM> r,
                          ffi.Pointer<BIGNUM> a,
                          ffi.Pointer<BIGNUM> p,
                          ffi.Pointer<BIGNUM> m,
                          ffi.Pointer<BN_CTX> ctx,
                          ffi.Pointer<BN_MONT_CTX> m_ctx)>>,
              ffi.Pointer<BN_MONT_CTX>)>();

  void BN_set_params(
    int mul,
    int high,
    int low,
    int mont,
  ) {
    return _BN_set_params(
      mul,
      high,
      low,
      mont,
    );
  }

  late final _BN_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BN_set_params');
  late final _BN_set_params =
      _BN_set_paramsPtr.asFunction<void Function(int, int, int, int)>();

  int BN_get_params(
    int which,
  ) {
    return _BN_get_params(
      which,
    );
  }

  late final _BN_get_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BN_get_params');
  late final _BN_get_params = _BN_get_paramsPtr.asFunction<int Function(int)>();

  ffi.Pointer<BN_RECP_CTX> BN_RECP_CTX_new() {
    return _BN_RECP_CTX_new();
  }

  late final _BN_RECP_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_RECP_CTX> Function()>>(
          'BN_RECP_CTX_new');
  late final _BN_RECP_CTX_new =
      _BN_RECP_CTX_newPtr.asFunction<ffi.Pointer<BN_RECP_CTX> Function()>();

  void BN_RECP_CTX_free(
    ffi.Pointer<BN_RECP_CTX> recp,
  ) {
    return _BN_RECP_CTX_free(
      recp,
    );
  }

  late final _BN_RECP_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_RECP_CTX>)>>(
          'BN_RECP_CTX_free');
  late final _BN_RECP_CTX_free = _BN_RECP_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_RECP_CTX>)>();

  int BN_RECP_CTX_set(
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BIGNUM> rdiv,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_RECP_CTX_set(
      recp,
      rdiv,
      ctx,
    );
  }

  late final _BN_RECP_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_RECP_CTX_set');
  late final _BN_RECP_CTX_set = _BN_RECP_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_mul_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_reciprocal(
      r,
      x,
      y,
      recp,
      ctx,
    );
  }

  late final _BN_mod_mul_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_reciprocal');
  late final _BN_mod_mul_reciprocal = _BN_mod_mul_reciprocalPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_recp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_recp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_recp');
  late final _BN_mod_exp_recp = _BN_mod_exp_recpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_div_recp(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div_recp(
      dv,
      rem,
      m,
      recp,
      ctx,
    );
  }

  late final _BN_div_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_div_recp');
  late final _BN_div_recp = _BN_div_recpPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_GF2m_add(
      r,
      a,
      b,
    );
  }

  late final _BN_GF2m_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_add');
  late final _BN_GF2m_add = _BN_GF2m_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_GF2m_mod(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_mod');
  late final _BN_GF2m_mod = _BN_GF2m_modPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul');
  late final _BN_GF2m_mod_mul = _BN_GF2m_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr');
  late final _BN_GF2m_mod_sqr = _BN_GF2m_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_invPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv');
  late final _BN_GF2m_mod_inv = _BN_GF2m_mod_invPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div');
  late final _BN_GF2m_mod_div = _BN_GF2m_mod_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp');
  late final _BN_GF2m_mod_exp = _BN_GF2m_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt');
  late final _BN_GF2m_mod_sqrt = _BN_GF2m_mod_sqrtPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad');
  late final _BN_GF2m_mod_solve_quad = _BN_GF2m_mod_solve_quadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
  ) {
    return _BN_GF2m_mod_arr(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_mod_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>)>>('BN_GF2m_mod_arr');
  late final _BN_GF2m_mod_arr = _BN_GF2m_mod_arrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)>();

  int BN_GF2m_mod_mul_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mul_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul_arr');
  late final _BN_GF2m_mod_mul_arr = _BN_GF2m_mod_mul_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqr_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr_arr');
  late final _BN_GF2m_mod_sqr_arr = _BN_GF2m_mod_sqr_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv_arr(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_inv_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv_arr');
  late final _BN_GF2m_mod_inv_arr = _BN_GF2m_mod_inv_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_div_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div_arr');
  late final _BN_GF2m_mod_div_arr = _BN_GF2m_mod_div_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_exp_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp_arr');
  late final _BN_GF2m_mod_exp_arr = _BN_GF2m_mod_exp_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrt_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt_arr');
  late final _BN_GF2m_mod_sqrt_arr = _BN_GF2m_mod_sqrt_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quad_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad_arr');
  late final _BN_GF2m_mod_solve_quad_arr =
      _BN_GF2m_mod_solve_quad_arrPtr.asFunction<
          int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_poly2arr(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    int max,
  ) {
    return _BN_GF2m_poly2arr(
      a,
      p,
      max,
    );
  }

  late final _BN_GF2m_poly2arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('BN_GF2m_poly2arr');
  late final _BN_GF2m_poly2arr = _BN_GF2m_poly2arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, int)>();

  int BN_GF2m_arr2poly(
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_GF2m_arr2poly(
      p,
      a,
    );
  }

  late final _BN_GF2m_arr2polyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>>('BN_GF2m_arr2poly');
  late final _BN_GF2m_arr2poly = _BN_GF2m_arr2polyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>();

  int BN_nist_mod_192(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_192(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_192');
  late final _BN_nist_mod_192 = _BN_nist_mod_192Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_224(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_224(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_224');
  late final _BN_nist_mod_224 = _BN_nist_mod_224Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_256(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_256(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_256');
  late final _BN_nist_mod_256 = _BN_nist_mod_256Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_384(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_384(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_384');
  late final _BN_nist_mod_384 = _BN_nist_mod_384Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_521(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_521(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_521Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_521');
  late final _BN_nist_mod_521 = _BN_nist_mod_521Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_192() {
    return _BN_get0_nist_prime_192();
  }

  late final _BN_get0_nist_prime_192Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_192');
  late final _BN_get0_nist_prime_192 =
      _BN_get0_nist_prime_192Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_224() {
    return _BN_get0_nist_prime_224();
  }

  late final _BN_get0_nist_prime_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_224');
  late final _BN_get0_nist_prime_224 =
      _BN_get0_nist_prime_224Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_256() {
    return _BN_get0_nist_prime_256();
  }

  late final _BN_get0_nist_prime_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_256');
  late final _BN_get0_nist_prime_256 =
      _BN_get0_nist_prime_256Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_384() {
    return _BN_get0_nist_prime_384();
  }

  late final _BN_get0_nist_prime_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_384');
  late final _BN_get0_nist_prime_384 =
      _BN_get0_nist_prime_384Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_521() {
    return _BN_get0_nist_prime_521();
  }

  late final _BN_get0_nist_prime_521Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_521');
  late final _BN_get0_nist_prime_521 =
      _BN_get0_nist_prime_521Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>> BN_nist_mod_func(
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_nist_mod_func(
      p,
    );
  }

  late final _BN_nist_mod_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
              Function(ffi.Pointer<BIGNUM>)>>('BN_nist_mod_func');
  late final _BN_nist_mod_func = _BN_nist_mod_funcPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
          Function(ffi.Pointer<BIGNUM>)>();

  int BN_generate_dsa_nonce(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<BIGNUM> range,
    ffi.Pointer<BIGNUM> priv,
    ffi.Pointer<ffi.UnsignedChar> message,
    int message_len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_dsa_nonce(
      out,
      range,
      priv,
      message,
      message_len,
      ctx,
    );
  }

  late final _BN_generate_dsa_noncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<BN_CTX>)>>('BN_generate_dsa_nonce');
  late final _BN_generate_dsa_nonce = _BN_generate_dsa_noncePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_768(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_768(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_768Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc2409_prime_768');
  late final _BN_get_rfc2409_prime_768 = _BN_get_rfc2409_prime_768Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_1024(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_1024(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_1024Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc2409_prime_1024');
  late final _BN_get_rfc2409_prime_1024 = _BN_get_rfc2409_prime_1024Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_1536(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_1536(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_1536Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_1536');
  late final _BN_get_rfc3526_prime_1536 = _BN_get_rfc3526_prime_1536Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_2048(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_2048(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_2048Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_2048');
  late final _BN_get_rfc3526_prime_2048 = _BN_get_rfc3526_prime_2048Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_3072(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_3072(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_3072Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_3072');
  late final _BN_get_rfc3526_prime_3072 = _BN_get_rfc3526_prime_3072Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_4096(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_4096(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_4096Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_4096');
  late final _BN_get_rfc3526_prime_4096 = _BN_get_rfc3526_prime_4096Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_6144(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_6144(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_6144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_6144');
  late final _BN_get_rfc3526_prime_6144 = _BN_get_rfc3526_prime_6144Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_8192(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_8192(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_8192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_8192');
  late final _BN_get_rfc3526_prime_8192 = _BN_get_rfc3526_prime_8192Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_bntest_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_bntest_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_bntest_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_bntest_rand');
  late final _BN_bntest_rand = _BN_bntest_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SEQUENCE_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SEQUENCE_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SEQUENCE_ANY');
  late final _d2i_ASN1_SEQUENCE_ANY = _d2i_ASN1_SEQUENCE_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SEQUENCE_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SEQUENCE_ANYPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_SEQUENCE_ANY');
  late final _i2d_ASN1_SEQUENCE_ANY = _i2d_ASN1_SEQUENCE_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_SEQUENCE_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_SEQUENCE_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_SEQUENCE_ANY_it => _ASN1_SEQUENCE_ANY_it;

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SET_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SET_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SET_ANY');
  late final _d2i_ASN1_SET_ANY = _d2i_ASN1_SET_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SET_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SET_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_SET_ANY');
  late final _i2d_ASN1_SET_ANY = _i2d_ASN1_SET_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_SET_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_SET_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_SET_ANY_it => _ASN1_SET_ANY_it;

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_new() {
    return _ASN1_TYPE_new();
  }

  late final _ASN1_TYPE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TYPE> Function()>>(
          'ASN1_TYPE_new');
  late final _ASN1_TYPE_new =
      _ASN1_TYPE_newPtr.asFunction<ffi.Pointer<ASN1_TYPE> Function()>();

  void ASN1_TYPE_free(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_free(
      a,
    );
  }

  late final _ASN1_TYPE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_free');
  late final _ASN1_TYPE_free =
      _ASN1_TYPE_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> d2i_ASN1_TYPE(
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TYPE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TYPE');
  late final _d2i_ASN1_TYPE = _d2i_ASN1_TYPEPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TYPE(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TYPE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TYPE');
  late final _i2d_ASN1_TYPE = _i2d_ASN1_TYPEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_ANY_it => _ASN1_ANY_it;

  int ASN1_TYPE_get(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_get(
      a,
    );
  }

  late final _ASN1_TYPE_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_get');
  late final _ASN1_TYPE_get =
      _ASN1_TYPE_getPtr.asFunction<int Function(ffi.Pointer<ASN1_TYPE>)>();

  void ASN1_TYPE_set(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set');
  late final _ASN1_TYPE_set = _ASN1_TYPE_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_set1(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set1(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set1');
  late final _ASN1_TYPE_set1 = _ASN1_TYPE_set1Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_cmp(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ASN1_TYPE> b,
  ) {
    return _ASN1_TYPE_cmp(
      a,
      b,
    );
  }

  late final _ASN1_TYPE_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_cmp');
  late final _ASN1_TYPE_cmp = _ASN1_TYPE_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_pack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> t,
  ) {
    return _ASN1_TYPE_pack_sequence(
      it,
      s,
      t,
    );
  }

  late final _ASN1_TYPE_pack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>>('ASN1_TYPE_pack_sequence');
  late final _ASN1_TYPE_pack_sequence = _ASN1_TYPE_pack_sequencePtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>();

  ffi.Pointer<ffi.Void> ASN1_TYPE_unpack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_TYPE> t,
  ) {
    return _ASN1_TYPE_unpack_sequence(
      it,
      t,
    );
  }

  late final _ASN1_TYPE_unpack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_unpack_sequence');
  late final _ASN1_TYPE_unpack_sequence =
      _ASN1_TYPE_unpack_sequencePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_new() {
    return _ASN1_OBJECT_new();
  }

  late final _ASN1_OBJECT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function()>>(
          'ASN1_OBJECT_new');
  late final _ASN1_OBJECT_new =
      _ASN1_OBJECT_newPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function()>();

  void ASN1_OBJECT_free(
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _ASN1_OBJECT_free(
      a,
    );
  }

  late final _ASN1_OBJECT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'ASN1_OBJECT_free');
  late final _ASN1_OBJECT_free = _ASN1_OBJECT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OBJECT>)>();

  int i2d_ASN1_OBJECT(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_ASN1_OBJECT(
      a,
      pp,
    );
  }

  late final _i2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_OBJECT');
  late final _i2d_ASN1_OBJECT = _i2d_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_OBJECT> d2i_ASN1_OBJECT(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_ASN1_OBJECT(
      a,
      pp,
      length,
    );
  }

  late final _d2i_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OBJECT');
  late final _d2i_ASN1_OBJECT = _d2i_ASN1_OBJECTPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OBJECT_it =
      _lookup<ASN1_ITEM>('ASN1_OBJECT_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OBJECT_it => _ASN1_OBJECT_it;

  ffi.Pointer<ASN1_STRING> ASN1_STRING_new() {
    return _ASN1_STRING_new();
  }

  late final _ASN1_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_STRING_new');
  late final _ASN1_STRING_new =
      _ASN1_STRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_STRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_free(
      a,
    );
  }

  late final _ASN1_STRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_free');
  late final _ASN1_STRING_free = _ASN1_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_clear_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_clear_free(
      a,
    );
  }

  late final _ASN1_STRING_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_clear_free');
  late final _ASN1_STRING_clear_free = _ASN1_STRING_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_copy(
    ffi.Pointer<ASN1_STRING> dst,
    ffi.Pointer<ASN1_STRING> str,
  ) {
    return _ASN1_STRING_copy(
      dst,
      str,
    );
  }

  late final _ASN1_STRING_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_copy');
  late final _ASN1_STRING_copy = _ASN1_STRING_copyPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_dup(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_dup(
      a,
    );
  }

  late final _ASN1_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_dup');
  late final _ASN1_STRING_dup = _ASN1_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_type_new(
    int type,
  ) {
    return _ASN1_STRING_type_new(
      type,
    );
  }

  late final _ASN1_STRING_type_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function(ffi.Int)>>(
          'ASN1_STRING_type_new');
  late final _ASN1_STRING_type_new = _ASN1_STRING_type_newPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(int)>();

  int ASN1_STRING_cmp(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ASN1_STRING> b,
  ) {
    return _ASN1_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_cmp');
  late final _ASN1_STRING_cmp = _ASN1_STRING_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_set(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set');
  late final _ASN1_STRING_set = _ASN1_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  void ASN1_STRING_set0(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set0(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set0');
  late final _ASN1_STRING_set0 = _ASN1_STRING_set0Ptr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  int ASN1_STRING_length(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_length(
      x,
    );
  }

  late final _ASN1_STRING_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_length');
  late final _ASN1_STRING_length = _ASN1_STRING_lengthPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_length_set(
    ffi.Pointer<ASN1_STRING> x,
    int n,
  ) {
    return _ASN1_STRING_length_set(
      x,
      n,
    );
  }

  late final _ASN1_STRING_length_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_STRING>, ffi.Int)>>('ASN1_STRING_length_set');
  late final _ASN1_STRING_length_set = _ASN1_STRING_length_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_type(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_type(
      x,
    );
  }

  late final _ASN1_STRING_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_type');
  late final _ASN1_STRING_type =
      _ASN1_STRING_typePtr.asFunction<int Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_data(
      x,
    );
  }

  late final _ASN1_STRING_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_data');
  late final _ASN1_STRING_data = _ASN1_STRING_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_get0_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_get0_data(
      x,
    );
  }

  late final _ASN1_STRING_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_get0_data');
  late final _ASN1_STRING_get0_data = _ASN1_STRING_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> ASN1_BIT_STRING_new() {
    return _ASN1_BIT_STRING_new();
  }

  late final _ASN1_BIT_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BIT_STRING> Function()>>(
          'ASN1_BIT_STRING_new');
  late final _ASN1_BIT_STRING_new = _ASN1_BIT_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function()>();

  void ASN1_BIT_STRING_free(
    ffi.Pointer<ASN1_BIT_STRING> a,
  ) {
    return _ASN1_BIT_STRING_free(
      a,
    );
  }

  late final _ASN1_BIT_STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BIT_STRING>)>>(
      'ASN1_BIT_STRING_free');
  late final _ASN1_BIT_STRING_free = _ASN1_BIT_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BIT_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> d2i_ASN1_BIT_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BIT_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BIT_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BIT_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BIT_STRING');
  late final _d2i_ASN1_BIT_STRING = _d2i_ASN1_BIT_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BIT_STRING(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BIT_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BIT_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BIT_STRING');
  late final _i2d_ASN1_BIT_STRING = _i2d_ASN1_BIT_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_BIT_STRING_it =
      _lookup<ASN1_ITEM>('ASN1_BIT_STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_BIT_STRING_it => _ASN1_BIT_STRING_it;

  int ASN1_BIT_STRING_set(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> d,
    int length,
  ) {
    return _ASN1_BIT_STRING_set(
      a,
      d,
      length,
    );
  }

  late final _ASN1_BIT_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_BIT_STRING_set');
  late final _ASN1_BIT_STRING_set = _ASN1_BIT_STRING_setPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_set_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
    int value,
  ) {
    return _ASN1_BIT_STRING_set_bit(
      a,
      n,
      value,
    );
  }

  late final _ASN1_BIT_STRING_set_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Int,
              ffi.Int)>>('ASN1_BIT_STRING_set_bit');
  late final _ASN1_BIT_STRING_set_bit = _ASN1_BIT_STRING_set_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int, int)>();

  int ASN1_BIT_STRING_get_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
  ) {
    return _ASN1_BIT_STRING_get_bit(
      a,
      n,
    );
  }

  late final _ASN1_BIT_STRING_get_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Int)>>('ASN1_BIT_STRING_get_bit');
  late final _ASN1_BIT_STRING_get_bit = _ASN1_BIT_STRING_get_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int)>();

  int ASN1_BIT_STRING_check(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> flags,
    int flags_len,
  ) {
    return _ASN1_BIT_STRING_check(
      a,
      flags,
      flags_len,
    );
  }

  late final _ASN1_BIT_STRING_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_BIT_STRING_check');
  late final _ASN1_BIT_STRING_check = _ASN1_BIT_STRING_checkPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_name_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
    int indent,
  ) {
    return _ASN1_BIT_STRING_name_print(
      out,
      bs,
      tbl,
      indent,
    );
  }

  late final _ASN1_BIT_STRING_name_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>,
              ffi.Int)>>('ASN1_BIT_STRING_name_print');
  late final _ASN1_BIT_STRING_name_print =
      _ASN1_BIT_STRING_name_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>, int)>();

  int ASN1_BIT_STRING_num_asc(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_num_asc(
      name,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_num_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_num_asc');
  late final _ASN1_BIT_STRING_num_asc = _ASN1_BIT_STRING_num_ascPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<BIT_STRING_BITNAME>)>();

  int ASN1_BIT_STRING_set_asc(
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<ffi.Char> name,
    int value,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_set_asc(
      bs,
      name,
      value,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_set_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_set_asc');
  late final _ASN1_BIT_STRING_set_asc = _ASN1_BIT_STRING_set_ascPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<BIT_STRING_BITNAME>)>();

  ffi.Pointer<ffi.Int> ASN1_INTEGER_new() {
    return _ASN1_INTEGER_new();
  }

  late final _ASN1_INTEGER_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'ASN1_INTEGER_new');
  late final _ASN1_INTEGER_new =
      _ASN1_INTEGER_newPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void ASN1_INTEGER_free(
    ffi.Pointer<ffi.Int> a,
  ) {
    return _ASN1_INTEGER_free(
      a,
    );
  }

  late final _ASN1_INTEGER_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'ASN1_INTEGER_free');
  late final _ASN1_INTEGER_free =
      _ASN1_INTEGER_freePtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> d2i_ASN1_INTEGER(
    ffi.Pointer<ffi.Pointer<ffi.Int>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_INTEGER(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_INTEGER');
  late final _d2i_ASN1_INTEGER = _d2i_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Pointer<ffi.Int>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_INTEGER(
    ffi.Pointer<ffi.Int> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_INTEGER(
      a,
      out,
    );
  }

  late final _i2d_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_INTEGER');
  late final _i2d_ASN1_INTEGER = _i2d_ASN1_INTEGERPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_INTEGER_it =
      _lookup<ASN1_ITEM>('ASN1_INTEGER_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_INTEGER_it => _ASN1_INTEGER_it;

  ffi.Pointer<ffi.Int> d2i_ASN1_UINTEGER(
    ffi.Pointer<ffi.Pointer<ffi.Int>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_ASN1_UINTEGER(
      a,
      pp,
      length,
    );
  }

  late final _d2i_ASN1_UINTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UINTEGER');
  late final _d2i_ASN1_UINTEGER = _d2i_ASN1_UINTEGERPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Pointer<ffi.Int>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<ffi.Int> ASN1_INTEGER_dup(
    ffi.Pointer<ffi.Int> x,
  ) {
    return _ASN1_INTEGER_dup(
      x,
    );
  }

  late final _ASN1_INTEGER_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Int>)>>('ASN1_INTEGER_dup');
  late final _ASN1_INTEGER_dup = _ASN1_INTEGER_dupPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Int>)>();

  int ASN1_INTEGER_cmp(
    ffi.Pointer<ffi.Int> x,
    ffi.Pointer<ffi.Int> y,
  ) {
    return _ASN1_INTEGER_cmp(
      x,
      y,
    );
  }

  late final _ASN1_INTEGER_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ASN1_INTEGER_cmp');
  late final _ASN1_INTEGER_cmp = _ASN1_INTEGER_cmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ASN1_ENUMERATED> ASN1_ENUMERATED_new() {
    return _ASN1_ENUMERATED_new();
  }

  late final _ASN1_ENUMERATED_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ENUMERATED> Function()>>(
          'ASN1_ENUMERATED_new');
  late final _ASN1_ENUMERATED_new = _ASN1_ENUMERATED_newPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function()>();

  void ASN1_ENUMERATED_free(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_free(
      a,
    );
  }

  late final _ASN1_ENUMERATED_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_free');
  late final _ASN1_ENUMERATED_free = _ASN1_ENUMERATED_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> d2i_ASN1_ENUMERATED(
    ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_ENUMERATED(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(
              ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_ENUMERATED');
  late final _d2i_ASN1_ENUMERATED = _d2i_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_ENUMERATED(
    ffi.Pointer<ASN1_ENUMERATED> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_ENUMERATED(
      a,
      out,
    );
  }

  late final _i2d_ASN1_ENUMERATEDPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_ENUMERATED');
  late final _i2d_ASN1_ENUMERATED = _i2d_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_ENUMERATED_it =
      _lookup<ASN1_ITEM>('ASN1_ENUMERATED_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_ENUMERATED_it => _ASN1_ENUMERATED_it;

  int ASN1_UTCTIME_check(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_check(
      a,
    );
  }

  late final _ASN1_UTCTIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_check');
  late final _ASN1_UTCTIME_check = _ASN1_UTCTIME_checkPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_set(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ASN1_UTCTIME>, time_t)>>('ASN1_UTCTIME_set');
  late final _ASN1_UTCTIME_set = _ASN1_UTCTIME_setPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_adj(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_UTCTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_UTCTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_UTCTIME_adj');
  late final _ASN1_UTCTIME_adj = _ASN1_UTCTIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(
          ffi.Pointer<ASN1_UTCTIME>, int, int, int)>();

  int ASN1_UTCTIME_set_string(
    ffi.Pointer<ASN1_UTCTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_UTCTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_UTCTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_UTCTIME_set_string');
  late final _ASN1_UTCTIME_set_string = _ASN1_UTCTIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_UTCTIME_cmp_time_t(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_cmp_time_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_UTCTIME>, time_t)>>('ASN1_UTCTIME_cmp_time_t');
  late final _ASN1_UTCTIME_cmp_time_t = _ASN1_UTCTIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  int ASN1_GENERALIZEDTIME_check(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_check(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_check');
  late final _ASN1_GENERALIZEDTIME_check = _ASN1_GENERALIZEDTIME_checkPtr
      .asFunction<int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_set(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
  ) {
    return _ASN1_GENERALIZEDTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_GENERALIZEDTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t)>>('ASN1_GENERALIZEDTIME_set');
  late final _ASN1_GENERALIZEDTIME_set =
      _ASN1_GENERALIZEDTIME_setPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_adj(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_GENERALIZEDTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_GENERALIZEDTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t,
              ffi.Int,
              ffi.Long)>>('ASN1_GENERALIZEDTIME_adj');
  late final _ASN1_GENERALIZEDTIME_adj =
      _ASN1_GENERALIZEDTIME_adjPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int, int, int)>();

  int ASN1_GENERALIZEDTIME_set_string(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_GENERALIZEDTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_GENERALIZEDTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_GENERALIZEDTIME_set_string');
  late final _ASN1_GENERALIZEDTIME_set_string =
      _ASN1_GENERALIZEDTIME_set_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<ASN1_TIME> from,
    ffi.Pointer<ASN1_TIME> to,
  ) {
    return _ASN1_TIME_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _ASN1_TIME_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_diff');
  late final _ASN1_TIME_diff = _ASN1_TIME_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_new() {
    return _ASN1_OCTET_STRING_new();
  }

  late final _ASN1_OCTET_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OCTET_STRING> Function()>>(
          'ASN1_OCTET_STRING_new');
  late final _ASN1_OCTET_STRING_new = _ASN1_OCTET_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function()>();

  void ASN1_OCTET_STRING_free(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_free(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_free');
  late final _ASN1_OCTET_STRING_free = _ASN1_OCTET_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OCTET_STRING>)>();

  ffi.Pointer<ASN1_OCTET_STRING> d2i_ASN1_OCTET_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_OCTET_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_OCTET_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OCTET_STRING');
  late final _d2i_ASN1_OCTET_STRING = _d2i_ASN1_OCTET_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_OCTET_STRING(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_OCTET_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_OCTET_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_OCTET_STRING');
  late final _i2d_ASN1_OCTET_STRING = _i2d_ASN1_OCTET_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OCTET_STRING_it =
      _lookup<ASN1_ITEM>('ASN1_OCTET_STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OCTET_STRING_it => _ASN1_OCTET_STRING_it;

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_dup(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_dup(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_dup');
  late final _ASN1_OCTET_STRING_dup = _ASN1_OCTET_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_cmp(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ASN1_OCTET_STRING> b,
  ) {
    return _ASN1_OCTET_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_OCTET_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_cmp');
  late final _ASN1_OCTET_STRING_cmp = _ASN1_OCTET_STRING_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_OCTET_STRING>, ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_set(
    ffi.Pointer<ASN1_OCTET_STRING> str,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_OCTET_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_OCTET_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_OCTET_STRING_set');
  late final _ASN1_OCTET_STRING_set = _ASN1_OCTET_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ASN1_VISIBLESTRING> ASN1_VISIBLESTRING_new() {
    return _ASN1_VISIBLESTRING_new();
  }

  late final _ASN1_VISIBLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_VISIBLESTRING> Function()>>(
          'ASN1_VISIBLESTRING_new');
  late final _ASN1_VISIBLESTRING_new = _ASN1_VISIBLESTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function()>();

  void ASN1_VISIBLESTRING_free(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
  ) {
    return _ASN1_VISIBLESTRING_free(
      a,
    );
  }

  late final _ASN1_VISIBLESTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_VISIBLESTRING>)>>('ASN1_VISIBLESTRING_free');
  late final _ASN1_VISIBLESTRING_free = _ASN1_VISIBLESTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VISIBLESTRING>)>();

  ffi.Pointer<ASN1_VISIBLESTRING> d2i_ASN1_VISIBLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_VISIBLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_VISIBLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VISIBLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_VISIBLESTRING');
  late final _d2i_ASN1_VISIBLESTRING = _d2i_ASN1_VISIBLESTRINGPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_VISIBLESTRING(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_VISIBLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_VISIBLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_VISIBLESTRING');
  late final _i2d_ASN1_VISIBLESTRING = _i2d_ASN1_VISIBLESTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_VISIBLESTRING_it =
      _lookup<ASN1_ITEM>('ASN1_VISIBLESTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_VISIBLESTRING_it => _ASN1_VISIBLESTRING_it;

  ffi.Pointer<ASN1_UNIVERSALSTRING> ASN1_UNIVERSALSTRING_new() {
    return _ASN1_UNIVERSALSTRING_new();
  }

  late final _ASN1_UNIVERSALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>>(
          'ASN1_UNIVERSALSTRING_new');
  late final _ASN1_UNIVERSALSTRING_new = _ASN1_UNIVERSALSTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>();

  void ASN1_UNIVERSALSTRING_free(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
  ) {
    return _ASN1_UNIVERSALSTRING_free(
      a,
    );
  }

  late final _ASN1_UNIVERSALSTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_UNIVERSALSTRING>)>>('ASN1_UNIVERSALSTRING_free');
  late final _ASN1_UNIVERSALSTRING_free = _ASN1_UNIVERSALSTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  ffi.Pointer<ASN1_UNIVERSALSTRING> d2i_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UNIVERSALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UNIVERSALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UNIVERSALSTRING');
  late final _d2i_ASN1_UNIVERSALSTRING =
      _d2i_ASN1_UNIVERSALSTRINGPtr.asFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UNIVERSALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UNIVERSALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UNIVERSALSTRING');
  late final _i2d_ASN1_UNIVERSALSTRING =
      _i2d_ASN1_UNIVERSALSTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UNIVERSALSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_UNIVERSALSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UNIVERSALSTRING_it =>
      _ASN1_UNIVERSALSTRING_it;

  ffi.Pointer<ASN1_UTF8STRING> ASN1_UTF8STRING_new() {
    return _ASN1_UTF8STRING_new();
  }

  late final _ASN1_UTF8STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTF8STRING> Function()>>(
          'ASN1_UTF8STRING_new');
  late final _ASN1_UTF8STRING_new = _ASN1_UTF8STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function()>();

  void ASN1_UTF8STRING_free(
    ffi.Pointer<ASN1_UTF8STRING> a,
  ) {
    return _ASN1_UTF8STRING_free(
      a,
    );
  }

  late final _ASN1_UTF8STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTF8STRING>)>>(
      'ASN1_UTF8STRING_free');
  late final _ASN1_UTF8STRING_free = _ASN1_UTF8STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTF8STRING>)>();

  ffi.Pointer<ASN1_UTF8STRING> d2i_ASN1_UTF8STRING(
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTF8STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTF8STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTF8STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTF8STRING');
  late final _d2i_ASN1_UTF8STRING = _d2i_ASN1_UTF8STRINGPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_UTF8STRING(
    ffi.Pointer<ASN1_UTF8STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTF8STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTF8STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UTF8STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UTF8STRING');
  late final _i2d_ASN1_UTF8STRING = _i2d_ASN1_UTF8STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTF8STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UTF8STRING_it =
      _lookup<ASN1_ITEM>('ASN1_UTF8STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UTF8STRING_it => _ASN1_UTF8STRING_it;

  ffi.Pointer<ASN1_NULL> ASN1_NULL_new() {
    return _ASN1_NULL_new();
  }

  late final _ASN1_NULL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_NULL> Function()>>(
          'ASN1_NULL_new');
  late final _ASN1_NULL_new =
      _ASN1_NULL_newPtr.asFunction<ffi.Pointer<ASN1_NULL> Function()>();

  void ASN1_NULL_free(
    ffi.Pointer<ASN1_NULL> a,
  ) {
    return _ASN1_NULL_free(
      a,
    );
  }

  late final _ASN1_NULL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_NULL>)>>(
          'ASN1_NULL_free');
  late final _ASN1_NULL_free =
      _ASN1_NULL_freePtr.asFunction<void Function(ffi.Pointer<ASN1_NULL>)>();

  ffi.Pointer<ASN1_NULL> d2i_ASN1_NULL(
    ffi.Pointer<ffi.Pointer<ASN1_NULL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_NULL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_NULL> Function(
              ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_NULL');
  late final _d2i_ASN1_NULL = _d2i_ASN1_NULLPtr.asFunction<
      ffi.Pointer<ASN1_NULL> Function(ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_NULL(
    ffi.Pointer<ASN1_NULL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_NULL(
      a,
      out,
    );
  }

  late final _i2d_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_NULL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_NULL');
  late final _i2d_ASN1_NULL = _i2d_ASN1_NULLPtr.asFunction<
      int Function(ffi.Pointer<ASN1_NULL>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_NULL_it =
      _lookup<ASN1_ITEM>('ASN1_NULL_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_NULL_it => _ASN1_NULL_it;

  ffi.Pointer<ASN1_BMPSTRING> ASN1_BMPSTRING_new() {
    return _ASN1_BMPSTRING_new();
  }

  late final _ASN1_BMPSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BMPSTRING> Function()>>(
          'ASN1_BMPSTRING_new');
  late final _ASN1_BMPSTRING_new = _ASN1_BMPSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function()>();

  void ASN1_BMPSTRING_free(
    ffi.Pointer<ASN1_BMPSTRING> a,
  ) {
    return _ASN1_BMPSTRING_free(
      a,
    );
  }

  late final _ASN1_BMPSTRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BMPSTRING>)>>(
      'ASN1_BMPSTRING_free');
  late final _ASN1_BMPSTRING_free = _ASN1_BMPSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BMPSTRING>)>();

  ffi.Pointer<ASN1_BMPSTRING> d2i_ASN1_BMPSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BMPSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BMPSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BMPSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BMPSTRING');
  late final _d2i_ASN1_BMPSTRING = _d2i_ASN1_BMPSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BMPSTRING(
    ffi.Pointer<ASN1_BMPSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BMPSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BMPSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BMPSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BMPSTRING');
  late final _i2d_ASN1_BMPSTRING = _i2d_ASN1_BMPSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BMPSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_BMPSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_BMPSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_BMPSTRING_it => _ASN1_BMPSTRING_it;

  int UTF8_getc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    ffi.Pointer<ffi.UnsignedLong> val,
  ) {
    return _UTF8_getc(
      str,
      len,
      val,
    );
  }

  late final _UTF8_getcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>)>>('UTF8_getc');
  late final _UTF8_getc = _UTF8_getcPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedLong>)>();

  int UTF8_putc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    int value,
  ) {
    return _UTF8_putc(
      str,
      len,
      value,
    );
  }

  late final _UTF8_putcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.UnsignedLong)>>('UTF8_putc');
  late final _UTF8_putc = _UTF8_putcPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_PRINTABLE_new() {
    return _ASN1_PRINTABLE_new();
  }

  late final _ASN1_PRINTABLE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_PRINTABLE_new');
  late final _ASN1_PRINTABLE_new =
      _ASN1_PRINTABLE_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_PRINTABLE_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_PRINTABLE_free(
      a,
    );
  }

  late final _ASN1_PRINTABLE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_PRINTABLE_free');
  late final _ASN1_PRINTABLE_free = _ASN1_PRINTABLE_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_ASN1_PRINTABLE(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLE');
  late final _d2i_ASN1_PRINTABLE = _d2i_ASN1_PRINTABLEPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_PRINTABLE(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLE');
  late final _i2d_ASN1_PRINTABLE = _i2d_ASN1_PRINTABLEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_PRINTABLE_it =
      _lookup<ASN1_ITEM>('ASN1_PRINTABLE_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_PRINTABLE_it => _ASN1_PRINTABLE_it;

  ffi.Pointer<ASN1_STRING> DIRECTORYSTRING_new() {
    return _DIRECTORYSTRING_new();
  }

  late final _DIRECTORYSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DIRECTORYSTRING_new');
  late final _DIRECTORYSTRING_new =
      _DIRECTORYSTRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DIRECTORYSTRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DIRECTORYSTRING_free(
      a,
    );
  }

  late final _DIRECTORYSTRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DIRECTORYSTRING_free');
  late final _DIRECTORYSTRING_free = _DIRECTORYSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DIRECTORYSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DIRECTORYSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DIRECTORYSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DIRECTORYSTRING');
  late final _d2i_DIRECTORYSTRING = _d2i_DIRECTORYSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DIRECTORYSTRING(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DIRECTORYSTRING(
      a,
      out,
    );
  }

  late final _i2d_DIRECTORYSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_DIRECTORYSTRING');
  late final _i2d_DIRECTORYSTRING = _i2d_DIRECTORYSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _DIRECTORYSTRING_it =
      _lookup<ASN1_ITEM>('DIRECTORYSTRING_it');

  ffi.Pointer<ASN1_ITEM> get DIRECTORYSTRING_it => _DIRECTORYSTRING_it;

  ffi.Pointer<ASN1_STRING> DISPLAYTEXT_new() {
    return _DISPLAYTEXT_new();
  }

  late final _DISPLAYTEXT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DISPLAYTEXT_new');
  late final _DISPLAYTEXT_new =
      _DISPLAYTEXT_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DISPLAYTEXT_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DISPLAYTEXT_free(
      a,
    );
  }

  late final _DISPLAYTEXT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DISPLAYTEXT_free');
  late final _DISPLAYTEXT_free = _DISPLAYTEXT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DISPLAYTEXT(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DISPLAYTEXT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DISPLAYTEXT');
  late final _d2i_DISPLAYTEXT = _d2i_DISPLAYTEXTPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DISPLAYTEXT(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DISPLAYTEXT(
      a,
      out,
    );
  }

  late final _i2d_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DISPLAYTEXT');
  late final _i2d_DISPLAYTEXT = _i2d_DISPLAYTEXTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _DISPLAYTEXT_it =
      _lookup<ASN1_ITEM>('DISPLAYTEXT_it');

  ffi.Pointer<ASN1_ITEM> get DISPLAYTEXT_it => _DISPLAYTEXT_it;

  ffi.Pointer<ASN1_PRINTABLESTRING> ASN1_PRINTABLESTRING_new() {
    return _ASN1_PRINTABLESTRING_new();
  }

  late final _ASN1_PRINTABLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>>(
          'ASN1_PRINTABLESTRING_new');
  late final _ASN1_PRINTABLESTRING_new = _ASN1_PRINTABLESTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>();

  void ASN1_PRINTABLESTRING_free(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
  ) {
    return _ASN1_PRINTABLESTRING_free(
      a,
    );
  }

  late final _ASN1_PRINTABLESTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_PRINTABLESTRING>)>>('ASN1_PRINTABLESTRING_free');
  late final _ASN1_PRINTABLESTRING_free = _ASN1_PRINTABLESTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_PRINTABLESTRING>)>();

  ffi.Pointer<ASN1_PRINTABLESTRING> d2i_ASN1_PRINTABLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLESTRING');
  late final _d2i_ASN1_PRINTABLESTRING =
      _d2i_ASN1_PRINTABLESTRINGPtr.asFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_PRINTABLESTRING(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLESTRING');
  late final _i2d_ASN1_PRINTABLESTRING =
      _i2d_ASN1_PRINTABLESTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_PRINTABLESTRING_it =
      _lookup<ASN1_ITEM>('ASN1_PRINTABLESTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_PRINTABLESTRING_it =>
      _ASN1_PRINTABLESTRING_it;

  ffi.Pointer<ASN1_T61STRING> ASN1_T61STRING_new() {
    return _ASN1_T61STRING_new();
  }

  late final _ASN1_T61STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_T61STRING> Function()>>(
          'ASN1_T61STRING_new');
  late final _ASN1_T61STRING_new = _ASN1_T61STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function()>();

  void ASN1_T61STRING_free(
    ffi.Pointer<ASN1_T61STRING> a,
  ) {
    return _ASN1_T61STRING_free(
      a,
    );
  }

  late final _ASN1_T61STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_T61STRING>)>>(
      'ASN1_T61STRING_free');
  late final _ASN1_T61STRING_free = _ASN1_T61STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_T61STRING>)>();

  ffi.Pointer<ASN1_T61STRING> d2i_ASN1_T61STRING(
    ffi.Pointer<ffi.Pointer<ASN1_T61STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_T61STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_T61STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_T61STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_T61STRING');
  late final _d2i_ASN1_T61STRING = _d2i_ASN1_T61STRINGPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_T61STRING(
    ffi.Pointer<ASN1_T61STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_T61STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_T61STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_T61STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_T61STRING');
  late final _i2d_ASN1_T61STRING = _i2d_ASN1_T61STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_T61STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_T61STRING_it =
      _lookup<ASN1_ITEM>('ASN1_T61STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_T61STRING_it => _ASN1_T61STRING_it;

  ffi.Pointer<ASN1_IA5STRING> ASN1_IA5STRING_new() {
    return _ASN1_IA5STRING_new();
  }

  late final _ASN1_IA5STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_IA5STRING> Function()>>(
          'ASN1_IA5STRING_new');
  late final _ASN1_IA5STRING_new = _ASN1_IA5STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function()>();

  void ASN1_IA5STRING_free(
    ffi.Pointer<ASN1_IA5STRING> a,
  ) {
    return _ASN1_IA5STRING_free(
      a,
    );
  }

  late final _ASN1_IA5STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_IA5STRING>)>>(
      'ASN1_IA5STRING_free');
  late final _ASN1_IA5STRING_free = _ASN1_IA5STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_IA5STRING>)>();

  ffi.Pointer<ASN1_IA5STRING> d2i_ASN1_IA5STRING(
    ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_IA5STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_IA5STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_IA5STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_IA5STRING');
  late final _d2i_ASN1_IA5STRING = _d2i_ASN1_IA5STRINGPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_IA5STRING(
    ffi.Pointer<ASN1_IA5STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_IA5STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_IA5STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_IA5STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_IA5STRING');
  late final _i2d_ASN1_IA5STRING = _i2d_ASN1_IA5STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_IA5STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_IA5STRING_it =
      _lookup<ASN1_ITEM>('ASN1_IA5STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_IA5STRING_it => _ASN1_IA5STRING_it;

  ffi.Pointer<ASN1_GENERALSTRING> ASN1_GENERALSTRING_new() {
    return _ASN1_GENERALSTRING_new();
  }

  late final _ASN1_GENERALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALSTRING> Function()>>(
          'ASN1_GENERALSTRING_new');
  late final _ASN1_GENERALSTRING_new = _ASN1_GENERALSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function()>();

  void ASN1_GENERALSTRING_free(
    ffi.Pointer<ASN1_GENERALSTRING> a,
  ) {
    return _ASN1_GENERALSTRING_free(
      a,
    );
  }

  late final _ASN1_GENERALSTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_GENERALSTRING>)>>('ASN1_GENERALSTRING_free');
  late final _ASN1_GENERALSTRING_free = _ASN1_GENERALSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_GENERALSTRING>)>();

  ffi.Pointer<ASN1_GENERALSTRING> d2i_ASN1_GENERALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALSTRING');
  late final _d2i_ASN1_GENERALSTRING = _d2i_ASN1_GENERALSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_GENERALSTRING(
    ffi.Pointer<ASN1_GENERALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALSTRING');
  late final _i2d_ASN1_GENERALSTRING = _i2d_ASN1_GENERALSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_GENERALSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_GENERALSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_GENERALSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_GENERALSTRING_it => _ASN1_GENERALSTRING_it;

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_new() {
    return _ASN1_UTCTIME_new();
  }

  late final _ASN1_UTCTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTCTIME> Function()>>(
          'ASN1_UTCTIME_new');
  late final _ASN1_UTCTIME_new =
      _ASN1_UTCTIME_newPtr.asFunction<ffi.Pointer<ASN1_UTCTIME> Function()>();

  void ASN1_UTCTIME_free(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_free(
      a,
    );
  }

  late final _ASN1_UTCTIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_free');
  late final _ASN1_UTCTIME_free = _ASN1_UTCTIME_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> d2i_ASN1_UTCTIME(
    ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTCTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTCTIME');
  late final _d2i_ASN1_UTCTIME = _d2i_ASN1_UTCTIMEPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_UTCTIME(
    ffi.Pointer<ASN1_UTCTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTCTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_UTCTIME');
  late final _i2d_ASN1_UTCTIME = _i2d_ASN1_UTCTIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UTCTIME_it =
      _lookup<ASN1_ITEM>('ASN1_UTCTIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UTCTIME_it => _ASN1_UTCTIME_it;

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_new() {
    return _ASN1_GENERALIZEDTIME_new();
  }

  late final _ASN1_GENERALIZEDTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>>(
          'ASN1_GENERALIZEDTIME_new');
  late final _ASN1_GENERALIZEDTIME_new = _ASN1_GENERALIZEDTIME_newPtr
      .asFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>();

  void ASN1_GENERALIZEDTIME_free(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_free(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>)>>('ASN1_GENERALIZEDTIME_free');
  late final _ASN1_GENERALIZEDTIME_free = _ASN1_GENERALIZEDTIME_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> d2i_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALIZEDTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALIZEDTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALIZEDTIME');
  late final _d2i_ASN1_GENERALIZEDTIME =
      _d2i_ASN1_GENERALIZEDTIMEPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALIZEDTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALIZEDTIMEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALIZEDTIME');
  late final _i2d_ASN1_GENERALIZEDTIME =
      _i2d_ASN1_GENERALIZEDTIMEPtr.asFunction<
          int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_GENERALIZEDTIME_it =
      _lookup<ASN1_ITEM>('ASN1_GENERALIZEDTIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_GENERALIZEDTIME_it =>
      _ASN1_GENERALIZEDTIME_it;

  ffi.Pointer<ASN1_TIME> ASN1_TIME_new() {
    return _ASN1_TIME_new();
  }

  late final _ASN1_TIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TIME> Function()>>(
          'ASN1_TIME_new');
  late final _ASN1_TIME_new =
      _ASN1_TIME_newPtr.asFunction<ffi.Pointer<ASN1_TIME> Function()>();

  void ASN1_TIME_free(
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_free(
      a,
    );
  }

  late final _ASN1_TIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_free');
  late final _ASN1_TIME_free =
      _ASN1_TIME_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_TIME> d2i_ASN1_TIME(
    ffi.Pointer<ffi.Pointer<ASN1_TIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TIME');
  late final _d2i_ASN1_TIME = _d2i_ASN1_TIMEPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TIME(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TIME');
  late final _i2d_ASN1_TIME = _i2d_ASN1_TIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_TIME_it =
      _lookup<ASN1_ITEM>('ASN1_TIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_TIME_it => _ASN1_TIME_it;

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OCTET_STRING_NDEF_it =
      _lookup<ASN1_ITEM>('ASN1_OCTET_STRING_NDEF_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OCTET_STRING_NDEF_it =>
      _ASN1_OCTET_STRING_NDEF_it;

  ffi.Pointer<ASN1_TIME> ASN1_TIME_set(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_set(
      s,
      t,
    );
  }

  late final _ASN1_TIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ASN1_TIME>, time_t)>>('ASN1_TIME_set');
  late final _ASN1_TIME_set = _ASN1_TIME_setPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int)>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_adj(
    ffi.Pointer<ASN1_TIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_TIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_TIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_TIME_adj');
  late final _ASN1_TIME_adj = _ASN1_TIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int, int, int)>();

  int ASN1_TIME_check(
    ffi.Pointer<ASN1_TIME> t,
  ) {
    return _ASN1_TIME_check(
      t,
    );
  }

  late final _ASN1_TIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_check');
  late final _ASN1_TIME_check =
      _ASN1_TIME_checkPtr.asFunction<int Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_TIME_to_generalizedtime(
    ffi.Pointer<ASN1_TIME> t,
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> out,
  ) {
    return _ASN1_TIME_to_generalizedtime(
      t,
      out,
    );
  }

  late final _ASN1_TIME_to_generalizedtimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
                  ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>>(
      'ASN1_TIME_to_generalizedtime');
  late final _ASN1_TIME_to_generalizedtime =
      _ASN1_TIME_to_generalizedtimePtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>();

  int ASN1_TIME_set_string(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string');
  late final _ASN1_TIME_set_string = _ASN1_TIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_set_string_X509(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string_X509(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_string_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string_X509');
  late final _ASN1_TIME_set_string_X509 =
      _ASN1_TIME_set_string_X509Ptr.asFunction<
          int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_to_tm(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<tm> tm,
  ) {
    return _ASN1_TIME_to_tm(
      s,
      tm,
    );
  }

  late final _ASN1_TIME_to_tmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>>('ASN1_TIME_to_tm');
  late final _ASN1_TIME_to_tm = _ASN1_TIME_to_tmPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>();

  int ASN1_TIME_normalize(
    ffi.Pointer<ASN1_TIME> s,
  ) {
    return _ASN1_TIME_normalize(
      s,
    );
  }

  late final _ASN1_TIME_normalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_normalize');
  late final _ASN1_TIME_normalize = _ASN1_TIME_normalizePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>)>();

  int ASN1_TIME_cmp_time_t(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_TIME_cmp_time_tPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>, time_t)>>(
      'ASN1_TIME_cmp_time_t');
  late final _ASN1_TIME_cmp_time_t = _ASN1_TIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, int)>();

  int ASN1_TIME_compare(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ASN1_TIME> b,
  ) {
    return _ASN1_TIME_compare(
      a,
      b,
    );
  }

  late final _ASN1_TIME_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_compare');
  late final _ASN1_TIME_compare = _ASN1_TIME_comparePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  int i2a_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Int> a,
  ) {
    return _i2a_ASN1_INTEGER(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>>('i2a_ASN1_INTEGER');
  late final _i2a_ASN1_INTEGER = _i2a_ASN1_INTEGERPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>();

  int a2i_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Int> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_INTEGER(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_INTEGER');
  late final _a2i_ASN1_INTEGER = _a2i_ASN1_INTEGERPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _i2a_ASN1_ENUMERATED(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('i2a_ASN1_ENUMERATED');
  late final _i2a_ASN1_ENUMERATED = _i2a_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int a2i_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_ENUMERATED(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_ENUMERATED');
  late final _a2i_ASN1_ENUMERATED = _a2i_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_OBJECT(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2a_ASN1_OBJECT(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>>('i2a_ASN1_OBJECT');
  late final _i2a_ASN1_OBJECT = _i2a_ASN1_OBJECTPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>();

  int a2i_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_STRING(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_STRING');
  late final _a2i_ASN1_STRING = _a2i_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> a,
    int type,
  ) {
    return _i2a_ASN1_STRING(
      bp,
      a,
      type,
    );
  }

  late final _i2a_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Int)>>('i2a_ASN1_STRING');
  late final _i2a_ASN1_STRING = _i2a_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int i2t_ASN1_OBJECT(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2t_ASN1_OBJECT(
      buf,
      buf_len,
      a,
    );
  }

  late final _i2t_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>)>>('i2t_ASN1_OBJECT');
  late final _i2t_ASN1_OBJECT = _i2t_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>)>();

  int a2d_ASN1_OBJECT(
    ffi.Pointer<ffi.UnsignedChar> out,
    int olen,
    ffi.Pointer<ffi.Char> buf,
    int num,
  ) {
    return _a2d_ASN1_OBJECT(
      out,
      olen,
      buf,
      num,
    );
  }

  late final _a2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2d_ASN1_OBJECT');
  late final _a2d_ASN1_OBJECT = _a2d_ASN1_OBJECTPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_create(
    int nid,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _ASN1_OBJECT_create(
      nid,
      data,
      len,
      sn,
      ln,
    );
  }

  late final _ASN1_OBJECT_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ASN1_OBJECT_create');
  late final _ASN1_OBJECT_create = _ASN1_OBJECT_createPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int ASN1_INTEGER_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ffi.Int> a,
  ) {
    return _ASN1_INTEGER_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int>)>>('ASN1_INTEGER_get_int64');
  late final _ASN1_INTEGER_get_int64 = _ASN1_INTEGER_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int>)>();

  int ASN1_INTEGER_set_int64(
    ffi.Pointer<ffi.Int> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Int64)>>('ASN1_INTEGER_set_int64');
  late final _ASN1_INTEGER_set_int64 = _ASN1_INTEGER_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int)>();

  int ASN1_INTEGER_get_uint64(
    ffi.Pointer<ffi.Uint64> pr,
    ffi.Pointer<ffi.Int> a,
  ) {
    return _ASN1_INTEGER_get_uint64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Int>)>>('ASN1_INTEGER_get_uint64');
  late final _ASN1_INTEGER_get_uint64 = _ASN1_INTEGER_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Int>)>();

  int ASN1_INTEGER_set_uint64(
    ffi.Pointer<ffi.Int> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_uint64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Uint64)>>('ASN1_INTEGER_set_uint64');
  late final _ASN1_INTEGER_set_uint64 = _ASN1_INTEGER_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int)>();

  int ASN1_INTEGER_set(
    ffi.Pointer<ffi.Int> a,
    int v,
  ) {
    return _ASN1_INTEGER_set(
      a,
      v,
    );
  }

  late final _ASN1_INTEGER_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Long)>>(
      'ASN1_INTEGER_set');
  late final _ASN1_INTEGER_set = _ASN1_INTEGER_setPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int)>();

  int ASN1_INTEGER_get(
    ffi.Pointer<ffi.Int> a,
  ) {
    return _ASN1_INTEGER_get(
      a,
    );
  }

  late final _ASN1_INTEGER_getPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Int>)>>(
          'ASN1_INTEGER_get');
  late final _ASN1_INTEGER_get =
      _ASN1_INTEGER_getPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> BN_to_ASN1_INTEGER(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ffi.Int> ai,
  ) {
    return _BN_to_ASN1_INTEGER(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>)>>('BN_to_ASN1_INTEGER');
  late final _BN_to_ASN1_INTEGER = _BN_to_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<BIGNUM> ASN1_INTEGER_to_BN(
    ffi.Pointer<ffi.Int> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_INTEGER_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_INTEGER_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<BIGNUM>)>>('ASN1_INTEGER_to_BN');
  late final _ASN1_INTEGER_to_BN = _ASN1_INTEGER_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>();

  int ASN1_ENUMERATED_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_ENUMERATED_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('ASN1_ENUMERATED_get_int64');
  late final _ASN1_ENUMERATED_get_int64 =
      _ASN1_ENUMERATED_get_int64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int ASN1_ENUMERATED_set_int64(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int r,
  ) {
    return _ASN1_ENUMERATED_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_ENUMERATED_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Int64)>>('ASN1_ENUMERATED_set_int64');
  late final _ASN1_ENUMERATED_set_int64 = _ASN1_ENUMERATED_set_int64Ptr
      .asFunction<int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_set(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int v,
  ) {
    return _ASN1_ENUMERATED_set(
      a,
      v,
    );
  }

  late final _ASN1_ENUMERATED_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ENUMERATED>, ffi.Long)>>('ASN1_ENUMERATED_set');
  late final _ASN1_ENUMERATED_set = _ASN1_ENUMERATED_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_get(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get(
      a,
    );
  }

  late final _ASN1_ENUMERATED_getPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_get');
  late final _ASN1_ENUMERATED_get = _ASN1_ENUMERATED_getPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> BN_to_ASN1_ENUMERATED(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_ENUMERATED> ai,
  ) {
    return _BN_to_ASN1_ENUMERATED(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('BN_to_ASN1_ENUMERATED');
  late final _BN_to_ASN1_ENUMERATED = _BN_to_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<BIGNUM> ASN1_ENUMERATED_to_BN(
    ffi.Pointer<ASN1_ENUMERATED> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_ENUMERATED_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_ENUMERATED_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<BIGNUM>)>>('ASN1_ENUMERATED_to_BN');
  late final _ASN1_ENUMERATED_to_BN = _ASN1_ENUMERATED_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ASN1_ENUMERATED>, ffi.Pointer<BIGNUM>)>();

  int ASN1_PRINTABLE_type(
    ffi.Pointer<ffi.UnsignedChar> s,
    int max,
  ) {
    return _ASN1_PRINTABLE_type(
      s,
      max,
    );
  }

  late final _ASN1_PRINTABLE_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_PRINTABLE_type');
  late final _ASN1_PRINTABLE_type = _ASN1_PRINTABLE_typePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_tag2bit(
    int tag,
  ) {
    return _ASN1_tag2bit(
      tag,
    );
  }

  late final _ASN1_tag2bitPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Int)>>(
          'ASN1_tag2bit');
  late final _ASN1_tag2bit = _ASN1_tag2bitPtr.asFunction<int Function(int)>();

  int ASN1_get_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    ffi.Pointer<ffi.Long> plength,
    ffi.Pointer<ffi.Int> ptag,
    ffi.Pointer<ffi.Int> pclass,
    int omax,
  ) {
    return _ASN1_get_object(
      pp,
      plength,
      ptag,
      pclass,
      omax,
    );
  }

  late final _ASN1_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Long)>>('ASN1_get_object');
  late final _ASN1_get_object = _ASN1_get_objectPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int ASN1_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_check_infinite_end');
  late final _ASN1_check_infinite_end = _ASN1_check_infinite_endPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int ASN1_const_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_const_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_const_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_const_check_infinite_end');
  late final _ASN1_const_check_infinite_end =
      _ASN1_const_check_infinite_endPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  void ASN1_put_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int constructed,
    int length,
    int tag,
    int xclass,
  ) {
    return _ASN1_put_object(
      pp,
      constructed,
      length,
      tag,
      xclass,
    );
  }

  late final _ASN1_put_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ASN1_put_object');
  late final _ASN1_put_object = _ASN1_put_objectPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int, int, int, int)>();

  int ASN1_put_eoc(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _ASN1_put_eoc(
      pp,
    );
  }

  late final _ASN1_put_eocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('ASN1_put_eoc');
  late final _ASN1_put_eoc = _ASN1_put_eocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ASN1_object_size(
    int constructed,
    int length,
    int tag,
  ) {
    return _ASN1_object_size(
      constructed,
      length,
      tag,
    );
  }

  late final _ASN1_object_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'ASN1_object_size');
  late final _ASN1_object_size =
      _ASN1_object_sizePtr.asFunction<int Function(int, int, int)>();

  ffi.Pointer<ffi.Void> ASN1_dup(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_dup(
      i2d,
      d2i,
      x,
    );
  }

  late final _ASN1_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
              ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>>('ASN1_dup');
  late final _ASN1_dup = _ASN1_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
          ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_item_dup(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_dup(
      it,
      x,
    );
  }

  late final _ASN1_item_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>>('ASN1_item_dup');
  late final _ASN1_item_dup = _ASN1_item_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_fp(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_fp(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_fp');
  late final _ASN1_d2i_fp = _ASN1_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_d2i_fp(
      it,
      in1,
      x,
    );
  }

  late final _ASN1_item_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_fp');
  late final _ASN1_item_d2i_fp = _ASN1_item_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_fp(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_i2d_fp(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_i2d_fp');
  late final _ASN1_i2d_fp = _ASN1_i2d_fpPtr.asFunction<
      int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Void>)>();

  int ASN1_item_i2d_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_fp(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_fp');
  late final _ASN1_item_i2d_fp = _ASN1_item_i2d_fpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_STRING_print_ex_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex_fp(
      fp,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_ex_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex_fp');
  late final _ASN1_STRING_print_ex_fp = _ASN1_STRING_print_ex_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_to_UTF8(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_STRING> in1,
  ) {
    return _ASN1_STRING_to_UTF8(
      out,
      in1,
    );
  }

  late final _ASN1_STRING_to_UTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_to_UTF8');
  late final _ASN1_STRING_to_UTF8 = _ASN1_STRING_to_UTF8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_bio(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_bio(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_bio');
  late final _ASN1_d2i_bio = _ASN1_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_d2i_bio(
      it,
      in1,
      x,
    );
  }

  late final _ASN1_item_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_bio');
  late final _ASN1_item_d2i_bio = _ASN1_item_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_bio(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.UnsignedChar> x,
  ) {
    return _ASN1_i2d_bio(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.UnsignedChar>)>>('ASN1_i2d_bio');
  late final _ASN1_i2d_bio = _ASN1_i2d_bioPtr.asFunction<
      int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int ASN1_item_i2d_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_bio(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_bio');
  late final _ASN1_item_i2d_bio = _ASN1_item_i2d_bioPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_UTCTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_UTCTIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_UTCTIME>)>>('ASN1_UTCTIME_print');
  late final _ASN1_UTCTIME_print = _ASN1_UTCTIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_UTCTIME>)>();

  int ASN1_GENERALIZEDTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_printPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_print');
  late final _ASN1_GENERALIZEDTIME_print =
      _ASN1_GENERALIZEDTIME_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  int ASN1_TIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_TIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_print');
  late final _ASN1_TIME_print = _ASN1_TIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>();

  int ASN1_STRING_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> v,
  ) {
    return _ASN1_STRING_print(
      bp,
      v,
    );
  }

  late final _ASN1_STRING_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_print');
  late final _ASN1_STRING_print = _ASN1_STRING_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_print_ex(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex(
      out,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex');
  late final _ASN1_STRING_print_ex = _ASN1_STRING_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_buf_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
    int off,
  ) {
    return _ASN1_buf_print(
      bp,
      buf,
      buflen,
      off,
    );
  }

  late final _ASN1_buf_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Int)>>('ASN1_buf_print');
  late final _ASN1_buf_print = _ASN1_buf_printPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_bn_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> number,
    ffi.Pointer<BIGNUM> num,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int off,
  ) {
    return _ASN1_bn_print(
      bp,
      number,
      num,
      buf,
      off,
    );
  }

  late final _ASN1_bn_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_bn_print');
  late final _ASN1_bn_print = _ASN1_bn_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_parse(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
  ) {
    return _ASN1_parse(
      bp,
      pp,
      len,
      indent,
    );
  }

  late final _ASN1_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int)>>('ASN1_parse');
  late final _ASN1_parse = _ASN1_parsePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_parse_dump(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
    int dump,
  ) {
    return _ASN1_parse_dump(
      bp,
      pp,
      len,
      indent,
      dump,
    );
  }

  late final _ASN1_parse_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int, ffi.Int)>>('ASN1_parse_dump');
  late final _ASN1_parse_dump = _ASN1_parse_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ffi.Char> ASN1_tag2str(
    int tag,
  ) {
    return _ASN1_tag2str(
      tag,
    );
  }

  late final _ASN1_tag2strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ASN1_tag2str');
  late final _ASN1_tag2str =
      _ASN1_tag2strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ASN1_UNIVERSALSTRING_to_string(
    ffi.Pointer<ASN1_UNIVERSALSTRING> s,
  ) {
    return _ASN1_UNIVERSALSTRING_to_string(
      s,
    );
  }

  late final _ASN1_UNIVERSALSTRING_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>>(
      'ASN1_UNIVERSALSTRING_to_string');
  late final _ASN1_UNIVERSALSTRING_to_string =
      _ASN1_UNIVERSALSTRING_to_stringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  int ASN1_TYPE_set_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_octetstring(
      a,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_octetstring');
  late final _ASN1_TYPE_set_octetstring =
      _ASN1_TYPE_set_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_octetstring(
      a,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_octetstring');
  late final _ASN1_TYPE_get_octetstring =
      _ASN1_TYPE_get_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_set_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    int num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_int_octetstring(
      a,
      num,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Long,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_int_octetstring');
  late final _ASN1_TYPE_set_int_octetstring =
      _ASN1_TYPE_set_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Long> num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_int_octetstring(
      a,
      num,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_int_octetstring');
  late final _ASN1_TYPE_get_int_octetstring =
      _ASN1_TYPE_get_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Void> ASN1_item_unpack(
    ffi.Pointer<ASN1_STRING> oct,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_unpack(
      oct,
      it,
    );
  }

  late final _ASN1_item_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_unpack');
  late final _ASN1_item_unpack = _ASN1_item_unpackPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_STRING> ASN1_item_pack(
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> oct,
  ) {
    return _ASN1_item_pack(
      obj,
      it,
      oct,
    );
  }

  late final _ASN1_item_packPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>>('ASN1_item_pack');
  late final _ASN1_item_pack = _ASN1_item_packPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>();

  void ASN1_STRING_set_default_mask(
    int mask,
  ) {
    return _ASN1_STRING_set_default_mask(
      mask,
    );
  }

  late final _ASN1_STRING_set_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'ASN1_STRING_set_default_mask');
  late final _ASN1_STRING_set_default_mask =
      _ASN1_STRING_set_default_maskPtr.asFunction<void Function(int)>();

  int ASN1_STRING_set_default_mask_asc(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _ASN1_STRING_set_default_mask_asc(
      p,
    );
  }

  late final _ASN1_STRING_set_default_mask_ascPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ASN1_STRING_set_default_mask_asc');
  late final _ASN1_STRING_set_default_mask_asc =
      _ASN1_STRING_set_default_mask_ascPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  int ASN1_STRING_get_default_mask() {
    return _ASN1_STRING_get_default_mask();
  }

  late final _ASN1_STRING_get_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'ASN1_STRING_get_default_mask');
  late final _ASN1_STRING_get_default_mask =
      _ASN1_STRING_get_default_maskPtr.asFunction<int Function()>();

  int ASN1_mbstring_copy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
  ) {
    return _ASN1_mbstring_copy(
      out,
      in1,
      len,
      inform,
      mask,
    );
  }

  late final _ASN1_mbstring_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong)>>('ASN1_mbstring_copy');
  late final _ASN1_mbstring_copy = _ASN1_mbstring_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int ASN1_mbstring_ncopy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
    int minsize,
    int maxsize,
  ) {
    return _ASN1_mbstring_ncopy(
      out,
      in1,
      len,
      inform,
      mask,
      minsize,
      maxsize,
    );
  }

  late final _ASN1_mbstring_ncopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong,
              ffi.Long,
              ffi.Long)>>('ASN1_mbstring_ncopy');
  late final _ASN1_mbstring_ncopy = _ASN1_mbstring_ncopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_set_by_NID(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
    int inform,
    int nid,
  ) {
    return _ASN1_STRING_set_by_NID(
      out,
      in1,
      inlen,
      inform,
      nid,
    );
  }

  late final _ASN1_STRING_set_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ASN1_STRING_set_by_NID');
  late final _ASN1_STRING_set_by_NID = _ASN1_STRING_set_by_NIDPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ASN1_STRING_TABLE> ASN1_STRING_TABLE_get(
    int nid,
  ) {
    return _ASN1_STRING_TABLE_get(
      nid,
    );
  }

  late final _ASN1_STRING_TABLE_getPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ASN1_STRING_TABLE> Function(ffi.Int)>>(
      'ASN1_STRING_TABLE_get');
  late final _ASN1_STRING_TABLE_get = _ASN1_STRING_TABLE_getPtr.asFunction<
      ffi.Pointer<ASN1_STRING_TABLE> Function(int)>();

  int ASN1_STRING_TABLE_add(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _ASN1_STRING_TABLE_add(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ASN1_STRING_TABLE_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Long, ffi.Long, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('ASN1_STRING_TABLE_add');
  late final _ASN1_STRING_TABLE_add = _ASN1_STRING_TABLE_addPtr.asFunction<
      int Function(int, int, int, int, int)>();

  void ASN1_STRING_TABLE_cleanup() {
    return _ASN1_STRING_TABLE_cleanup();
  }

  late final _ASN1_STRING_TABLE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_STRING_TABLE_cleanup');
  late final _ASN1_STRING_TABLE_cleanup =
      _ASN1_STRING_TABLE_cleanupPtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_new(
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_new(
      it,
    );
  }

  late final _ASN1_item_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_new');
  late final _ASN1_item_new = _ASN1_item_newPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<ASN1_ITEM>)>();

  void ASN1_item_free(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_free(
      val,
      it,
    );
  }

  late final _ASN1_item_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_free');
  late final _ASN1_item_free = _ASN1_item_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_d2i(
    ffi.Pointer<ffi.Pointer<ASN1_VALUE>> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_d2i(
      val,
      in1,
      len,
      it,
    );
  }

  late final _ASN1_item_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_d2i');
  late final _ASN1_item_d2i = _ASN1_item_d2iPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_i2d');
  late final _ASN1_item_i2d = _ASN1_item_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_ndef_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_ndef_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_ndef_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_ndef_i2d');
  late final _ASN1_item_ndef_i2d = _ASN1_item_ndef_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  void ASN1_add_oid_module() {
    return _ASN1_add_oid_module();
  }

  late final _ASN1_add_oid_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ASN1_add_oid_module');
  late final _ASN1_add_oid_module =
      _ASN1_add_oid_modulePtr.asFunction<void Function()>();

  void ASN1_add_stable_module() {
    return _ASN1_add_stable_module();
  }

  late final _ASN1_add_stable_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_add_stable_module');
  late final _ASN1_add_stable_module =
      _ASN1_add_stable_modulePtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_nconf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<CONF> nconf,
  ) {
    return _ASN1_generate_nconf(
      str,
      nconf,
    );
  }

  late final _ASN1_generate_nconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<CONF>)>>('ASN1_generate_nconf');
  late final _ASN1_generate_nconf = _ASN1_generate_nconfPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<CONF>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_v3(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<X509V3_CTX> cnf,
  ) {
    return _ASN1_generate_v3(
      str,
      cnf,
    );
  }

  late final _ASN1_generate_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<X509V3_CTX>)>>('ASN1_generate_v3');
  late final _ASN1_generate_v3 = _ASN1_generate_v3Ptr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<X509V3_CTX>)>();

  int ASN1_str2mask(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedLong> pmask,
  ) {
    return _ASN1_str2mask(
      str,
      pmask,
    );
  }

  late final _ASN1_str2maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>)>>('ASN1_str2mask');
  late final _ASN1_str2mask = _ASN1_str2maskPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedLong>)>();

  int ASN1_item_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> ifld,
    int indent,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _ASN1_item_print(
      out,
      ifld,
      indent,
      it,
      pctx,
    );
  }

  late final _ASN1_item_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_item_print');
  late final _ASN1_item_print = _ASN1_item_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, int,
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_PCTX>)>();

  ffi.Pointer<ASN1_PCTX> ASN1_PCTX_new() {
    return _ASN1_PCTX_new();
  }

  late final _ASN1_PCTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PCTX> Function()>>(
          'ASN1_PCTX_new');
  late final _ASN1_PCTX_new =
      _ASN1_PCTX_newPtr.asFunction<ffi.Pointer<ASN1_PCTX> Function()>();

  void ASN1_PCTX_free(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_free(
      p,
    );
  }

  late final _ASN1_PCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_PCTX>)>>(
          'ASN1_PCTX_free');
  late final _ASN1_PCTX_free =
      _ASN1_PCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_PCTX>)>();

  int ASN1_PCTX_get_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_flags');
  late final _ASN1_PCTX_get_flags = _ASN1_PCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_flags');
  late final _ASN1_PCTX_set_flags = _ASN1_PCTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_nm_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_nm_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_nm_flags');
  late final _ASN1_PCTX_get_nm_flags = _ASN1_PCTX_get_nm_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_nm_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_nm_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_nm_flags');
  late final _ASN1_PCTX_set_nm_flags = _ASN1_PCTX_set_nm_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_cert_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_cert_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_cert_flags');
  late final _ASN1_PCTX_get_cert_flags = _ASN1_PCTX_get_cert_flagsPtr
      .asFunction<int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_cert_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_cert_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_cert_flags');
  late final _ASN1_PCTX_set_cert_flags = _ASN1_PCTX_set_cert_flagsPtr
      .asFunction<void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_oid_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_oid_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_oid_flags');
  late final _ASN1_PCTX_get_oid_flags = _ASN1_PCTX_get_oid_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_oid_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_oid_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_oid_flags');
  late final _ASN1_PCTX_set_oid_flags = _ASN1_PCTX_set_oid_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_str_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_str_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_str_flags');
  late final _ASN1_PCTX_get_str_flags = _ASN1_PCTX_get_str_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_str_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_str_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_str_flags');
  late final _ASN1_PCTX_set_str_flags = _ASN1_PCTX_set_str_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  ffi.Pointer<ASN1_SCTX> ASN1_SCTX_new(
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_SCTX> ctx)>>
        scan_cb,
  ) {
    return _ASN1_SCTX_new(
      scan_cb,
    );
  }

  late final _ASN1_SCTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SCTX> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ASN1_SCTX> ctx)>>)>>('ASN1_SCTX_new');
  late final _ASN1_SCTX_new = _ASN1_SCTX_newPtr.asFunction<
      ffi.Pointer<ASN1_SCTX> Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ASN1_SCTX> ctx)>>)>();

  void ASN1_SCTX_free(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_free(
      p,
    );
  }

  late final _ASN1_SCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_SCTX>)>>(
          'ASN1_SCTX_free');
  late final _ASN1_SCTX_free =
      _ASN1_SCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_SCTX_get_item(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_item(
      p,
    );
  }

  late final _ASN1_SCTX_get_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_item');
  late final _ASN1_SCTX_get_item = _ASN1_SCTX_get_itemPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_TEMPLATE> ASN1_SCTX_get_template(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_template(
      p,
    );
  }

  late final _ASN1_SCTX_get_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TEMPLATE> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_template');
  late final _ASN1_SCTX_get_template = _ASN1_SCTX_get_templatePtr.asFunction<
      ffi.Pointer<ASN1_TEMPLATE> Function(ffi.Pointer<ASN1_SCTX>)>();

  int ASN1_SCTX_get_flags(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_flags(
      p,
    );
  }

  late final _ASN1_SCTX_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_flags');
  late final _ASN1_SCTX_get_flags = _ASN1_SCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SCTX>)>();

  void ASN1_SCTX_set_app_data(
    ffi.Pointer<ASN1_SCTX> p,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ASN1_SCTX_set_app_data(
      p,
      data,
    );
  }

  late final _ASN1_SCTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_SCTX>,
              ffi.Pointer<ffi.Void>)>>('ASN1_SCTX_set_app_data');
  late final _ASN1_SCTX_set_app_data = _ASN1_SCTX_set_app_dataPtr.asFunction<
      void Function(ffi.Pointer<ASN1_SCTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_SCTX_get_app_data(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_app_data(
      p,
    );
  }

  late final _ASN1_SCTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_app_data');
  late final _ASN1_SCTX_get_app_data = _ASN1_SCTX_get_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<BIO_METHOD> BIO_f_asn1() {
    return _BIO_f_asn1();
  }

  late final _BIO_f_asn1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_asn1');
  late final _BIO_f_asn1 =
      _BIO_f_asn1Ptr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_NDEF(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _BIO_new_NDEF(
      out,
      val,
      it,
    );
  }

  late final _BIO_new_NDEFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('BIO_new_NDEF');
  late final _BIO_new_NDEF = _BIO_new_NDEFPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  int i2d_ASN1_bio_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _i2d_ASN1_bio_stream(
      out,
      val,
      in1,
      flags,
      it,
    );
  }

  late final _i2d_ASN1_bio_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>)>>('i2d_ASN1_bio_stream');
  late final _i2d_ASN1_bio_stream = _i2d_ASN1_bio_streamPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<BIO>,
          int, ffi.Pointer<ASN1_ITEM>)>();

  int PEM_write_bio_ASN1_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ffi.Char> hdr,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _PEM_write_bio_ASN1_stream(
      out,
      val,
      in1,
      flags,
      hdr,
      it,
    );
  }

  late final _PEM_write_bio_ASN1_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>>('PEM_write_bio_ASN1_stream');
  late final _PEM_write_bio_ASN1_stream =
      _PEM_write_bio_ASN1_streamPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_write_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> data,
    int flags,
    int ctype_nid,
    int econt_nid,
    ffi.Pointer<stack_st_X509_ALGOR> mdalgs,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_write_ASN1(
      bio,
      val,
      data,
      flags,
      ctype_nid,
      econt_nid,
      mdalgs,
      it,
    );
  }

  late final _SMIME_write_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<stack_st_X509_ALGOR>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_write_ASN1');
  late final _SMIME_write_ASN1 = _SMIME_write_ASN1Ptr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<BIO>,
          int,
          int,
          int,
          ffi.Pointer<stack_st_X509_ALGOR>,
          ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> SMIME_read_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<BIO>> bcont,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_read_ASN1(
      bio,
      bcont,
      it,
    );
  }

  late final _SMIME_read_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_read_ASN1');
  late final _SMIME_read_ASN1 = _SMIME_read_ASN1Ptr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<BIO>>, ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_crlf_copy(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
    int flags,
  ) {
    return _SMIME_crlf_copy(
      in1,
      out,
      flags,
    );
  }

  late final _SMIME_crlf_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>, ffi.Int)>>('SMIME_crlf_copy');
  late final _SMIME_crlf_copy = _SMIME_crlf_copyPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>, int)>();

  int SMIME_text(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
  ) {
    return _SMIME_text(
      in1,
      out,
    );
  }

  late final _SMIME_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('SMIME_text');
  late final _SMIME_text = _SMIME_textPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_lookup(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ASN1_ITEM_lookup(
      name,
    );
  }

  late final _ASN1_ITEM_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ffi.Char>)>>('ASN1_ITEM_lookup');
  late final _ASN1_ITEM_lookup = _ASN1_ITEM_lookupPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_get(
    int i,
  ) {
    return _ASN1_ITEM_get(
      i,
    );
  }

  late final _ASN1_ITEM_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function(ffi.Size)>>(
          'ASN1_ITEM_get');
  late final _ASN1_ITEM_get =
      _ASN1_ITEM_getPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function(int)>();

  int ERR_load_OBJ_strings() {
    return _ERR_load_OBJ_strings();
  }

  late final _ERR_load_OBJ_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OBJ_strings');
  late final _ERR_load_OBJ_strings =
      _ERR_load_OBJ_stringsPtr.asFunction<int Function()>();

  int OBJ_NAME_init() {
    return _OBJ_NAME_init();
  }

  late final _OBJ_NAME_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OBJ_NAME_init');
  late final _OBJ_NAME_init = _OBJ_NAME_initPtr.asFunction<int Function()>();

  int OBJ_NAME_new_index(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>
        hash_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
        cmp_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>
        free_func,
  ) {
    return _OBJ_NAME_new_index(
      hash_func,
      cmp_func,
      free_func,
    );
  }

  late final _OBJ_NAME_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                          ffi.Pointer<ffi.Char>)>>)>>('OBJ_NAME_new_index');
  late final _OBJ_NAME_new_index = _OBJ_NAME_new_indexPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                      ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<ffi.Char> OBJ_NAME_get(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_get(
      name,
      type,
    );
  }

  late final _OBJ_NAME_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_NAME_get');
  late final _OBJ_NAME_get = _OBJ_NAME_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_NAME_add(
    ffi.Pointer<ffi.Char> name,
    int type,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _OBJ_NAME_add(
      name,
      type,
      data,
    );
  }

  late final _OBJ_NAME_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('OBJ_NAME_add');
  late final _OBJ_NAME_add = _OBJ_NAME_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int OBJ_NAME_remove(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_remove(
      name,
      type,
    );
  }

  late final _OBJ_NAME_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'OBJ_NAME_remove');
  late final _OBJ_NAME_remove = _OBJ_NAME_removePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  void OBJ_NAME_cleanup(
    int type,
  ) {
    return _OBJ_NAME_cleanup(
      type,
    );
  }

  late final _OBJ_NAME_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'OBJ_NAME_cleanup');
  late final _OBJ_NAME_cleanup =
      _OBJ_NAME_cleanupPtr.asFunction<void Function(int)>();

  void OBJ_NAME_do_all(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all');
  late final _OBJ_NAME_do_all = _OBJ_NAME_do_allPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void OBJ_NAME_do_all_sorted(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all_sorted(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all_sorted');
  late final _OBJ_NAME_do_all_sorted = _OBJ_NAME_do_all_sortedPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_dup(
    ffi.Pointer<ASN1_OBJECT> o,
  ) {
    return _OBJ_dup(
      o,
    );
  }

  late final _OBJ_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_dup');
  late final _OBJ_dup = _OBJ_dupPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_nid2obj(
    int n,
  ) {
    return _OBJ_nid2obj(
      n,
    );
  }

  late final _OBJ_nid2objPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function(ffi.Int)>>(
          'OBJ_nid2obj');
  late final _OBJ_nid2obj =
      _OBJ_nid2objPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2ln(
    int n,
  ) {
    return _OBJ_nid2ln(
      n,
    );
  }

  late final _OBJ_nid2lnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2ln');
  late final _OBJ_nid2ln =
      _OBJ_nid2lnPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2sn(
    int n,
  ) {
    return _OBJ_nid2sn(
      n,
    );
  }

  late final _OBJ_nid2snPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2sn');
  late final _OBJ_nid2sn =
      _OBJ_nid2snPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OBJ_obj2nid(
    ffi.Pointer<ASN1_OBJECT> o,
  ) {
    return _OBJ_obj2nid(
      o,
    );
  }

  late final _OBJ_obj2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_obj2nid');
  late final _OBJ_obj2nid =
      _OBJ_obj2nidPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_txt2obj(
    ffi.Pointer<ffi.Char> s,
    int no_name,
  ) {
    return _OBJ_txt2obj(
      s,
      no_name,
    );
  }

  late final _OBJ_txt2objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_txt2obj');
  late final _OBJ_txt2obj = _OBJ_txt2objPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_obj2txt(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
    int no_name,
  ) {
    return _OBJ_obj2txt(
      buf,
      buf_len,
      a,
      no_name,
    );
  }

  late final _OBJ_obj2txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>, ffi.Int)>>('OBJ_obj2txt');
  late final _OBJ_obj2txt = _OBJ_obj2txtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>, int)>();

  int OBJ_txt2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_txt2nid(
      s,
    );
  }

  late final _OBJ_txt2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_txt2nid');
  late final _OBJ_txt2nid =
      _OBJ_txt2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_ln2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_ln2nid(
      s,
    );
  }

  late final _OBJ_ln2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_ln2nid');
  late final _OBJ_ln2nid =
      _OBJ_ln2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_sn2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_sn2nid(
      s,
    );
  }

  late final _OBJ_sn2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_sn2nid');
  late final _OBJ_sn2nid =
      _OBJ_sn2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_cmp(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ASN1_OBJECT> b,
  ) {
    return _OBJ_cmp(
      a,
      b,
    );
  }

  late final _OBJ_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>>('OBJ_cmp');
  late final _OBJ_cmp = _OBJ_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
  ) {
    return _OBJ_bsearch_(
      key,
      base,
      num,
      size,
      cmp,
    );
  }

  late final _OBJ_bsearch_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('OBJ_bsearch_');
  late final _OBJ_bsearch_ = _OBJ_bsearch_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_ex_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
    int flags,
  ) {
    return _OBJ_bsearch_ex_(
      key,
      base,
      num,
      size,
      cmp,
      flags,
    );
  }

  late final _OBJ_bsearch_ex_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Int)>>('OBJ_bsearch_ex_');
  late final _OBJ_bsearch_ex_ = _OBJ_bsearch_ex_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
          int)>();

  int OBJ_new_nid(
    int num,
  ) {
    return _OBJ_new_nid(
      num,
    );
  }

  late final _OBJ_new_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OBJ_new_nid');
  late final _OBJ_new_nid = _OBJ_new_nidPtr.asFunction<int Function(int)>();

  int OBJ_add_object(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_add_object(
      obj,
    );
  }

  late final _OBJ_add_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_add_object');
  late final _OBJ_add_object =
      _OBJ_add_objectPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_create(
    ffi.Pointer<ffi.Char> oid,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _OBJ_create(
      oid,
      sn,
      ln,
    );
  }

  late final _OBJ_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('OBJ_create');
  late final _OBJ_create = _OBJ_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int OBJ_create_objects(
    ffi.Pointer<BIO> in1,
  ) {
    return _OBJ_create_objects(
      in1,
    );
  }

  late final _OBJ_create_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'OBJ_create_objects');
  late final _OBJ_create_objects =
      _OBJ_create_objectsPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int OBJ_length(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_length(
      obj,
    );
  }

  late final _OBJ_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_length');
  late final _OBJ_length =
      _OBJ_lengthPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.UnsignedChar> OBJ_get0_data(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_get0_data(
      obj,
    );
  }

  late final _OBJ_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_get0_data');
  late final _OBJ_get0_data = _OBJ_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_find_sigid_algs(
    int signid,
    ffi.Pointer<ffi.Int> pdig_nid,
    ffi.Pointer<ffi.Int> ppkey_nid,
  ) {
    return _OBJ_find_sigid_algs(
      signid,
      pdig_nid,
      ppkey_nid,
    );
  }

  late final _OBJ_find_sigid_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('OBJ_find_sigid_algs');
  late final _OBJ_find_sigid_algs = _OBJ_find_sigid_algsPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int OBJ_find_sigid_by_algs(
    ffi.Pointer<ffi.Int> psignid,
    int dig_nid,
    int pkey_nid,
  ) {
    return _OBJ_find_sigid_by_algs(
      psignid,
      dig_nid,
      pkey_nid,
    );
  }

  late final _OBJ_find_sigid_by_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Int)>>('OBJ_find_sigid_by_algs');
  late final _OBJ_find_sigid_by_algs = _OBJ_find_sigid_by_algsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, int)>();

  int OBJ_add_sigid(
    int signid,
    int dig_id,
    int pkey_id,
  ) {
    return _OBJ_add_sigid(
      signid,
      dig_id,
      pkey_id,
    );
  }

  late final _OBJ_add_sigidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'OBJ_add_sigid');
  late final _OBJ_add_sigid =
      _OBJ_add_sigidPtr.asFunction<int Function(int, int, int)>();

  void OBJ_sigid_free() {
    return _OBJ_sigid_free();
  }

  late final _OBJ_sigid_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OBJ_sigid_free');
  late final _OBJ_sigid_free = _OBJ_sigid_freePtr.asFunction<void Function()>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_new(
    int md_type,
    int pkey_type,
  ) {
    return _EVP_MD_meth_new(
      md_type,
      pkey_type,
    );
  }

  late final _EVP_MD_meth_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Int, ffi.Int)>>(
      'EVP_MD_meth_new');
  late final _EVP_MD_meth_new =
      _EVP_MD_meth_newPtr.asFunction<ffi.Pointer<EVP_MD> Function(int, int)>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_dup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_dup(
      md,
    );
  }

  late final _EVP_MD_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_dup');
  late final _EVP_MD_meth_dup = _EVP_MD_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD>)>();

  void EVP_MD_meth_free(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_free(
      md,
    );
  }

  late final _EVP_MD_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_free');
  late final _EVP_MD_meth_free =
      _EVP_MD_meth_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_set_input_blocksize(
    ffi.Pointer<EVP_MD> md,
    int blocksize,
  ) {
    return _EVP_MD_meth_set_input_blocksize(
      md,
      blocksize,
    );
  }

  late final _EVP_MD_meth_set_input_blocksizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_input_blocksize');
  late final _EVP_MD_meth_set_input_blocksize =
      _EVP_MD_meth_set_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_result_size(
    ffi.Pointer<EVP_MD> md,
    int resultsize,
  ) {
    return _EVP_MD_meth_set_result_size(
      md,
      resultsize,
    );
  }

  late final _EVP_MD_meth_set_result_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_result_size');
  late final _EVP_MD_meth_set_result_size = _EVP_MD_meth_set_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_app_datasize(
    ffi.Pointer<EVP_MD> md,
    int datasize,
  ) {
    return _EVP_MD_meth_set_app_datasize(
      md,
      datasize,
    );
  }

  late final _EVP_MD_meth_set_app_datasizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_app_datasize');
  late final _EVP_MD_meth_set_app_datasize = _EVP_MD_meth_set_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_flags(
    ffi.Pointer<EVP_MD> md,
    int flags,
  ) {
    return _EVP_MD_meth_set_flags(
      md,
      flags,
    );
  }

  late final _EVP_MD_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>, ffi.UnsignedLong)>>('EVP_MD_meth_set_flags');
  late final _EVP_MD_meth_set_flags = _EVP_MD_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_init(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>
        init,
  ) {
    return _EVP_MD_meth_set_init(
      md,
      init,
    );
  }

  late final _EVP_MD_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>>(
      'EVP_MD_meth_set_init');
  late final _EVP_MD_meth_set_init = _EVP_MD_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>();

  int EVP_MD_meth_set_update(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.Void> data, ffi.Size count)>>
        update,
  ) {
    return _EVP_MD_meth_set_update(
      md,
      update,
    );
  }

  late final _EVP_MD_meth_set_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data,
                          ffi.Size count)>>)>>('EVP_MD_meth_set_update');
  late final _EVP_MD_meth_set_update = _EVP_MD_meth_set_updatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ffi.Void> data, ffi.Size count)>>)>();

  int EVP_MD_meth_set_final(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> md)>>
        final1,
  ) {
    return _EVP_MD_meth_set_final(
      md,
      final1,
    );
  }

  late final _EVP_MD_meth_set_finalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> md)>>)>>(
      'EVP_MD_meth_set_final');
  late final _EVP_MD_meth_set_final = _EVP_MD_meth_set_finalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ffi.UnsignedChar> md)>>)>();

  int EVP_MD_meth_set_copy(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> to, ffi.Pointer<EVP_MD_CTX> from)>>
        copy,
  ) {
    return _EVP_MD_meth_set_copy(
      md,
      copy,
    );
  }

  late final _EVP_MD_meth_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> to,
                              ffi.Pointer<EVP_MD_CTX> from)>>)>>(
      'EVP_MD_meth_set_copy');
  late final _EVP_MD_meth_set_copy = _EVP_MD_meth_set_copyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> to,
                      ffi.Pointer<EVP_MD_CTX> from)>>)>();

  int EVP_MD_meth_set_cleanup(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>
        cleanup,
  ) {
    return _EVP_MD_meth_set_cleanup(
      md,
      cleanup,
    );
  }

  late final _EVP_MD_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>>(
      'EVP_MD_meth_set_cleanup');
  late final _EVP_MD_meth_set_cleanup = _EVP_MD_meth_set_cleanupPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx)>>)>();

  int EVP_MD_meth_set_ctrl(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Int cmd,
                    ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>
        ctrl,
  ) {
    return _EVP_MD_meth_set_ctrl(
      md,
      ctrl,
    );
  }

  late final _EVP_MD_meth_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Int cmd,
                              ffi.Int p1,
                              ffi.Pointer<ffi.Void> p2)>>)>>(
      'EVP_MD_meth_set_ctrl');
  late final _EVP_MD_meth_set_ctrl = _EVP_MD_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Int cmd,
                      ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>)>();

  int EVP_MD_meth_get_input_blocksize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_input_blocksize(
      md,
    );
  }

  late final _EVP_MD_meth_get_input_blocksizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_input_blocksize');
  late final _EVP_MD_meth_get_input_blocksize =
      _EVP_MD_meth_get_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_result_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_result_size(
      md,
    );
  }

  late final _EVP_MD_meth_get_result_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_result_size');
  late final _EVP_MD_meth_get_result_size = _EVP_MD_meth_get_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_app_datasize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_app_datasize(
      md,
    );
  }

  late final _EVP_MD_meth_get_app_datasizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_app_datasize');
  late final _EVP_MD_meth_get_app_datasize = _EVP_MD_meth_get_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_flags(
      md,
    );
  }

  late final _EVP_MD_meth_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_meth_get_flags');
  late final _EVP_MD_meth_get_flags =
      _EVP_MD_meth_get_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_init(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_init(
      md,
    );
  }

  late final _EVP_MD_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_init');
  late final _EVP_MD_meth_get_init = _EVP_MD_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      EVP_MD_meth_get_update(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_update(
      md,
    );
  }

  late final _EVP_MD_meth_get_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Size)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_update');
  late final _EVP_MD_meth_get_update = _EVP_MD_meth_get_updatePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.Void>, ffi.Size)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
      EVP_MD_meth_get_final(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_final(
      md,
    );
  }

  late final _EVP_MD_meth_get_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_final');
  late final _EVP_MD_meth_get_final = _EVP_MD_meth_get_finalPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_copy(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_copy(
      md,
    );
  }

  late final _EVP_MD_meth_get_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_copy');
  late final _EVP_MD_meth_get_copy = _EVP_MD_meth_get_copyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_cleanup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_cleanup(
      md,
    );
  }

  late final _EVP_MD_meth_get_cleanupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_cleanup');
  late final _EVP_MD_meth_get_cleanup = _EVP_MD_meth_get_cleanupPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_MD_meth_get_ctrl(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_ctrl(
      md,
    );
  }

  late final _EVP_MD_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_ctrl');
  late final _EVP_MD_meth_get_ctrl = _EVP_MD_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_new(
    int cipher_type,
    int block_size,
    int key_len,
  ) {
    return _EVP_CIPHER_meth_new(
      cipher_type,
      block_size,
      key_len,
    );
  }

  late final _EVP_CIPHER_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Int, ffi.Int, ffi.Int)>>('EVP_CIPHER_meth_new');
  late final _EVP_CIPHER_meth_new = _EVP_CIPHER_meth_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(int, int, int)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_dup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_dup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_dup');
  late final _EVP_CIPHER_meth_dup = _EVP_CIPHER_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER>)>();

  void EVP_CIPHER_meth_free(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_free(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_meth_free');
  late final _EVP_CIPHER_meth_free = _EVP_CIPHER_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_meth_set_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
    int iv_len,
  ) {
    return _EVP_CIPHER_meth_set_iv_length(
      cipher,
      iv_len,
    );
  }

  late final _EVP_CIPHER_meth_set_iv_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Int)>>('EVP_CIPHER_meth_set_iv_length');
  late final _EVP_CIPHER_meth_set_iv_length = _EVP_CIPHER_meth_set_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
    int flags,
  ) {
    return _EVP_CIPHER_meth_set_flags(
      cipher,
      flags,
    );
  }

  late final _EVP_CIPHER_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.UnsignedLong)>>('EVP_CIPHER_meth_set_flags');
  late final _EVP_CIPHER_meth_set_flags = _EVP_CIPHER_meth_set_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
    int ctx_size,
  ) {
    return _EVP_CIPHER_meth_set_impl_ctx_size(
      cipher,
      ctx_size,
    );
  }

  late final _EVP_CIPHER_meth_set_impl_ctx_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Int)>>('EVP_CIPHER_meth_set_impl_ctx_size');
  late final _EVP_CIPHER_meth_set_impl_ctx_size =
      _EVP_CIPHER_meth_set_impl_ctx_sizePtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_init(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> key,
                    ffi.Pointer<ffi.UnsignedChar> iv,
                    ffi.Int enc)>>
        init,
  ) {
    return _EVP_CIPHER_meth_set_init(
      cipher,
      init,
    );
  }

  late final _EVP_CIPHER_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.UnsignedChar> iv,
                          ffi.Int enc)>>)>>('EVP_CIPHER_meth_set_init');
  late final _EVP_CIPHER_meth_set_init =
      _EVP_CIPHER_meth_set_initPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.UnsignedChar> iv,
                          ffi.Int enc)>>)>();

  int EVP_CIPHER_meth_set_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inl)>>
        do_cipher,
  ) {
    return _EVP_CIPHER_meth_set_do_cipher(
      cipher,
      do_cipher,
    );
  }

  late final _EVP_CIPHER_meth_set_do_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inl)>>)>>('EVP_CIPHER_meth_set_do_cipher');
  late final _EVP_CIPHER_meth_set_do_cipher =
      _EVP_CIPHER_meth_set_do_cipherPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inl)>>)>();

  int EVP_CIPHER_meth_set_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
        cleanup,
  ) {
    return _EVP_CIPHER_meth_set_cleanup(
      cipher,
      cleanup,
    );
  }

  late final _EVP_CIPHER_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>>(
      'EVP_CIPHER_meth_set_cleanup');
  late final _EVP_CIPHER_meth_set_cleanup =
      _EVP_CIPHER_meth_set_cleanupPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>();

  int EVP_CIPHER_meth_set_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        set_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_set_asn1_params(
      cipher,
      set_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_set_asn1_params');
  late final _EVP_CIPHER_meth_set_set_asn1_params =
      _EVP_CIPHER_meth_set_set_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        get_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_get_asn1_params(
      cipher,
      get_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_get_asn1_params');
  late final _EVP_CIPHER_meth_set_get_asn1_params =
      _EVP_CIPHER_meth_set_get_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _EVP_CIPHER_meth_set_ctrl(
      cipher,
      ctrl,
    );
  }

  late final _EVP_CIPHER_meth_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                              ffi.Int, ffi.Pointer<ffi.Void>)>>)>>(
      'EVP_CIPHER_meth_set_ctrl');
  late final _EVP_CIPHER_meth_set_ctrl =
      _EVP_CIPHER_meth_set_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>> EVP_CIPHER_meth_get_init(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_init(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_init');
  late final _EVP_CIPHER_meth_get_init =
      _EVP_CIPHER_meth_get_initPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>> EVP_CIPHER_meth_get_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_do_cipher(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_do_cipherPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Size)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_do_cipher');
  late final _EVP_CIPHER_meth_get_do_cipher =
      _EVP_CIPHER_meth_get_do_cipherPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Size)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
      EVP_CIPHER_meth_get_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_cleanup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_cleanup');
  late final _EVP_CIPHER_meth_get_cleanup =
      _EVP_CIPHER_meth_get_cleanupPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_set_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_set_asn1_params');
  late final _EVP_CIPHER_meth_get_set_asn1_params =
      _EVP_CIPHER_meth_get_set_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_get_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_get_asn1_params');
  late final _EVP_CIPHER_meth_get_get_asn1_params =
      _EVP_CIPHER_meth_get_get_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_CIPHER_meth_get_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_ctrl(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_ctrl');
  late final _EVP_CIPHER_meth_get_ctrl =
      _EVP_CIPHER_meth_get_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_MD_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_type(
      md,
    );
  }

  late final _EVP_MD_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_type');
  late final _EVP_MD_type =
      _EVP_MD_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_pkey_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_pkey_type(
      md,
    );
  }

  late final _EVP_MD_pkey_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_pkey_type');
  late final _EVP_MD_pkey_type =
      _EVP_MD_pkey_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_size(
      md,
    );
  }

  late final _EVP_MD_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_size');
  late final _EVP_MD_size =
      _EVP_MD_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_block_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_block_size(
      md,
    );
  }

  late final _EVP_MD_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_block_size');
  late final _EVP_MD_block_size =
      _EVP_MD_block_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_flags(
      md,
    );
  }

  late final _EVP_MD_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_flags');
  late final _EVP_MD_flags =
      _EVP_MD_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_md(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_md(
      ctx,
    );
  }

  late final _EVP_MD_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_md');
  late final _EVP_MD_CTX_md = _EVP_MD_CTX_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Size)>>
      EVP_MD_CTX_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_update_fn(
      ctx,
    );
  }

  late final _EVP_MD_CTX_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Size)>>
              Function(ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_update_fn');
  late final _EVP_MD_CTX_update_fn = _EVP_MD_CTX_update_fnPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.Void>, ffi.Size)>>
          Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.Void> data, ffi.Size count)>>
        update,
  ) {
    return _EVP_MD_CTX_set_update_fn(
      ctx,
      update,
    );
  }

  late final _EVP_MD_CTX_set_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data,
                          ffi.Size count)>>)>>('EVP_MD_CTX_set_update_fn');
  late final _EVP_MD_CTX_set_update_fn =
      _EVP_MD_CTX_set_update_fnPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.Void> data, ffi.Size count)>>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_MD_CTX_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_pkey_ctx(
      ctx,
    );
  }

  late final _EVP_MD_CTX_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_pkey_ctx');
  late final _EVP_MD_CTX_pkey_ctx = _EVP_MD_CTX_pkey_ctxPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_PKEY_CTX> pctx,
  ) {
    return _EVP_MD_CTX_set_pkey_ctx(
      ctx,
      pctx,
    );
  }

  late final _EVP_MD_CTX_set_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_MD_CTX_set_pkey_ctx');
  late final _EVP_MD_CTX_set_pkey_ctx = _EVP_MD_CTX_set_pkey_ctxPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_MD_CTX_md_data(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_md_data(
      ctx,
    );
  }

  late final _EVP_MD_CTX_md_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_md_data');
  late final _EVP_MD_CTX_md_data = _EVP_MD_CTX_md_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_CIPHER_nid(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_nid(
      cipher,
    );
  }

  late final _EVP_CIPHER_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_nid');
  late final _EVP_CIPHER_nid =
      _EVP_CIPHER_nidPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_block_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_block_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_block_size');
  late final _EVP_CIPHER_block_size = _EVP_CIPHER_block_sizePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_impl_ctx_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_impl_ctx_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_impl_ctx_size');
  late final _EVP_CIPHER_impl_ctx_size = _EVP_CIPHER_impl_ctx_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_key_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_key_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_key_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_key_length');
  late final _EVP_CIPHER_key_length = _EVP_CIPHER_key_lengthPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_iv_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_iv_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_iv_length');
  late final _EVP_CIPHER_iv_length = _EVP_CIPHER_iv_lengthPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_flags(
      cipher,
    );
  }

  late final _EVP_CIPHER_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_flags');
  late final _EVP_CIPHER_flags =
      _EVP_CIPHER_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_cipher(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_cipher');
  late final _EVP_CIPHER_CTX_cipher = _EVP_CIPHER_CTX_cipherPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_encrypting(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_encrypting(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_encryptingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_encrypting');
  late final _EVP_CIPHER_CTX_encrypting = _EVP_CIPHER_CTX_encryptingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_nid(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_nid(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_nidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_nid');
  late final _EVP_CIPHER_CTX_nid = _EVP_CIPHER_CTX_nidPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_block_size(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_block_size(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_block_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_block_size');
  late final _EVP_CIPHER_CTX_block_size = _EVP_CIPHER_CTX_block_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_key_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_key_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_key_length');
  late final _EVP_CIPHER_CTX_key_length = _EVP_CIPHER_CTX_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_iv_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_iv_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_iv_length');
  late final _EVP_CIPHER_CTX_iv_length = _EVP_CIPHER_CTX_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv');
  late final _EVP_CIPHER_CTX_iv = _EVP_CIPHER_CTX_ivPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_original_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_original_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_original_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_original_iv');
  late final _EVP_CIPHER_CTX_original_iv =
      _EVP_CIPHER_CTX_original_ivPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_iv_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv_noconst');
  late final _EVP_CIPHER_CTX_iv_noconst =
      _EVP_CIPHER_CTX_iv_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_buf_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_buf_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_buf_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_buf_noconst');
  late final _EVP_CIPHER_CTX_buf_noconst =
      _EVP_CIPHER_CTX_buf_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_num(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_num');
  late final _EVP_CIPHER_CTX_num = _EVP_CIPHER_CTX_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_set_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int num,
  ) {
    return _EVP_CIPHER_CTX_set_num(
      ctx,
      num,
    );
  }

  late final _EVP_CIPHER_CTX_set_numPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int)>>('EVP_CIPHER_CTX_set_num');
  late final _EVP_CIPHER_CTX_set_num = _EVP_CIPHER_CTX_set_numPtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_copy(
    ffi.Pointer<EVP_CIPHER_CTX> out,
    ffi.Pointer<EVP_CIPHER_CTX> in1,
  ) {
    return _EVP_CIPHER_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_CIPHER_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_copy');
  late final _EVP_CIPHER_CTX_copy = _EVP_CIPHER_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_app_data');
  late final _EVP_CIPHER_CTX_get_app_data =
      _EVP_CIPHER_CTX_get_app_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_set_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_CIPHER_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_CIPHER_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_app_data');
  late final _EVP_CIPHER_CTX_set_app_data =
      _EVP_CIPHER_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_cipher_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_cipher_data');
  late final _EVP_CIPHER_CTX_get_cipher_data =
      _EVP_CIPHER_CTX_get_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_set_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> cipher_data,
  ) {
    return _EVP_CIPHER_CTX_set_cipher_data(
      ctx,
      cipher_data,
    );
  }

  late final _EVP_CIPHER_CTX_set_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_cipher_data');
  late final _EVP_CIPHER_CTX_set_cipher_data =
      _EVP_CIPHER_CTX_set_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  int EVP_Cipher(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_Cipher(
      c,
      out,
      in1,
      inl,
    );
  }

  late final _EVP_CipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('EVP_Cipher');
  late final _EVP_Cipher = _EVP_CipherPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_MD_CTX_ctrl(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_MD_CTX_ctrl(
      ctx,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_MD_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_CTX_ctrl');
  late final _EVP_MD_CTX_ctrl = _EVP_MD_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_new() {
    return _EVP_MD_CTX_new();
  }

  late final _EVP_MD_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD_CTX> Function()>>(
          'EVP_MD_CTX_new');
  late final _EVP_MD_CTX_new =
      _EVP_MD_CTX_newPtr.asFunction<ffi.Pointer<EVP_MD_CTX> Function()>();

  int EVP_MD_CTX_reset(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_reset(
      ctx,
    );
  }

  late final _EVP_MD_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_reset');
  late final _EVP_MD_CTX_reset =
      _EVP_MD_CTX_resetPtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_free(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_free(
      ctx,
    );
  }

  late final _EVP_MD_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_free');
  late final _EVP_MD_CTX_free =
      _EVP_MD_CTX_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_copy_ex(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy_ex(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copy_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy_ex');
  late final _EVP_MD_CTX_copy_ex = _EVP_MD_CTX_copy_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_set_flags');
  late final _EVP_MD_CTX_set_flags = _EVP_MD_CTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  void EVP_MD_CTX_clear_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_clear_flags');
  late final _EVP_MD_CTX_clear_flags = _EVP_MD_CTX_clear_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_MD_CTX_test_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_test_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_test_flags');
  late final _EVP_MD_CTX_test_flags = _EVP_MD_CTX_test_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_DigestInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_DigestInit_ex(
      ctx,
      type,
      impl,
    );
  }

  late final _EVP_DigestInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_DigestInit_ex');
  late final _EVP_DigestInit_ex = _EVP_DigestInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>, ffi.Pointer<ENGINE>)>();

  int EVP_DigestUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> d,
    int cnt,
  ) {
    return _EVP_DigestUpdate(
      ctx,
      d,
      cnt,
    );
  }

  late final _EVP_DigestUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('EVP_DigestUpdate');
  late final _EVP_DigestUpdate = _EVP_DigestUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_DigestFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal_ex(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal_ex');
  late final _EVP_DigestFinal_ex = _EVP_DigestFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_Digest(
    ffi.Pointer<ffi.Void> data,
    int count,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> size,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_Digest(
      data,
      count,
      md,
      size,
      type,
      impl,
    );
  }

  late final _EVP_DigestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_Digest');
  late final _EVP_Digest = _EVP_DigestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>)>();

  int EVP_MD_CTX_copy(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy');
  late final _EVP_MD_CTX_copy = _EVP_MD_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_DigestInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _EVP_DigestInit(
      ctx,
      type,
    );
  }

  late final _EVP_DigestInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>>('EVP_DigestInit');
  late final _EVP_DigestInit = _EVP_DigestInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_DigestFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal');
  late final _EVP_DigestFinal = _EVP_DigestFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_DigestFinalXOF(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    int len,
  ) {
    return _EVP_DigestFinalXOF(
      ctx,
      md,
      len,
    );
  }

  late final _EVP_DigestFinalXOFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>('EVP_DigestFinalXOF');
  late final _EVP_DigestFinalXOF = _EVP_DigestFinalXOFPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_read_pw_string(
    ffi.Pointer<ffi.Char> buf,
    int length,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string(
      buf,
      length,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string');
  late final _EVP_read_pw_string = _EVP_read_pw_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int EVP_read_pw_string_min(
    ffi.Pointer<ffi.Char> buf,
    int minlen,
    int maxlen,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string_min(
      buf,
      minlen,
      maxlen,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_string_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string_min');
  late final _EVP_read_pw_string_min = _EVP_read_pw_string_minPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int)>();

  void EVP_set_pw_prompt(
    ffi.Pointer<ffi.Char> prompt,
  ) {
    return _EVP_set_pw_prompt(
      prompt,
    );
  }

  late final _EVP_set_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'EVP_set_pw_prompt');
  late final _EVP_set_pw_prompt =
      _EVP_set_pw_promptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_get_pw_prompt() {
    return _EVP_get_pw_prompt();
  }

  late final _EVP_get_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'EVP_get_pw_prompt');
  late final _EVP_get_pw_prompt =
      _EVP_get_pw_promptPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int EVP_BytesToKey(
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.UnsignedChar> salt,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datal,
    int count,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_BytesToKey(
      type,
      md,
      salt,
      data,
      datal,
      count,
      key,
      iv,
    );
  }

  late final _EVP_BytesToKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_BytesToKey');
  late final _EVP_BytesToKey = _EVP_BytesToKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void EVP_CIPHER_CTX_set_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_flags');
  late final _EVP_CIPHER_CTX_set_flags = _EVP_CIPHER_CTX_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  void EVP_CIPHER_CTX_clear_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_clear_flags');
  late final _EVP_CIPHER_CTX_clear_flags = _EVP_CIPHER_CTX_clear_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_test_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_test_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_test_flags');
  late final _EVP_CIPHER_CTX_test_flags = _EVP_CIPHER_CTX_test_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_EncryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit');
  late final _EVP_EncryptInit = _EVP_EncryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit_ex');
  late final _EVP_EncryptInit_ex = _EVP_EncryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncryptUpdate');
  late final _EVP_EncryptUpdate = _EVP_EncryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_EncryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal_ex(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal_ex');
  late final _EVP_EncryptFinal_ex = _EVP_EncryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal');
  late final _EVP_EncryptFinal = _EVP_EncryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit');
  late final _EVP_DecryptInit = _EVP_DecryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit_ex');
  late final _EVP_DecryptInit_ex = _EVP_DecryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecryptUpdate');
  late final _EVP_DecryptUpdate = _EVP_DecryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal');
  late final _EVP_DecryptFinal = _EVP_DecryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal_ex');
  late final _EVP_DecryptFinal_ex = _EVP_DecryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit(
      ctx,
      cipher,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit');
  late final _EVP_CipherInit = _EVP_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit_ex');
  late final _EVP_CipherInit_ex = _EVP_CipherInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int EVP_CipherUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_CipherUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_CipherUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherUpdate');
  late final _EVP_CipherUpdate = _EVP_CipherUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal');
  late final _EVP_CipherFinal = _EVP_CipherFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal_ex');
  late final _EVP_CipherFinal_ex = _EVP_CipherFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_SignFinal(
      ctx,
      md,
      s,
      pkey,
    );
  }

  late final _EVP_SignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_SignFinal');
  late final _EVP_SignFinal = _EVP_SignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestSign(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Size> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestSign(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestSign');
  late final _EVP_DigestSign = _EVP_DigestSignPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_VerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_VerifyFinal(
      ctx,
      sigbuf,
      siglen,
      pkey,
    );
  }

  late final _EVP_VerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<EVP_PKEY>)>>('EVP_VerifyFinal');
  late final _EVP_VerifyFinal = _EVP_VerifyFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestVerify(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestVerify(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestVerify');
  late final _EVP_DigestVerify = _EVP_DigestVerifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DigestSignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestSignInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestSignInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestSignInit');
  late final _EVP_DigestSignInit = _EVP_DigestSignInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestSignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Size> siglen,
  ) {
    return _EVP_DigestSignFinal(
      ctx,
      sigret,
      siglen,
    );
  }

  late final _EVP_DigestSignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_DigestSignFinal');
  late final _EVP_DigestSignFinal = _EVP_DigestSignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_DigestVerifyInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestVerifyInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestVerifyInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestVerifyInit');
  late final _EVP_DigestVerifyInit = _EVP_DigestVerifyInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestVerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_DigestVerifyFinal(
      ctx,
      sig,
      siglen,
    );
  }

  late final _EVP_DigestVerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_DigestVerifyFinal');
  late final _EVP_DigestVerifyFinal = _EVP_DigestVerifyFinalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_OpenInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.UnsignedChar> ek,
    int ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<EVP_PKEY> priv,
  ) {
    return _EVP_OpenInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      priv,
    );
  }

  late final _EVP_OpenInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_OpenInit');
  late final _EVP_OpenInit = _EVP_OpenInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_OpenFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_OpenFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_OpenFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_OpenFinal');
  late final _EVP_OpenFinal = _EVP_OpenFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SealInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ek,
    ffi.Pointer<ffi.Int> ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> pubk,
    int npubk,
  ) {
    return _EVP_SealInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      pubk,
      npubk,
    );
  }

  late final _EVP_SealInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Int)>>('EVP_SealInit');
  late final _EVP_SealInit = _EVP_SealInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          int)>();

  int EVP_SealFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_SealFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_SealFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_SealFinal');
  late final _EVP_SealFinal = _EVP_SealFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<EVP_ENCODE_CTX> EVP_ENCODE_CTX_new() {
    return _EVP_ENCODE_CTX_new();
  }

  late final _EVP_ENCODE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_ENCODE_CTX> Function()>>(
          'EVP_ENCODE_CTX_new');
  late final _EVP_ENCODE_CTX_new = _EVP_ENCODE_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_ENCODE_CTX> Function()>();

  void EVP_ENCODE_CTX_free(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_free(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_free');
  late final _EVP_ENCODE_CTX_free = _EVP_ENCODE_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_copy(
    ffi.Pointer<EVP_ENCODE_CTX> dctx,
    ffi.Pointer<EVP_ENCODE_CTX> sctx,
  ) {
    return _EVP_ENCODE_CTX_copy(
      dctx,
      sctx,
    );
  }

  late final _EVP_ENCODE_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<EVP_ENCODE_CTX>)>>('EVP_ENCODE_CTX_copy');
  late final _EVP_ENCODE_CTX_copy = _EVP_ENCODE_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_num(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_num(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_num');
  late final _EVP_ENCODE_CTX_num = _EVP_ENCODE_CTX_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  void EVP_EncodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_EncodeInit(
      ctx,
    );
  }

  late final _EVP_EncodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_EncodeInit');
  late final _EVP_EncodeInit = _EVP_EncodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_EncodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncodeUpdate');
  late final _EVP_EncodeUpdate = _EVP_EncodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_EncodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncodeFinal');
  late final _EVP_EncodeFinal = _EVP_EncodeFinalPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_EncodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_EncodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_EncodeBlock');
  late final _EVP_EncodeBlock = _EVP_EncodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_DecodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_DecodeInit(
      ctx,
    );
  }

  late final _EVP_DecodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_DecodeInit');
  late final _EVP_DecodeInit = _EVP_DecodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_DecodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecodeUpdate');
  late final _EVP_DecodeUpdate = _EVP_DecodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_DecodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecodeFinal');
  late final _EVP_DecodeFinal = _EVP_DecodeFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_DecodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_DecodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_DecodeBlock');
  late final _EVP_DecodeBlock = _EVP_DecodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_CIPHER_CTX> EVP_CIPHER_CTX_new() {
    return _EVP_CIPHER_CTX_new();
  }

  late final _EVP_CIPHER_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER_CTX> Function()>>(
          'EVP_CIPHER_CTX_new');
  late final _EVP_CIPHER_CTX_new = _EVP_CIPHER_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER_CTX> Function()>();

  int EVP_CIPHER_CTX_reset(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_reset(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_reset');
  late final _EVP_CIPHER_CTX_reset = _EVP_CIPHER_CTX_resetPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_free(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_free(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_free');
  late final _EVP_CIPHER_CTX_free = _EVP_CIPHER_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_set_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> x,
    int keylen,
  ) {
    return _EVP_CIPHER_CTX_set_key_length(
      x,
      keylen,
    );
  }

  late final _EVP_CIPHER_CTX_set_key_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_key_length');
  late final _EVP_CIPHER_CTX_set_key_length = _EVP_CIPHER_CTX_set_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_set_padding(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    int pad,
  ) {
    return _EVP_CIPHER_CTX_set_padding(
      c,
      pad,
    );
  }

  late final _EVP_CIPHER_CTX_set_paddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_padding');
  late final _EVP_CIPHER_CTX_set_padding = _EVP_CIPHER_CTX_set_paddingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_ctrl(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int type,
    int arg,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _EVP_CIPHER_CTX_ctrl(
      ctx,
      type,
      arg,
      ptr,
    );
  }

  late final _EVP_CIPHER_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_ctrl');
  late final _EVP_CIPHER_CTX_ctrl = _EVP_CIPHER_CTX_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  int EVP_CIPHER_CTX_rand_key(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
  ) {
    return _EVP_CIPHER_CTX_rand_key(
      ctx,
      key,
    );
  }

  late final _EVP_CIPHER_CTX_rand_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_CIPHER_CTX_rand_key');
  late final _EVP_CIPHER_CTX_rand_key = _EVP_CIPHER_CTX_rand_keyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<BIO_METHOD> BIO_f_md() {
    return _BIO_f_md();
  }

  late final _BIO_f_mdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_md');
  late final _BIO_f_md =
      _BIO_f_mdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_base64() {
    return _BIO_f_base64();
  }

  late final _BIO_f_base64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_base64');
  late final _BIO_f_base64 =
      _BIO_f_base64Ptr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_cipher() {
    return _BIO_f_cipher();
  }

  late final _BIO_f_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_cipher');
  late final _BIO_f_cipher =
      _BIO_f_cipherPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_reliable() {
    return _BIO_f_reliable();
  }

  late final _BIO_f_reliablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_reliable');
  late final _BIO_f_reliable =
      _BIO_f_reliablePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  int BIO_set_cipher(
    ffi.Pointer<BIO> b,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<ffi.UnsignedChar> k,
    ffi.Pointer<ffi.UnsignedChar> i,
    int enc,
  ) {
    return _BIO_set_cipher(
      b,
      c,
      k,
      i,
      enc,
    );
  }

  late final _BIO_set_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BIO_set_cipher');
  late final _BIO_set_cipher = _BIO_set_cipherPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_MD> EVP_md_null() {
    return _EVP_md_null();
  }

  late final _EVP_md_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md_null');
  late final _EVP_md_null =
      _EVP_md_nullPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md4() {
    return _EVP_md4();
  }

  late final _EVP_md4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md4');
  late final _EVP_md4 =
      _EVP_md4Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5() {
    return _EVP_md5();
  }

  late final _EVP_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md5');
  late final _EVP_md5 =
      _EVP_md5Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5_sha1() {
    return _EVP_md5_sha1();
  }

  late final _EVP_md5_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md5_sha1');
  late final _EVP_md5_sha1 =
      _EVP_md5_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2b512() {
    return _EVP_blake2b512();
  }

  late final _EVP_blake2b512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2b512');
  late final _EVP_blake2b512 =
      _EVP_blake2b512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2s256() {
    return _EVP_blake2s256();
  }

  late final _EVP_blake2s256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2s256');
  late final _EVP_blake2s256 =
      _EVP_blake2s256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha1() {
    return _EVP_sha1();
  }

  late final _EVP_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha1');
  late final _EVP_sha1 =
      _EVP_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha224() {
    return _EVP_sha224();
  }

  late final _EVP_sha224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha224');
  late final _EVP_sha224 =
      _EVP_sha224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha256() {
    return _EVP_sha256();
  }

  late final _EVP_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha256');
  late final _EVP_sha256 =
      _EVP_sha256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha384() {
    return _EVP_sha384();
  }

  late final _EVP_sha384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha384');
  late final _EVP_sha384 =
      _EVP_sha384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512() {
    return _EVP_sha512();
  }

  late final _EVP_sha512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha512');
  late final _EVP_sha512 =
      _EVP_sha512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_224() {
    return _EVP_sha512_224();
  }

  late final _EVP_sha512_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_224');
  late final _EVP_sha512_224 =
      _EVP_sha512_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_256() {
    return _EVP_sha512_256();
  }

  late final _EVP_sha512_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_256');
  late final _EVP_sha512_256 =
      _EVP_sha512_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_224() {
    return _EVP_sha3_224();
  }

  late final _EVP_sha3_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_224');
  late final _EVP_sha3_224 =
      _EVP_sha3_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_256() {
    return _EVP_sha3_256();
  }

  late final _EVP_sha3_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_256');
  late final _EVP_sha3_256 =
      _EVP_sha3_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_384() {
    return _EVP_sha3_384();
  }

  late final _EVP_sha3_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_384');
  late final _EVP_sha3_384 =
      _EVP_sha3_384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_512() {
    return _EVP_sha3_512();
  }

  late final _EVP_sha3_512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_512');
  late final _EVP_sha3_512 =
      _EVP_sha3_512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake128() {
    return _EVP_shake128();
  }

  late final _EVP_shake128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake128');
  late final _EVP_shake128 =
      _EVP_shake128Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake256() {
    return _EVP_shake256();
  }

  late final _EVP_shake256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake256');
  late final _EVP_shake256 =
      _EVP_shake256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_ripemd160() {
    return _EVP_ripemd160();
  }

  late final _EVP_ripemd160Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_ripemd160');
  late final _EVP_ripemd160 =
      _EVP_ripemd160Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_whirlpool() {
    return _EVP_whirlpool();
  }

  late final _EVP_whirlpoolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_whirlpool');
  late final _EVP_whirlpool =
      _EVP_whirlpoolPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sm3() {
    return _EVP_sm3();
  }

  late final _EVP_sm3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sm3');
  late final _EVP_sm3 =
      _EVP_sm3Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_enc_null() {
    return _EVP_enc_null();
  }

  late final _EVP_enc_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_enc_null');
  late final _EVP_enc_null =
      _EVP_enc_nullPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ecb() {
    return _EVP_des_ecb();
  }

  late final _EVP_des_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ecb');
  late final _EVP_des_ecb =
      _EVP_des_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede() {
    return _EVP_des_ede();
  }

  late final _EVP_des_edePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede');
  late final _EVP_des_ede =
      _EVP_des_edePtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3() {
    return _EVP_des_ede3();
  }

  late final _EVP_des_ede3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3');
  late final _EVP_des_ede3 =
      _EVP_des_ede3Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ecb() {
    return _EVP_des_ede_ecb();
  }

  late final _EVP_des_ede_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ecb');
  late final _EVP_des_ede_ecb =
      _EVP_des_ede_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ecb() {
    return _EVP_des_ede3_ecb();
  }

  late final _EVP_des_ede3_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ecb');
  late final _EVP_des_ede3_ecb =
      _EVP_des_ede3_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb64() {
    return _EVP_des_cfb64();
  }

  late final _EVP_des_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb64');
  late final _EVP_des_cfb64 =
      _EVP_des_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb1() {
    return _EVP_des_cfb1();
  }

  late final _EVP_des_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb1');
  late final _EVP_des_cfb1 =
      _EVP_des_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb8() {
    return _EVP_des_cfb8();
  }

  late final _EVP_des_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb8');
  late final _EVP_des_cfb8 =
      _EVP_des_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cfb64() {
    return _EVP_des_ede_cfb64();
  }

  late final _EVP_des_ede_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cfb64');
  late final _EVP_des_ede_cfb64 =
      _EVP_des_ede_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb64() {
    return _EVP_des_ede3_cfb64();
  }

  late final _EVP_des_ede3_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb64');
  late final _EVP_des_ede3_cfb64 =
      _EVP_des_ede3_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb1() {
    return _EVP_des_ede3_cfb1();
  }

  late final _EVP_des_ede3_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb1');
  late final _EVP_des_ede3_cfb1 =
      _EVP_des_ede3_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb8() {
    return _EVP_des_ede3_cfb8();
  }

  late final _EVP_des_ede3_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb8');
  late final _EVP_des_ede3_cfb8 =
      _EVP_des_ede3_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ofb() {
    return _EVP_des_ofb();
  }

  late final _EVP_des_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ofb');
  late final _EVP_des_ofb =
      _EVP_des_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ofb() {
    return _EVP_des_ede_ofb();
  }

  late final _EVP_des_ede_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ofb');
  late final _EVP_des_ede_ofb =
      _EVP_des_ede_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ofb() {
    return _EVP_des_ede3_ofb();
  }

  late final _EVP_des_ede3_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ofb');
  late final _EVP_des_ede3_ofb =
      _EVP_des_ede3_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cbc() {
    return _EVP_des_cbc();
  }

  late final _EVP_des_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cbc');
  late final _EVP_des_cbc =
      _EVP_des_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cbc() {
    return _EVP_des_ede_cbc();
  }

  late final _EVP_des_ede_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cbc');
  late final _EVP_des_ede_cbc =
      _EVP_des_ede_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cbc() {
    return _EVP_des_ede3_cbc();
  }

  late final _EVP_des_ede3_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cbc');
  late final _EVP_des_ede3_cbc =
      _EVP_des_ede3_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_desx_cbc() {
    return _EVP_desx_cbc();
  }

  late final _EVP_desx_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_desx_cbc');
  late final _EVP_desx_cbc =
      _EVP_desx_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_wrap() {
    return _EVP_des_ede3_wrap();
  }

  late final _EVP_des_ede3_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_wrap');
  late final _EVP_des_ede3_wrap =
      _EVP_des_ede3_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4() {
    return _EVP_rc4();
  }

  late final _EVP_rc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4');
  late final _EVP_rc4 =
      _EVP_rc4Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_40() {
    return _EVP_rc4_40();
  }

  late final _EVP_rc4_40Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_40');
  late final _EVP_rc4_40 =
      _EVP_rc4_40Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_hmac_md5() {
    return _EVP_rc4_hmac_md5();
  }

  late final _EVP_rc4_hmac_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_hmac_md5');
  late final _EVP_rc4_hmac_md5 =
      _EVP_rc4_hmac_md5Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ecb() {
    return _EVP_rc2_ecb();
  }

  late final _EVP_rc2_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ecb');
  late final _EVP_rc2_ecb =
      _EVP_rc2_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cbc() {
    return _EVP_rc2_cbc();
  }

  late final _EVP_rc2_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cbc');
  late final _EVP_rc2_cbc =
      _EVP_rc2_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_40_cbc() {
    return _EVP_rc2_40_cbc();
  }

  late final _EVP_rc2_40_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_40_cbc');
  late final _EVP_rc2_40_cbc =
      _EVP_rc2_40_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_64_cbc() {
    return _EVP_rc2_64_cbc();
  }

  late final _EVP_rc2_64_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_64_cbc');
  late final _EVP_rc2_64_cbc =
      _EVP_rc2_64_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cfb64() {
    return _EVP_rc2_cfb64();
  }

  late final _EVP_rc2_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cfb64');
  late final _EVP_rc2_cfb64 =
      _EVP_rc2_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ofb() {
    return _EVP_rc2_ofb();
  }

  late final _EVP_rc2_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ofb');
  late final _EVP_rc2_ofb =
      _EVP_rc2_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ecb() {
    return _EVP_bf_ecb();
  }

  late final _EVP_bf_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ecb');
  late final _EVP_bf_ecb =
      _EVP_bf_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cbc() {
    return _EVP_bf_cbc();
  }

  late final _EVP_bf_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cbc');
  late final _EVP_bf_cbc =
      _EVP_bf_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cfb64() {
    return _EVP_bf_cfb64();
  }

  late final _EVP_bf_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cfb64');
  late final _EVP_bf_cfb64 =
      _EVP_bf_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ofb() {
    return _EVP_bf_ofb();
  }

  late final _EVP_bf_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ofb');
  late final _EVP_bf_ofb =
      _EVP_bf_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ecb() {
    return _EVP_cast5_ecb();
  }

  late final _EVP_cast5_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ecb');
  late final _EVP_cast5_ecb =
      _EVP_cast5_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cbc() {
    return _EVP_cast5_cbc();
  }

  late final _EVP_cast5_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cbc');
  late final _EVP_cast5_cbc =
      _EVP_cast5_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cfb64() {
    return _EVP_cast5_cfb64();
  }

  late final _EVP_cast5_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cfb64');
  late final _EVP_cast5_cfb64 =
      _EVP_cast5_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ofb() {
    return _EVP_cast5_ofb();
  }

  late final _EVP_cast5_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ofb');
  late final _EVP_cast5_ofb =
      _EVP_cast5_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ecb() {
    return _EVP_aes_128_ecb();
  }

  late final _EVP_aes_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ecb');
  late final _EVP_aes_128_ecb =
      _EVP_aes_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc() {
    return _EVP_aes_128_cbc();
  }

  late final _EVP_aes_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc');
  late final _EVP_aes_128_cbc =
      _EVP_aes_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb1() {
    return _EVP_aes_128_cfb1();
  }

  late final _EVP_aes_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb1');
  late final _EVP_aes_128_cfb1 =
      _EVP_aes_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb8() {
    return _EVP_aes_128_cfb8();
  }

  late final _EVP_aes_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb8');
  late final _EVP_aes_128_cfb8 =
      _EVP_aes_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb128() {
    return _EVP_aes_128_cfb128();
  }

  late final _EVP_aes_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb128');
  late final _EVP_aes_128_cfb128 =
      _EVP_aes_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ofb() {
    return _EVP_aes_128_ofb();
  }

  late final _EVP_aes_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ofb');
  late final _EVP_aes_128_ofb =
      _EVP_aes_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ctr() {
    return _EVP_aes_128_ctr();
  }

  late final _EVP_aes_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ctr');
  late final _EVP_aes_128_ctr =
      _EVP_aes_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ccm() {
    return _EVP_aes_128_ccm();
  }

  late final _EVP_aes_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ccm');
  late final _EVP_aes_128_ccm =
      _EVP_aes_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_gcm() {
    return _EVP_aes_128_gcm();
  }

  late final _EVP_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_gcm');
  late final _EVP_aes_128_gcm =
      _EVP_aes_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_xts() {
    return _EVP_aes_128_xts();
  }

  late final _EVP_aes_128_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_xts');
  late final _EVP_aes_128_xts =
      _EVP_aes_128_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap() {
    return _EVP_aes_128_wrap();
  }

  late final _EVP_aes_128_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap');
  late final _EVP_aes_128_wrap =
      _EVP_aes_128_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap_pad() {
    return _EVP_aes_128_wrap_pad();
  }

  late final _EVP_aes_128_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap_pad');
  late final _EVP_aes_128_wrap_pad =
      _EVP_aes_128_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ocb() {
    return _EVP_aes_128_ocb();
  }

  late final _EVP_aes_128_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ocb');
  late final _EVP_aes_128_ocb =
      _EVP_aes_128_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ecb() {
    return _EVP_aes_192_ecb();
  }

  late final _EVP_aes_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ecb');
  late final _EVP_aes_192_ecb =
      _EVP_aes_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cbc() {
    return _EVP_aes_192_cbc();
  }

  late final _EVP_aes_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cbc');
  late final _EVP_aes_192_cbc =
      _EVP_aes_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb1() {
    return _EVP_aes_192_cfb1();
  }

  late final _EVP_aes_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb1');
  late final _EVP_aes_192_cfb1 =
      _EVP_aes_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb8() {
    return _EVP_aes_192_cfb8();
  }

  late final _EVP_aes_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb8');
  late final _EVP_aes_192_cfb8 =
      _EVP_aes_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb128() {
    return _EVP_aes_192_cfb128();
  }

  late final _EVP_aes_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb128');
  late final _EVP_aes_192_cfb128 =
      _EVP_aes_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ofb() {
    return _EVP_aes_192_ofb();
  }

  late final _EVP_aes_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ofb');
  late final _EVP_aes_192_ofb =
      _EVP_aes_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ctr() {
    return _EVP_aes_192_ctr();
  }

  late final _EVP_aes_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ctr');
  late final _EVP_aes_192_ctr =
      _EVP_aes_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ccm() {
    return _EVP_aes_192_ccm();
  }

  late final _EVP_aes_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ccm');
  late final _EVP_aes_192_ccm =
      _EVP_aes_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_gcm() {
    return _EVP_aes_192_gcm();
  }

  late final _EVP_aes_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_gcm');
  late final _EVP_aes_192_gcm =
      _EVP_aes_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap() {
    return _EVP_aes_192_wrap();
  }

  late final _EVP_aes_192_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap');
  late final _EVP_aes_192_wrap =
      _EVP_aes_192_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap_pad() {
    return _EVP_aes_192_wrap_pad();
  }

  late final _EVP_aes_192_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap_pad');
  late final _EVP_aes_192_wrap_pad =
      _EVP_aes_192_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ocb() {
    return _EVP_aes_192_ocb();
  }

  late final _EVP_aes_192_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ocb');
  late final _EVP_aes_192_ocb =
      _EVP_aes_192_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ecb() {
    return _EVP_aes_256_ecb();
  }

  late final _EVP_aes_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ecb');
  late final _EVP_aes_256_ecb =
      _EVP_aes_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc() {
    return _EVP_aes_256_cbc();
  }

  late final _EVP_aes_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc');
  late final _EVP_aes_256_cbc =
      _EVP_aes_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb1() {
    return _EVP_aes_256_cfb1();
  }

  late final _EVP_aes_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb1');
  late final _EVP_aes_256_cfb1 =
      _EVP_aes_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb8() {
    return _EVP_aes_256_cfb8();
  }

  late final _EVP_aes_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb8');
  late final _EVP_aes_256_cfb8 =
      _EVP_aes_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb128() {
    return _EVP_aes_256_cfb128();
  }

  late final _EVP_aes_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb128');
  late final _EVP_aes_256_cfb128 =
      _EVP_aes_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ofb() {
    return _EVP_aes_256_ofb();
  }

  late final _EVP_aes_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ofb');
  late final _EVP_aes_256_ofb =
      _EVP_aes_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ctr() {
    return _EVP_aes_256_ctr();
  }

  late final _EVP_aes_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ctr');
  late final _EVP_aes_256_ctr =
      _EVP_aes_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ccm() {
    return _EVP_aes_256_ccm();
  }

  late final _EVP_aes_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ccm');
  late final _EVP_aes_256_ccm =
      _EVP_aes_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_gcm() {
    return _EVP_aes_256_gcm();
  }

  late final _EVP_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_gcm');
  late final _EVP_aes_256_gcm =
      _EVP_aes_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_xts() {
    return _EVP_aes_256_xts();
  }

  late final _EVP_aes_256_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_xts');
  late final _EVP_aes_256_xts =
      _EVP_aes_256_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap() {
    return _EVP_aes_256_wrap();
  }

  late final _EVP_aes_256_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap');
  late final _EVP_aes_256_wrap =
      _EVP_aes_256_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap_pad() {
    return _EVP_aes_256_wrap_pad();
  }

  late final _EVP_aes_256_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap_pad');
  late final _EVP_aes_256_wrap_pad =
      _EVP_aes_256_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ocb() {
    return _EVP_aes_256_ocb();
  }

  late final _EVP_aes_256_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ocb');
  late final _EVP_aes_256_ocb =
      _EVP_aes_256_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha1() {
    return _EVP_aes_128_cbc_hmac_sha1();
  }

  late final _EVP_aes_128_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha1');
  late final _EVP_aes_128_cbc_hmac_sha1 = _EVP_aes_128_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha1() {
    return _EVP_aes_256_cbc_hmac_sha1();
  }

  late final _EVP_aes_256_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha1');
  late final _EVP_aes_256_cbc_hmac_sha1 = _EVP_aes_256_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha256() {
    return _EVP_aes_128_cbc_hmac_sha256();
  }

  late final _EVP_aes_128_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha256');
  late final _EVP_aes_128_cbc_hmac_sha256 = _EVP_aes_128_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha256() {
    return _EVP_aes_256_cbc_hmac_sha256();
  }

  late final _EVP_aes_256_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha256');
  late final _EVP_aes_256_cbc_hmac_sha256 = _EVP_aes_256_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ecb() {
    return _EVP_aria_128_ecb();
  }

  late final _EVP_aria_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ecb');
  late final _EVP_aria_128_ecb =
      _EVP_aria_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cbc() {
    return _EVP_aria_128_cbc();
  }

  late final _EVP_aria_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cbc');
  late final _EVP_aria_128_cbc =
      _EVP_aria_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb1() {
    return _EVP_aria_128_cfb1();
  }

  late final _EVP_aria_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb1');
  late final _EVP_aria_128_cfb1 =
      _EVP_aria_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb8() {
    return _EVP_aria_128_cfb8();
  }

  late final _EVP_aria_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb8');
  late final _EVP_aria_128_cfb8 =
      _EVP_aria_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb128() {
    return _EVP_aria_128_cfb128();
  }

  late final _EVP_aria_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb128');
  late final _EVP_aria_128_cfb128 =
      _EVP_aria_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ctr() {
    return _EVP_aria_128_ctr();
  }

  late final _EVP_aria_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ctr');
  late final _EVP_aria_128_ctr =
      _EVP_aria_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ofb() {
    return _EVP_aria_128_ofb();
  }

  late final _EVP_aria_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ofb');
  late final _EVP_aria_128_ofb =
      _EVP_aria_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_gcm() {
    return _EVP_aria_128_gcm();
  }

  late final _EVP_aria_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_gcm');
  late final _EVP_aria_128_gcm =
      _EVP_aria_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ccm() {
    return _EVP_aria_128_ccm();
  }

  late final _EVP_aria_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ccm');
  late final _EVP_aria_128_ccm =
      _EVP_aria_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ecb() {
    return _EVP_aria_192_ecb();
  }

  late final _EVP_aria_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ecb');
  late final _EVP_aria_192_ecb =
      _EVP_aria_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cbc() {
    return _EVP_aria_192_cbc();
  }

  late final _EVP_aria_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cbc');
  late final _EVP_aria_192_cbc =
      _EVP_aria_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb1() {
    return _EVP_aria_192_cfb1();
  }

  late final _EVP_aria_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb1');
  late final _EVP_aria_192_cfb1 =
      _EVP_aria_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb8() {
    return _EVP_aria_192_cfb8();
  }

  late final _EVP_aria_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb8');
  late final _EVP_aria_192_cfb8 =
      _EVP_aria_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb128() {
    return _EVP_aria_192_cfb128();
  }

  late final _EVP_aria_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb128');
  late final _EVP_aria_192_cfb128 =
      _EVP_aria_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ctr() {
    return _EVP_aria_192_ctr();
  }

  late final _EVP_aria_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ctr');
  late final _EVP_aria_192_ctr =
      _EVP_aria_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ofb() {
    return _EVP_aria_192_ofb();
  }

  late final _EVP_aria_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ofb');
  late final _EVP_aria_192_ofb =
      _EVP_aria_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_gcm() {
    return _EVP_aria_192_gcm();
  }

  late final _EVP_aria_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_gcm');
  late final _EVP_aria_192_gcm =
      _EVP_aria_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ccm() {
    return _EVP_aria_192_ccm();
  }

  late final _EVP_aria_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ccm');
  late final _EVP_aria_192_ccm =
      _EVP_aria_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ecb() {
    return _EVP_aria_256_ecb();
  }

  late final _EVP_aria_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ecb');
  late final _EVP_aria_256_ecb =
      _EVP_aria_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cbc() {
    return _EVP_aria_256_cbc();
  }

  late final _EVP_aria_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cbc');
  late final _EVP_aria_256_cbc =
      _EVP_aria_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb1() {
    return _EVP_aria_256_cfb1();
  }

  late final _EVP_aria_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb1');
  late final _EVP_aria_256_cfb1 =
      _EVP_aria_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb8() {
    return _EVP_aria_256_cfb8();
  }

  late final _EVP_aria_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb8');
  late final _EVP_aria_256_cfb8 =
      _EVP_aria_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb128() {
    return _EVP_aria_256_cfb128();
  }

  late final _EVP_aria_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb128');
  late final _EVP_aria_256_cfb128 =
      _EVP_aria_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ctr() {
    return _EVP_aria_256_ctr();
  }

  late final _EVP_aria_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ctr');
  late final _EVP_aria_256_ctr =
      _EVP_aria_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ofb() {
    return _EVP_aria_256_ofb();
  }

  late final _EVP_aria_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ofb');
  late final _EVP_aria_256_ofb =
      _EVP_aria_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_gcm() {
    return _EVP_aria_256_gcm();
  }

  late final _EVP_aria_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_gcm');
  late final _EVP_aria_256_gcm =
      _EVP_aria_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ccm() {
    return _EVP_aria_256_ccm();
  }

  late final _EVP_aria_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ccm');
  late final _EVP_aria_256_ccm =
      _EVP_aria_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ecb() {
    return _EVP_camellia_128_ecb();
  }

  late final _EVP_camellia_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ecb');
  late final _EVP_camellia_128_ecb =
      _EVP_camellia_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cbc() {
    return _EVP_camellia_128_cbc();
  }

  late final _EVP_camellia_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cbc');
  late final _EVP_camellia_128_cbc =
      _EVP_camellia_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb1() {
    return _EVP_camellia_128_cfb1();
  }

  late final _EVP_camellia_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb1');
  late final _EVP_camellia_128_cfb1 = _EVP_camellia_128_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb8() {
    return _EVP_camellia_128_cfb8();
  }

  late final _EVP_camellia_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb8');
  late final _EVP_camellia_128_cfb8 = _EVP_camellia_128_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb128() {
    return _EVP_camellia_128_cfb128();
  }

  late final _EVP_camellia_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb128');
  late final _EVP_camellia_128_cfb128 = _EVP_camellia_128_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ofb() {
    return _EVP_camellia_128_ofb();
  }

  late final _EVP_camellia_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ofb');
  late final _EVP_camellia_128_ofb =
      _EVP_camellia_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ctr() {
    return _EVP_camellia_128_ctr();
  }

  late final _EVP_camellia_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ctr');
  late final _EVP_camellia_128_ctr =
      _EVP_camellia_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ecb() {
    return _EVP_camellia_192_ecb();
  }

  late final _EVP_camellia_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ecb');
  late final _EVP_camellia_192_ecb =
      _EVP_camellia_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cbc() {
    return _EVP_camellia_192_cbc();
  }

  late final _EVP_camellia_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cbc');
  late final _EVP_camellia_192_cbc =
      _EVP_camellia_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb1() {
    return _EVP_camellia_192_cfb1();
  }

  late final _EVP_camellia_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb1');
  late final _EVP_camellia_192_cfb1 = _EVP_camellia_192_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb8() {
    return _EVP_camellia_192_cfb8();
  }

  late final _EVP_camellia_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb8');
  late final _EVP_camellia_192_cfb8 = _EVP_camellia_192_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb128() {
    return _EVP_camellia_192_cfb128();
  }

  late final _EVP_camellia_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb128');
  late final _EVP_camellia_192_cfb128 = _EVP_camellia_192_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ofb() {
    return _EVP_camellia_192_ofb();
  }

  late final _EVP_camellia_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ofb');
  late final _EVP_camellia_192_ofb =
      _EVP_camellia_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ctr() {
    return _EVP_camellia_192_ctr();
  }

  late final _EVP_camellia_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ctr');
  late final _EVP_camellia_192_ctr =
      _EVP_camellia_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ecb() {
    return _EVP_camellia_256_ecb();
  }

  late final _EVP_camellia_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ecb');
  late final _EVP_camellia_256_ecb =
      _EVP_camellia_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cbc() {
    return _EVP_camellia_256_cbc();
  }

  late final _EVP_camellia_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cbc');
  late final _EVP_camellia_256_cbc =
      _EVP_camellia_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb1() {
    return _EVP_camellia_256_cfb1();
  }

  late final _EVP_camellia_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb1');
  late final _EVP_camellia_256_cfb1 = _EVP_camellia_256_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb8() {
    return _EVP_camellia_256_cfb8();
  }

  late final _EVP_camellia_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb8');
  late final _EVP_camellia_256_cfb8 = _EVP_camellia_256_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb128() {
    return _EVP_camellia_256_cfb128();
  }

  late final _EVP_camellia_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb128');
  late final _EVP_camellia_256_cfb128 = _EVP_camellia_256_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ofb() {
    return _EVP_camellia_256_ofb();
  }

  late final _EVP_camellia_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ofb');
  late final _EVP_camellia_256_ofb =
      _EVP_camellia_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ctr() {
    return _EVP_camellia_256_ctr();
  }

  late final _EVP_camellia_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ctr');
  late final _EVP_camellia_256_ctr =
      _EVP_camellia_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20() {
    return _EVP_chacha20();
  }

  late final _EVP_chacha20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20');
  late final _EVP_chacha20 =
      _EVP_chacha20Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20_poly1305() {
    return _EVP_chacha20_poly1305();
  }

  late final _EVP_chacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20_poly1305');
  late final _EVP_chacha20_poly1305 = _EVP_chacha20_poly1305Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ecb() {
    return _EVP_seed_ecb();
  }

  late final _EVP_seed_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ecb');
  late final _EVP_seed_ecb =
      _EVP_seed_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cbc() {
    return _EVP_seed_cbc();
  }

  late final _EVP_seed_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cbc');
  late final _EVP_seed_cbc =
      _EVP_seed_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cfb128() {
    return _EVP_seed_cfb128();
  }

  late final _EVP_seed_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cfb128');
  late final _EVP_seed_cfb128 =
      _EVP_seed_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ofb() {
    return _EVP_seed_ofb();
  }

  late final _EVP_seed_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ofb');
  late final _EVP_seed_ofb =
      _EVP_seed_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ecb() {
    return _EVP_sm4_ecb();
  }

  late final _EVP_sm4_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ecb');
  late final _EVP_sm4_ecb =
      _EVP_sm4_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cbc() {
    return _EVP_sm4_cbc();
  }

  late final _EVP_sm4_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cbc');
  late final _EVP_sm4_cbc =
      _EVP_sm4_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cfb128() {
    return _EVP_sm4_cfb128();
  }

  late final _EVP_sm4_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cfb128');
  late final _EVP_sm4_cfb128 =
      _EVP_sm4_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ofb() {
    return _EVP_sm4_ofb();
  }

  late final _EVP_sm4_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ofb');
  late final _EVP_sm4_ofb =
      _EVP_sm4_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ctr() {
    return _EVP_sm4_ctr();
  }

  late final _EVP_sm4_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ctr');
  late final _EVP_sm4_ctr =
      _EVP_sm4_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  int EVP_add_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_add_cipher(
      cipher,
    );
  }

  late final _EVP_add_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_add_cipher');
  late final _EVP_add_cipher =
      _EVP_add_cipherPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_add_digest(
    ffi.Pointer<EVP_MD> digest,
  ) {
    return _EVP_add_digest(
      digest,
    );
  }

  late final _EVP_add_digestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_add_digest');
  late final _EVP_add_digest =
      _EVP_add_digestPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_get_cipherbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_cipherbyname(
      name,
    );
  }

  late final _EVP_get_cipherbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<ffi.Char>)>>('EVP_get_cipherbyname');
  late final _EVP_get_cipherbyname = _EVP_get_cipherbynamePtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_MD> EVP_get_digestbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_digestbyname(
      name,
    );
  }

  late final _EVP_get_digestbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<ffi.Char>)>>('EVP_get_digestbyname');
  late final _EVP_get_digestbyname = _EVP_get_digestbynamePtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)>();

  void EVP_CIPHER_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all');
  late final _EVP_CIPHER_do_all = _EVP_CIPHER_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_CIPHER> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_CIPHER_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all_sorted');
  late final _EVP_CIPHER_do_all_sorted =
      _EVP_CIPHER_do_all_sortedPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MD> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all');
  late final _EVP_MD_do_all = _EVP_MD_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MD> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_MD> ciph,
                    ffi.Pointer<ffi.Char> from,
                    ffi.Pointer<ffi.Char> to,
                    ffi.Pointer<ffi.Void> x)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD> ciph,
                          ffi.Pointer<ffi.Char> from,
                          ffi.Pointer<ffi.Char> to,
                          ffi.Pointer<ffi.Void> x)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all_sorted');
  late final _EVP_MD_do_all_sorted = _EVP_MD_do_all_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_MD> ciph,
                      ffi.Pointer<ffi.Char> from,
                      ffi.Pointer<ffi.Char> to,
                      ffi.Pointer<ffi.Void> x)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_decrypt_old(
    ffi.Pointer<ffi.UnsignedChar> dec_key,
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    int enc_key_len,
    ffi.Pointer<EVP_PKEY> private_key,
  ) {
    return _EVP_PKEY_decrypt_old(
      dec_key,
      enc_key,
      enc_key_len,
      private_key,
    );
  }

  late final _EVP_PKEY_decrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_decrypt_old');
  late final _EVP_PKEY_decrypt_old = _EVP_PKEY_decrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_encrypt_old(
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    ffi.Pointer<ffi.UnsignedChar> key,
    int key_len,
    ffi.Pointer<EVP_PKEY> pub_key,
  ) {
    return _EVP_PKEY_encrypt_old(
      enc_key,
      key,
      key_len,
      pub_key,
    );
  }

  late final _EVP_PKEY_encrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_encrypt_old');
  late final _EVP_PKEY_encrypt_old = _EVP_PKEY_encrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_type(
    int type,
  ) {
    return _EVP_PKEY_type(
      type,
    );
  }

  late final _EVP_PKEY_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('EVP_PKEY_type');
  late final _EVP_PKEY_type = _EVP_PKEY_typePtr.asFunction<int Function(int)>();

  int EVP_PKEY_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_id(
      pkey,
    );
  }

  late final _EVP_PKEY_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_id');
  late final _EVP_PKEY_id =
      _EVP_PKEY_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_base_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_base_id(
      pkey,
    );
  }

  late final _EVP_PKEY_base_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_base_id');
  late final _EVP_PKEY_base_id =
      _EVP_PKEY_base_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_bits');
  late final _EVP_PKEY_bits =
      _EVP_PKEY_bitsPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_security_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_security_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_security_bits');
  late final _EVP_PKEY_security_bits = _EVP_PKEY_security_bitsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_size(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_size(
      pkey,
    );
  }

  late final _EVP_PKEY_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_size');
  late final _EVP_PKEY_size =
      _EVP_PKEY_sizePtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return _EVP_PKEY_set_type(
      pkey,
      type,
    );
  }

  late final _EVP_PKEY_set_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_set_type');
  late final _EVP_PKEY_set_type = _EVP_PKEY_set_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_set_type_str(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_set_type_str(
      pkey,
      str,
      len,
    );
  }

  late final _EVP_PKEY_set_type_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_set_type_str');
  late final _EVP_PKEY_set_type_str = _EVP_PKEY_set_type_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_set_alias_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return _EVP_PKEY_set_alias_type(
      pkey,
      type,
    );
  }

  late final _EVP_PKEY_set_alias_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_set_alias_type');
  late final _EVP_PKEY_set_alias_type = _EVP_PKEY_set_alias_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_set1_engine(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_set1_engine(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_set1_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ENGINE>)>>('EVP_PKEY_set1_engine');
  late final _EVP_PKEY_set1_engine = _EVP_PKEY_set1_enginePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<ENGINE> EVP_PKEY_get0_engine(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_engine(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENGINE> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_engine');
  late final _EVP_PKEY_get0_engine = _EVP_PKEY_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_assign(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _EVP_PKEY_assign(
      pkey,
      type,
      key,
    );
  }

  late final _EVP_PKEY_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_assign');
  late final _EVP_PKEY_assign = _EVP_PKEY_assignPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_get0(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0(
      pkey,
    );
  }

  late final _EVP_PKEY_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0');
  late final _EVP_PKEY_get0 = _EVP_PKEY_get0Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_hmac(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_hmac(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_hmacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_hmac');
  late final _EVP_PKEY_get0_hmac = _EVP_PKEY_get0_hmacPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_poly1305(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_poly1305(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_poly1305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_poly1305');
  late final _EVP_PKEY_get0_poly1305 = _EVP_PKEY_get0_poly1305Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_siphash(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get0_siphash(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_siphashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get0_siphash');
  late final _EVP_PKEY_get0_siphash = _EVP_PKEY_get0_siphashPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_set1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<rsa_st> key,
  ) {
    return _EVP_PKEY_set1_RSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<rsa_st>)>>('EVP_PKEY_set1_RSA');
  late final _EVP_PKEY_set1_RSA = _EVP_PKEY_set1_RSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<rsa_st>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get0_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_RSA');
  late final _EVP_PKEY_get0_RSA = _EVP_PKEY_get0_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_RSA');
  late final _EVP_PKEY_get1_RSA = _EVP_PKEY_get1_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dsa_st> key,
  ) {
    return _EVP_PKEY_set1_DSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<dsa_st>)>>('EVP_PKEY_set1_DSA');
  late final _EVP_PKEY_set1_DSA = _EVP_PKEY_set1_DSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dsa_st>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get0_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_DSA');
  late final _EVP_PKEY_get0_DSA = _EVP_PKEY_get0_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_DSA');
  late final _EVP_PKEY_get1_DSA = _EVP_PKEY_get1_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dh_st> key,
  ) {
    return _EVP_PKEY_set1_DH(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>>('EVP_PKEY_set1_DH');
  late final _EVP_PKEY_set1_DH = _EVP_PKEY_set1_DHPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get0_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dh_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_DH');
  late final _EVP_PKEY_get0_DH = _EVP_PKEY_get0_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dh_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_DH');
  late final _EVP_PKEY_get1_DH = _EVP_PKEY_get1_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ec_key_st> key,
  ) {
    return _EVP_PKEY_set1_EC_KEY(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ec_key_st>)>>('EVP_PKEY_set1_EC_KEY');
  late final _EVP_PKEY_set1_EC_KEY = _EVP_PKEY_set1_EC_KEYPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ec_key_st>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get0_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_EC_KEY');
  late final _EVP_PKEY_get0_EC_KEY = _EVP_PKEY_get0_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_EC_KEY');
  late final _EVP_PKEY_get1_EC_KEY = _EVP_PKEY_get1_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new() {
    return _EVP_PKEY_new();
  }

  late final _EVP_PKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function()>>(
          'EVP_PKEY_new');
  late final _EVP_PKEY_new =
      _EVP_PKEY_newPtr.asFunction<ffi.Pointer<EVP_PKEY> Function()>();

  int EVP_PKEY_up_ref(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_up_ref(
      pkey,
    );
  }

  late final _EVP_PKEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_up_ref');
  late final _EVP_PKEY_up_ref =
      _EVP_PKEY_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  void EVP_PKEY_free(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_free(
      pkey,
    );
  }

  late final _EVP_PKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_free');
  late final _EVP_PKEY_free =
      _EVP_PKEY_freePtr.asFunction<void Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PublicKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PublicKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PublicKey');
  late final _d2i_PublicKey = _d2i_PublicKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PublicKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PublicKey(
      a,
      pp,
    );
  }

  late final _i2d_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PublicKey');
  late final _i2d_PublicKey = _i2d_PublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PrivateKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PrivateKey');
  late final _d2i_PrivateKey = _d2i_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<EVP_PKEY> d2i_AutoPrivateKey(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_AutoPrivateKey(
      a,
      pp,
      length,
    );
  }

  late final _d2i_AutoPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_AutoPrivateKey');
  late final _d2i_AutoPrivateKey = _d2i_AutoPrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PrivateKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PrivateKey(
      a,
      pp,
    );
  }

  late final _i2d_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PrivateKey');
  late final _i2d_PrivateKey = _i2d_PrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int EVP_PKEY_copy_parameters(
    ffi.Pointer<EVP_PKEY> to,
    ffi.Pointer<EVP_PKEY> from,
  ) {
    return _EVP_PKEY_copy_parameters(
      to,
      from,
    );
  }

  late final _EVP_PKEY_copy_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_copy_parameters');
  late final _EVP_PKEY_copy_parameters = _EVP_PKEY_copy_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_missing_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_missing_parameters(
      pkey,
    );
  }

  late final _EVP_PKEY_missing_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_missing_parameters');
  late final _EVP_PKEY_missing_parameters = _EVP_PKEY_missing_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_save_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
    int mode,
  ) {
    return _EVP_PKEY_save_parameters(
      pkey,
      mode,
    );
  }

  late final _EVP_PKEY_save_parametersPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_save_parameters');
  late final _EVP_PKEY_save_parameters = _EVP_PKEY_save_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_cmp_parameters(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp_parameters(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmp_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp_parameters');
  late final _EVP_PKEY_cmp_parameters = _EVP_PKEY_cmp_parametersPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_cmp(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp');
  late final _EVP_PKEY_cmp = _EVP_PKEY_cmpPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_print_public(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_public(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_public');
  late final _EVP_PKEY_print_public = _EVP_PKEY_print_publicPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_private(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_private(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_private');
  late final _EVP_PKEY_print_private = _EVP_PKEY_print_privatePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_params(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_params(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_params');
  late final _EVP_PKEY_print_params = _EVP_PKEY_print_paramsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_get_default_digest_nid(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> pnid,
  ) {
    return _EVP_PKEY_get_default_digest_nid(
      pkey,
      pnid,
    );
  }

  late final _EVP_PKEY_get_default_digest_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_default_digest_nid');
  late final _EVP_PKEY_get_default_digest_nid =
      _EVP_PKEY_get_default_digest_nidPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_set1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pt,
    int ptlen,
  ) {
    return _EVP_PKEY_set1_tls_encodedpoint(
      pkey,
      pt,
      ptlen,
    );
  }

  late final _EVP_PKEY_set1_tls_encodedpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_set1_tls_encodedpoint');
  late final _EVP_PKEY_set1_tls_encodedpoint =
      _EVP_PKEY_set1_tls_encodedpointPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ppt,
  ) {
    return _EVP_PKEY_get1_tls_encodedpoint(
      pkey,
      ppt,
    );
  }

  late final _EVP_PKEY_get1_tls_encodedpointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<EVP_PKEY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'EVP_PKEY_get1_tls_encodedpoint');
  late final _EVP_PKEY_get1_tls_encodedpoint =
      _EVP_PKEY_get1_tls_encodedpointPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int EVP_CIPHER_type(
    ffi.Pointer<EVP_CIPHER> ctx,
  ) {
    return _EVP_CIPHER_type(
      ctx,
    );
  }

  late final _EVP_CIPHER_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_type');
  late final _EVP_CIPHER_type =
      _EVP_CIPHER_typePtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_param_to_asn1(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_param_to_asn1(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_param_to_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_param_to_asn1');
  late final _EVP_CIPHER_param_to_asn1 =
      _EVP_CIPHER_param_to_asn1Ptr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_asn1_to_param(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_asn1_to_param(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_asn1_to_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_asn1_to_param');
  late final _EVP_CIPHER_asn1_to_param =
      _EVP_CIPHER_asn1_to_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_set_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_set_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_set_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_set_asn1_iv');
  late final _EVP_CIPHER_set_asn1_iv = _EVP_CIPHER_set_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_get_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_get_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_get_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_get_asn1_iv');
  late final _EVP_CIPHER_get_asn1_iv = _EVP_CIPHER_get_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int PKCS5_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_PBE_keyivgen');
  late final _PKCS5_PBE_keyivgen = _PKCS5_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int PKCS5_PBKDF2_HMAC_SHA1(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC_SHA1(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMAC_SHA1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC_SHA1');
  late final _PKCS5_PBKDF2_HMAC_SHA1 = _PKCS5_PBKDF2_HMAC_SHA1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_PBKDF2_HMAC(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    ffi.Pointer<EVP_MD> digest,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      digest,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMACPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC');
  late final _PKCS5_PBKDF2_HMAC = _PKCS5_PBKDF2_HMACPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, ffi.Pointer<EVP_MD>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_v2_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_PBE_keyivgen');
  late final _PKCS5_v2_PBE_keyivgen = _PKCS5_v2_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int EVP_PBE_scrypt(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int N,
    int r,
    int p,
    int maxmem,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PBE_scrypt(
      pass,
      passlen,
      salt,
      saltlen,
      N,
      r,
      p,
      maxmem,
      key,
      keylen,
    );
  }

  late final _EVP_PBE_scryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PBE_scrypt');
  late final _EVP_PBE_scrypt = _EVP_PBE_scryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int PKCS5_v2_scrypt_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_scrypt_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      c,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_scrypt_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_scrypt_keyivgen');
  late final _PKCS5_v2_scrypt_keyivgen =
      _PKCS5_v2_scrypt_keyivgenPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              int)>();

  void PKCS5_PBE_add() {
    return _PKCS5_PBE_add();
  }

  late final _PKCS5_PBE_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PKCS5_PBE_add');
  late final _PKCS5_PBE_add = _PKCS5_PBE_addPtr.asFunction<void Function()>();

  int EVP_PBE_CipherInit(
    ffi.Pointer<ASN1_OBJECT> pbe_obj,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int en_de,
  ) {
    return _EVP_PBE_CipherInit(
      pbe_obj,
      pass,
      passlen,
      param,
      ctx,
      en_de,
    );
  }

  late final _EVP_PBE_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_PBE_CipherInit');
  late final _EVP_PBE_CipherInit = _EVP_PBE_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ASN1_TYPE>, ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_PBE_alg_add_type(
    int pbe_type,
    int pbe_nid,
    int cipher_nid,
    int md_nid,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add_type(
      pbe_type,
      pbe_nid,
      cipher_nid,
      md_nid,
      keygen,
    );
  }

  late final _EVP_PBE_alg_add_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add_type');
  late final _EVP_PBE_alg_add_type = _EVP_PBE_alg_add_typePtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_alg_add(
    int nid,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add(
      nid,
      cipher,
      md,
      keygen,
    );
  }

  late final _EVP_PBE_alg_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add');
  late final _EVP_PBE_alg_add = _EVP_PBE_alg_addPtr.asFunction<
      int Function(int, ffi.Pointer<EVP_CIPHER>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_find(
    int type,
    int pbe_nid,
    ffi.Pointer<ffi.Int> pcnid,
    ffi.Pointer<ffi.Int> pmnid,
    ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>> pkeygen,
  ) {
    return _EVP_PBE_find(
      type,
      pbe_nid,
      pcnid,
      pmnid,
      pkeygen,
    );
  }

  late final _EVP_PBE_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>>('EVP_PBE_find');
  late final _EVP_PBE_find = _EVP_PBE_findPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>();

  void EVP_PBE_cleanup() {
    return _EVP_PBE_cleanup();
  }

  late final _EVP_PBE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_PBE_cleanup');
  late final _EVP_PBE_cleanup =
      _EVP_PBE_cleanupPtr.asFunction<void Function()>();

  int EVP_PBE_get(
    ffi.Pointer<ffi.Int> ptype,
    ffi.Pointer<ffi.Int> ppbe_nid,
    int num,
  ) {
    return _EVP_PBE_get(
      ptype,
      ppbe_nid,
      num,
    );
  }

  late final _EVP_PBE_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Size)>>('EVP_PBE_get');
  late final _EVP_PBE_get = _EVP_PBE_getPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  int EVP_PKEY_asn1_get_count() {
    return _EVP_PKEY_asn1_get_count();
  }

  late final _EVP_PKEY_asn1_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'EVP_PKEY_asn1_get_count');
  late final _EVP_PKEY_asn1_get_count =
      _EVP_PKEY_asn1_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_get0(
    int idx,
  ) {
    return _EVP_PKEY_asn1_get0(
      idx,
    );
  }

  late final _EVP_PKEY_asn1_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Int)>>('EVP_PKEY_asn1_get0');
  late final _EVP_PKEY_asn1_get0 = _EVP_PKEY_asn1_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    int type,
  ) {
    return _EVP_PKEY_asn1_find(
      pe,
      type,
    );
  }

  late final _EVP_PKEY_asn1_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Int)>>('EVP_PKEY_asn1_find');
  late final _EVP_PKEY_asn1_find = _EVP_PKEY_asn1_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find_str(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_asn1_find_str(
      pe,
      str,
      len,
    );
  }

  late final _EVP_PKEY_asn1_find_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_asn1_find_str');
  late final _EVP_PKEY_asn1_find_str = _EVP_PKEY_asn1_find_strPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_asn1_add0(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_add0(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_add0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_add0');
  late final _EVP_PKEY_asn1_add0 = _EVP_PKEY_asn1_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  int EVP_PKEY_asn1_add_alias(
    int to,
    int from,
  ) {
    return _EVP_PKEY_asn1_add_alias(
      to,
      from,
    );
  }

  late final _EVP_PKEY_asn1_add_aliasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'EVP_PKEY_asn1_add_alias');
  late final _EVP_PKEY_asn1_add_alias =
      _EVP_PKEY_asn1_add_aliasPtr.asFunction<int Function(int, int)>();

  int EVP_PKEY_asn1_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pkey_base_id,
    ffi.Pointer<ffi.Int> ppkey_flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pinfo,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ppem_str,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_get0_info(
      ppkey_id,
      pkey_base_id,
      ppkey_flags,
      pinfo,
      ppem_str,
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_get0_info');
  late final _EVP_PKEY_asn1_get0_info = _EVP_PKEY_asn1_get0_infoPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_get0_asn1(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_asn1(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_asn1');
  late final _EVP_PKEY_get0_asn1 = _EVP_PKEY_get0_asn1Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_new(
    int id,
    int flags,
    ffi.Pointer<ffi.Char> pem_str,
    ffi.Pointer<ffi.Char> info,
  ) {
    return _EVP_PKEY_asn1_new(
      id,
      flags,
      pem_str,
      info,
    );
  }

  late final _EVP_PKEY_asn1_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_asn1_new');
  late final _EVP_PKEY_asn1_new = _EVP_PKEY_asn1_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void EVP_PKEY_asn1_copy(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> dst,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> src,
  ) {
    return _EVP_PKEY_asn1_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_asn1_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_copy');
  late final _EVP_PKEY_asn1_copy = _EVP_PKEY_asn1_copyPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_free(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_free');
  late final _EVP_PKEY_asn1_free = _EVP_PKEY_asn1_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_set_public(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk, ffi.Pointer<X509_PUBKEY> pub)>>
        pub_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<X509_PUBKEY> pub, ffi.Pointer<EVP_PKEY> pk)>>
        pub_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>
        pub_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        pub_print,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_size,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_bits,
  ) {
    return _EVP_PKEY_asn1_set_public(
      ameth,
      pub_decode,
      pub_encode,
      pub_cmp,
      pub_print,
      pkey_size,
      pkey_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<X509_PUBKEY> pub)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_PUBKEY> pub,
                              ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> a,
                              ffi.Pointer<EVP_PKEY> b)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIO> out,
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int indent,
                              ffi.Pointer<ASN1_PCTX> pctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_public');
  late final _EVP_PKEY_asn1_set_public = _EVP_PKEY_asn1_set_publicPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> pk, ffi.Pointer<X509_PUBKEY> pub)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_PUBKEY> pub, ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO> out,
                      ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Int indent,
                      ffi.Pointer<ASN1_PCTX> pctx)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_private(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>
        priv_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                    ffi.Pointer<EVP_PKEY> pk)>>
        priv_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        priv_print,
  ) {
    return _EVP_PKEY_asn1_set_private(
      ameth,
      priv_decode,
      priv_encode,
      priv_print,
    );
  }

  late final _EVP_PKEY_asn1_set_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                              ffi.Pointer<EVP_PKEY> pk)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIO> out,
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int indent,
                              ffi.Pointer<ASN1_PCTX> pctx)>>)>>(
      'EVP_PKEY_asn1_set_private');
  late final _EVP_PKEY_asn1_set_private =
      _EVP_PKEY_asn1_set_privatePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
                          ffi.Pointer<EVP_PKEY> pk)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO> out,
                          ffi.Pointer<EVP_PKEY> pkey,
                          ffi.Int indent,
                          ffi.Pointer<ASN1_PCTX> pctx)>>)>();

  void EVP_PKEY_asn1_set_param(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                    ffi.Int derlen)>>
        param_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>
        param_encode,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        param_missing,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> to, ffi.Pointer<EVP_PKEY> from)>>
        param_copy,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>
        param_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO> out,
                    ffi.Pointer<EVP_PKEY> pkey,
                    ffi.Int indent,
                    ffi.Pointer<ASN1_PCTX> pctx)>>
        param_print,
  ) {
    return _EVP_PKEY_asn1_set_param(
      ameth,
      param_decode,
      param_encode,
      param_missing,
      param_copy,
      param_cmp,
      param_print,
    );
  }

  late final _EVP_PKEY_asn1_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pkey,
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                          ffi.Int derlen)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> to,
                          ffi.Pointer<EVP_PKEY> from)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO> out,
                          ffi.Pointer<EVP_PKEY> pkey,
                          ffi.Int indent,
                          ffi.Pointer<ASN1_PCTX> pctx)>>)>>('EVP_PKEY_asn1_set_param');
  late final _EVP_PKEY_asn1_set_param = _EVP_PKEY_asn1_set_paramPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
                      ffi.Int derlen)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> to, ffi.Pointer<EVP_PKEY> from)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO> out,
                      ffi.Pointer<EVP_PKEY> pkey,
                      ffi.Int indent,
                      ffi.Pointer<ASN1_PCTX> pctx)>>)>();

  void EVP_PKEY_asn1_set_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>
        pkey_free,
  ) {
    return _EVP_PKEY_asn1_set_free(
      ameth,
      pkey_free,
    );
  }

  late final _EVP_PKEY_asn1_set_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_asn1_set_free');
  late final _EVP_PKEY_asn1_set_free = _EVP_PKEY_asn1_set_freePtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_asn1_set_ctrl(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey, ffi.Int op,
                    ffi.Long arg1, ffi.Pointer<ffi.Void> arg2)>>
        pkey_ctrl,
  ) {
    return _EVP_PKEY_asn1_set_ctrl(
      ameth,
      pkey_ctrl,
    );
  }

  late final _EVP_PKEY_asn1_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pkey,
                              ffi.Int op,
                              ffi.Long arg1,
                              ffi.Pointer<ffi.Void> arg2)>>)>>(
      'EVP_PKEY_asn1_set_ctrl');
  late final _EVP_PKEY_asn1_set_ctrl = _EVP_PKEY_asn1_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey, ffi.Int op,
                      ffi.Long arg1, ffi.Pointer<ffi.Void> arg2)>>)>();

  void EVP_PKEY_asn1_set_item(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ASN1_ITEM> it,
                    ffi.Pointer<ffi.Void> asn,
                    ffi.Pointer<X509_ALGOR> a,
                    ffi.Pointer<ASN1_BIT_STRING> sig,
                    ffi.Pointer<EVP_PKEY> pkey)>>
        item_verify,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ASN1_ITEM> it,
                    ffi.Pointer<ffi.Void> asn,
                    ffi.Pointer<X509_ALGOR> alg1,
                    ffi.Pointer<X509_ALGOR> alg2,
                    ffi.Pointer<ASN1_BIT_STRING> sig)>>
        item_sign,
  ) {
    return _EVP_PKEY_asn1_set_item(
      ameth,
      item_verify,
      item_sign,
    );
  }

  late final _EVP_PKEY_asn1_set_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ASN1_ITEM> it,
                              ffi.Pointer<ffi.Void> asn,
                              ffi.Pointer<X509_ALGOR> a,
                              ffi.Pointer<ASN1_BIT_STRING> sig,
                              ffi.Pointer<EVP_PKEY> pkey)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ASN1_ITEM> it,
                              ffi.Pointer<ffi.Void> asn,
                              ffi.Pointer<X509_ALGOR> alg1,
                              ffi.Pointer<X509_ALGOR> alg2,
                              ffi.Pointer<ASN1_BIT_STRING> sig)>>)>>(
      'EVP_PKEY_asn1_set_item');
  late final _EVP_PKEY_asn1_set_item = _EVP_PKEY_asn1_set_itemPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ASN1_ITEM> it,
                      ffi.Pointer<ffi.Void> asn,
                      ffi.Pointer<X509_ALGOR> a,
                      ffi.Pointer<ASN1_BIT_STRING> sig,
                      ffi.Pointer<EVP_PKEY> pkey)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX> ctx,
                      ffi.Pointer<ASN1_ITEM> it,
                      ffi.Pointer<ffi.Void> asn,
                      ffi.Pointer<X509_ALGOR> alg1,
                      ffi.Pointer<X509_ALGOR> alg2,
                      ffi.Pointer<ASN1_BIT_STRING> sig)>>)>();

  void EVP_PKEY_asn1_set_siginf(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<X509_SIG_INFO> siginf,
                    ffi.Pointer<X509_ALGOR> alg, ffi.Pointer<ASN1_STRING> sig)>>
        siginf_set,
  ) {
    return _EVP_PKEY_asn1_set_siginf(
      ameth,
      siginf_set,
    );
  }

  late final _EVP_PKEY_asn1_set_siginfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<X509_SIG_INFO> siginf,
                              ffi.Pointer<X509_ALGOR> alg,
                              ffi.Pointer<ASN1_STRING> sig)>>)>>(
      'EVP_PKEY_asn1_set_siginf');
  late final _EVP_PKEY_asn1_set_siginf =
      _EVP_PKEY_asn1_set_siginfPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<X509_SIG_INFO> siginf,
                          ffi.Pointer<X509_ALGOR> alg,
                          ffi.Pointer<ASN1_STRING> sig)>>)>();

  void EVP_PKEY_asn1_set_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_check,
  ) {
    return _EVP_PKEY_asn1_set_check(
      ameth,
      pkey_check,
    );
  }

  late final _EVP_PKEY_asn1_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_check');
  late final _EVP_PKEY_asn1_set_check = _EVP_PKEY_asn1_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_public_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_pub_check,
  ) {
    return _EVP_PKEY_asn1_set_public_check(
      ameth,
      pkey_pub_check,
    );
  }

  late final _EVP_PKEY_asn1_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_public_check');
  late final _EVP_PKEY_asn1_set_public_check =
      _EVP_PKEY_asn1_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_param_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_param_check,
  ) {
    return _EVP_PKEY_asn1_set_param_check(
      ameth,
      pkey_param_check,
    );
  }

  late final _EVP_PKEY_asn1_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_param_check');
  late final _EVP_PKEY_asn1_set_param_check =
      _EVP_PKEY_asn1_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  void EVP_PKEY_asn1_set_set_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> priv, ffi.Size len)>>
        set_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_set_priv_key(
      ameth,
      set_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_priv_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Size len)>>)>>('EVP_PKEY_asn1_set_set_priv_key');
  late final _EVP_PKEY_asn1_set_set_priv_key =
      _EVP_PKEY_asn1_set_set_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Size len)>>)>();

  void EVP_PKEY_asn1_set_set_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> pub, ffi.Size len)>>
        set_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_set_pub_key(
      ameth,
      set_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_pub_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Size len)>>)>>('EVP_PKEY_asn1_set_set_pub_key');
  late final _EVP_PKEY_asn1_set_set_pub_key =
      _EVP_PKEY_asn1_set_set_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Size len)>>)>();

  void EVP_PKEY_asn1_set_get_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> priv,
                    ffi.Pointer<ffi.Size> len)>>
        get_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_get_priv_key(
      ameth,
      get_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_priv_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<ffi.UnsignedChar> priv,
                              ffi.Pointer<ffi.Size> len)>>)>>(
      'EVP_PKEY_asn1_set_get_priv_key');
  late final _EVP_PKEY_asn1_set_get_priv_key =
      _EVP_PKEY_asn1_set_get_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> priv,
                          ffi.Pointer<ffi.Size> len)>>)>();

  void EVP_PKEY_asn1_set_get_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY> pk,
                    ffi.Pointer<ffi.UnsignedChar> pub,
                    ffi.Pointer<ffi.Size> len)>>
        get_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_get_pub_key(
      ameth,
      get_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_pub_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY> pk,
                              ffi.Pointer<ffi.UnsignedChar> pub,
                              ffi.Pointer<ffi.Size> len)>>)>>(
      'EVP_PKEY_asn1_set_get_pub_key');
  late final _EVP_PKEY_asn1_set_get_pub_key =
      _EVP_PKEY_asn1_set_get_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY> pk,
                          ffi.Pointer<ffi.UnsignedChar> pub,
                          ffi.Pointer<ffi.Size> len)>>)>();

  void EVP_PKEY_asn1_set_security_bits(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>
        pkey_security_bits,
  ) {
    return _EVP_PKEY_asn1_set_security_bits(
      ameth,
      pkey_security_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_security_bitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>>(
      'EVP_PKEY_asn1_set_security_bits');
  late final _EVP_PKEY_asn1_set_security_bits =
      _EVP_PKEY_asn1_set_security_bitsPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pk)>>)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_find(
    int type,
  ) {
    return _EVP_PKEY_meth_find(
      type,
    );
  }

  late final _EVP_PKEY_meth_findPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Int)>>(
      'EVP_PKEY_meth_find');
  late final _EVP_PKEY_meth_find = _EVP_PKEY_meth_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_new(
    int id,
    int flags,
  ) {
    return _EVP_PKEY_meth_new(
      id,
      flags,
    );
  }

  late final _EVP_PKEY_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_METHOD> Function(
              ffi.Int, ffi.Int)>>('EVP_PKEY_meth_new');
  late final _EVP_PKEY_meth_new = _EVP_PKEY_meth_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int, int)>();

  void EVP_PKEY_meth_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pflags,
    ffi.Pointer<EVP_PKEY_METHOD> meth,
  ) {
    return _EVP_PKEY_meth_get0_info(
      ppkey_id,
      pflags,
      meth,
    );
  }

  late final _EVP_PKEY_meth_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_get0_info');
  late final _EVP_PKEY_meth_get0_info = _EVP_PKEY_meth_get0_infoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_copy(
    ffi.Pointer<EVP_PKEY_METHOD> dst,
    ffi.Pointer<EVP_PKEY_METHOD> src,
  ) {
    return _EVP_PKEY_meth_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_meth_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_copy');
  late final _EVP_PKEY_meth_copy = _EVP_PKEY_meth_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>, ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_free(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_free(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_free');
  late final _EVP_PKEY_meth_free = _EVP_PKEY_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_add0(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_add0(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_add0Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_add0');
  late final _EVP_PKEY_meth_add0 = _EVP_PKEY_meth_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_remove(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_remove(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_remove');
  late final _EVP_PKEY_meth_remove = _EVP_PKEY_meth_removePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_get_count() {
    return _EVP_PKEY_meth_get_count();
  }

  late final _EVP_PKEY_meth_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'EVP_PKEY_meth_get_count');
  late final _EVP_PKEY_meth_get_count =
      _EVP_PKEY_meth_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_get0(
    int idx,
  ) {
    return _EVP_PKEY_meth_get0(
      idx,
    );
  }

  late final _EVP_PKEY_meth_get0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Size)>>(
      'EVP_PKEY_meth_get0');
  late final _EVP_PKEY_meth_get0 = _EVP_PKEY_meth_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new');
  late final _EVP_PKEY_CTX_new = _EVP_PKEY_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_id(
    int id,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new_id(
      id,
      e,
    );
  }

  late final _EVP_PKEY_CTX_new_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Int, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new_id');
  late final _EVP_PKEY_CTX_new_id = _EVP_PKEY_CTX_new_idPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(int, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_dup(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_dup(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_dup');
  late final _EVP_PKEY_CTX_dup = _EVP_PKEY_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_free(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_free(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_free');
  late final _EVP_PKEY_CTX_free = _EVP_PKEY_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_PKEY_CTX_ctrl(
      ctx,
      keytype,
      optype,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_PKEY_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_ctrl');
  late final _EVP_PKEY_CTX_ctrl = _EVP_PKEY_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_CTX_ctrl_str(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _EVP_PKEY_CTX_ctrl_str(
      ctx,
      type,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_ctrl_str');
  late final _EVP_PKEY_CTX_ctrl_str = _EVP_PKEY_CTX_ctrl_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_ctrl_uint64(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int value,
  ) {
    return _EVP_PKEY_CTX_ctrl_uint64(
      ctx,
      keytype,
      optype,
      cmd,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Uint64)>>('EVP_PKEY_CTX_ctrl_uint64');
  late final _EVP_PKEY_CTX_ctrl_uint64 =
      _EVP_PKEY_CTX_ctrl_uint64Ptr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int)>();

  int EVP_PKEY_CTX_str2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _EVP_PKEY_CTX_str2ctrl(
      ctx,
      cmd,
      str,
    );
  }

  late final _EVP_PKEY_CTX_str2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_str2ctrl');
  late final _EVP_PKEY_CTX_str2ctrl = _EVP_PKEY_CTX_str2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_hex2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> hex,
  ) {
    return _EVP_PKEY_CTX_hex2ctrl(
      ctx,
      cmd,
      hex,
    );
  }

  late final _EVP_PKEY_CTX_hex2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_hex2ctrl');
  late final _EVP_PKEY_CTX_hex2ctrl = _EVP_PKEY_CTX_hex2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int optype,
    int cmd,
    ffi.Pointer<ffi.Char> md,
  ) {
    return _EVP_PKEY_CTX_md(
      ctx,
      optype,
      cmd,
      md,
    );
  }

  late final _EVP_PKEY_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_md');
  late final _EVP_PKEY_CTX_md = _EVP_PKEY_CTX_mdPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, int, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_get_operation(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_operation(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_operationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_get_operation');
  late final _EVP_PKEY_CTX_get_operation = _EVP_PKEY_CTX_get_operationPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set0_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> dat,
    int datlen,
  ) {
    return _EVP_PKEY_CTX_set0_keygen_info(
      ctx,
      dat,
      datlen,
    );
  }

  late final _EVP_PKEY_CTX_set0_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('EVP_PKEY_CTX_set0_keygen_info');
  late final _EVP_PKEY_CTX_set0_keygen_info =
      _EVP_PKEY_CTX_set0_keygen_infoPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_mac_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PKEY_new_mac_key(
      type,
      e,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_new_mac_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Int, ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_PKEY_new_mac_key');
  late final _EVP_PKEY_new_mac_key = _EVP_PKEY_new_mac_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_private_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
  ) {
    return _EVP_PKEY_new_raw_private_key(
      type,
      e,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_private_key');
  late final _EVP_PKEY_new_raw_private_key =
      _EVP_PKEY_new_raw_private_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_public_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> pub,
    int len,
  ) {
    return _EVP_PKEY_new_raw_public_key(
      type,
      e,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_new_raw_public_key');
  late final _EVP_PKEY_new_raw_public_key =
      _EVP_PKEY_new_raw_public_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get_raw_private_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> priv,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get_raw_private_key(
      pkey,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_raw_private_key');
  late final _EVP_PKEY_get_raw_private_key =
      _EVP_PKEY_get_raw_private_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_get_raw_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pub,
    ffi.Pointer<ffi.Size> len,
  ) {
    return _EVP_PKEY_get_raw_public_key(
      pkey,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_get_raw_public_key');
  late final _EVP_PKEY_get_raw_public_key =
      _EVP_PKEY_get_raw_public_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_CMAC_key(
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_PKEY_new_CMAC_key(
      e,
      priv,
      len,
      cipher,
    );
  }

  late final _EVP_PKEY_new_CMAC_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<EVP_CIPHER>)>>('EVP_PKEY_new_CMAC_key');
  late final _EVP_PKEY_new_CMAC_key = _EVP_PKEY_new_CMAC_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EVP_CIPHER>)>();

  void EVP_PKEY_CTX_set_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_data');
  late final _EVP_PKEY_CTX_set_data = _EVP_PKEY_CTX_set_dataPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_data');
  late final _EVP_PKEY_CTX_get_data = _EVP_PKEY_CTX_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_pkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_pkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_pkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_pkey');
  late final _EVP_PKEY_CTX_get0_pkey = _EVP_PKEY_CTX_get0_pkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_peerkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_peerkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_peerkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_peerkey');
  late final _EVP_PKEY_CTX_get0_peerkey = _EVP_PKEY_CTX_get0_peerkeyPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_app_data');
  late final _EVP_PKEY_CTX_set_app_data =
      _EVP_PKEY_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_app_data');
  late final _EVP_PKEY_CTX_get_app_data = _EVP_PKEY_CTX_get_app_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_sign_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_sign_init(
      ctx,
    );
  }

  late final _EVP_PKEY_sign_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_sign_init');
  late final _EVP_PKEY_sign_init = _EVP_PKEY_sign_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_sign(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Size> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_sign(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_sign');
  late final _EVP_PKEY_sign = _EVP_PKEY_signPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_init');
  late final _EVP_PKEY_verify_init = _EVP_PKEY_verify_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_verify(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_verify');
  late final _EVP_PKEY_verify = _EVP_PKEY_verifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_recover_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_recover_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_recover_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_recover_init');
  late final _EVP_PKEY_verify_recover_init = _EVP_PKEY_verify_recover_initPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify_recover(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> rout,
    ffi.Pointer<ffi.Size> routlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_PKEY_verify_recover(
      ctx,
      rout,
      routlen,
      sig,
      siglen,
    );
  }

  late final _EVP_PKEY_verify_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_verify_recover');
  late final _EVP_PKEY_verify_recover = _EVP_PKEY_verify_recoverPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_encrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_encrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_encrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_encrypt_init');
  late final _EVP_PKEY_encrypt_init = _EVP_PKEY_encrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_encrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Size> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_encrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_encrypt');
  late final _EVP_PKEY_encrypt = _EVP_PKEY_encryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_decrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_decrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_decrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_decrypt_init');
  late final _EVP_PKEY_decrypt_init = _EVP_PKEY_decrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_decrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Size> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_decrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size)>>('EVP_PKEY_decrypt');
  late final _EVP_PKEY_decrypt = _EVP_PKEY_decryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_derive_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_derive_init(
      ctx,
    );
  }

  late final _EVP_PKEY_derive_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_derive_init');
  late final _EVP_PKEY_derive_init = _EVP_PKEY_derive_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_derive_set_peer(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> peer,
  ) {
    return _EVP_PKEY_derive_set_peer(
      ctx,
      peer,
    );
  }

  late final _EVP_PKEY_derive_set_peerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_derive_set_peer');
  late final _EVP_PKEY_derive_set_peer =
      _EVP_PKEY_derive_set_peerPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_derive(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.Size> keylen,
  ) {
    return _EVP_PKEY_derive(
      ctx,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Size>)>>('EVP_PKEY_derive');
  late final _EVP_PKEY_derive = _EVP_PKEY_derivePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Size>)>();

  int EVP_PKEY_paramgen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_paramgen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_paramgen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_paramgen_init');
  late final _EVP_PKEY_paramgen_init = _EVP_PKEY_paramgen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_paramgen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_paramgen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_paramgen');
  late final _EVP_PKEY_paramgen = _EVP_PKEY_paramgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_keygen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_keygen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_keygen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_keygen_init');
  late final _EVP_PKEY_keygen_init = _EVP_PKEY_keygen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_keygen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_keygen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_keygen');
  late final _EVP_PKEY_keygen = _EVP_PKEY_keygenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_check(
      ctx,
    );
  }

  late final _EVP_PKEY_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_check');
  late final _EVP_PKEY_check =
      _EVP_PKEY_checkPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_public_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_public_check(
      ctx,
    );
  }

  late final _EVP_PKEY_public_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_public_check');
  late final _EVP_PKEY_public_check = _EVP_PKEY_public_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_param_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_param_check(
      ctx,
    );
  }

  late final _EVP_PKEY_param_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_param_check');
  late final _EVP_PKEY_param_check = _EVP_PKEY_param_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY_gen_cb> cb,
  ) {
    return _EVP_PKEY_CTX_set_cb(
      ctx,
      cb,
    );
  }

  late final _EVP_PKEY_CTX_set_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY_gen_cb>)>>('EVP_PKEY_CTX_set_cb');
  late final _EVP_PKEY_CTX_set_cb = _EVP_PKEY_CTX_set_cbPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY_gen_cb>)>();

  ffi.Pointer<EVP_PKEY_gen_cb> EVP_PKEY_CTX_get_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_cb(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_gen_cb> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_cb');
  late final _EVP_PKEY_CTX_get_cb = _EVP_PKEY_CTX_get_cbPtr.asFunction<
      ffi.Pointer<EVP_PKEY_gen_cb> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_get_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int idx,
  ) {
    return _EVP_PKEY_CTX_get_keygen_info(
      ctx,
      idx,
    );
  }

  late final _EVP_PKEY_CTX_get_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_get_keygen_info');
  late final _EVP_PKEY_CTX_get_keygen_info = _EVP_PKEY_CTX_get_keygen_infoPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  void EVP_PKEY_meth_set_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        init,
  ) {
    return _EVP_PKEY_meth_set_init(
      pmeth,
      init,
    );
  }

  late final _EVP_PKEY_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>>(
      'EVP_PKEY_meth_set_init');
  late final _EVP_PKEY_meth_set_init = _EVP_PKEY_meth_set_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>();

  void EVP_PKEY_meth_set_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                    ffi.Pointer<EVP_PKEY_CTX> src)>>
        copy,
  ) {
    return _EVP_PKEY_meth_set_copy(
      pmeth,
      copy,
    );
  }

  late final _EVP_PKEY_meth_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                              ffi.Pointer<EVP_PKEY_CTX> src)>>)>>(
      'EVP_PKEY_meth_set_copy');
  late final _EVP_PKEY_meth_set_copy = _EVP_PKEY_meth_set_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                      ffi.Pointer<EVP_PKEY_CTX> src)>>)>();

  void EVP_PKEY_meth_set_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        cleanup,
  ) {
    return _EVP_PKEY_meth_set_cleanup(
      pmeth,
      cleanup,
    );
  }

  late final _EVP_PKEY_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>>(
      'EVP_PKEY_meth_set_cleanup');
  late final _EVP_PKEY_meth_set_cleanup =
      _EVP_PKEY_meth_set_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>)>();

  void EVP_PKEY_meth_set_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        paramgen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Pointer<EVP_PKEY> pkey)>>
        paramgen,
  ) {
    return _EVP_PKEY_meth_set_paramgen(
      pmeth,
      paramgen_init,
      paramgen,
    );
  }

  late final _EVP_PKEY_meth_set_paramgenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_paramgen');
  late final _EVP_PKEY_meth_set_paramgen =
      _EVP_PKEY_meth_set_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        keygen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Pointer<EVP_PKEY> pkey)>>
        keygen,
  ) {
    return _EVP_PKEY_meth_set_keygen(
      pmeth,
      keygen_init,
      keygen,
    );
  }

  late final _EVP_PKEY_meth_set_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_keygen');
  late final _EVP_PKEY_meth_set_keygen =
      _EVP_PKEY_meth_set_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        sign_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        sign,
  ) {
    return _EVP_PKEY_meth_set_sign(
      pmeth,
      sign_init,
      sign,
    );
  }

  late final _EVP_PKEY_meth_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_sign');
  late final _EVP_PKEY_meth_set_sign = _EVP_PKEY_meth_set_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY_CTX> ctx,
                      ffi.Pointer<ffi.UnsignedChar> sig,
                      ffi.Pointer<ffi.Size> siglen,
                      ffi.Pointer<ffi.UnsignedChar> tbs,
                      ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        verify_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Size siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        verify,
  ) {
    return _EVP_PKEY_meth_set_verify(
      pmeth,
      verify_init,
      verify,
    );
  }

  late final _EVP_PKEY_meth_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_verify');
  late final _EVP_PKEY_meth_set_verify =
      _EVP_PKEY_meth_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        verify_recover_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        verify_recover,
  ) {
    return _EVP_PKEY_meth_set_verify_recover(
      pmeth,
      verify_recover_init,
      verify_recover,
    );
  }

  late final _EVP_PKEY_meth_set_verify_recoverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>)>>(
      'EVP_PKEY_meth_set_verify_recover');
  late final _EVP_PKEY_meth_set_verify_recover =
      _EVP_PKEY_meth_set_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        signctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        signctx,
  ) {
    return _EVP_PKEY_meth_set_signctx(
      pmeth,
      signctx_init,
      signctx,
    );
  }

  late final _EVP_PKEY_meth_set_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_signctx');
  late final _EVP_PKEY_meth_set_signctx =
      _EVP_PKEY_meth_set_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_set_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        verifyctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Int siglen,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        verifyctx,
  ) {
    return _EVP_PKEY_meth_set_verifyctx(
      pmeth,
      verifyctx_init,
      verifyctx,
    );
  }

  late final _EVP_PKEY_meth_set_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Int siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_verifyctx');
  late final _EVP_PKEY_meth_set_verifyctx =
      _EVP_PKEY_meth_set_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Int siglen,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_set_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        encrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.Size> outlen,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inlen)>>
        encryptfn,
  ) {
    return _EVP_PKEY_meth_set_encrypt(
      pmeth,
      encrypt_init,
      encryptfn,
    );
  }

  late final _EVP_PKEY_meth_set_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>>('EVP_PKEY_meth_set_encrypt');
  late final _EVP_PKEY_meth_set_encrypt =
      _EVP_PKEY_meth_set_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>();

  void EVP_PKEY_meth_set_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        decrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> out,
                    ffi.Pointer<ffi.Size> outlen,
                    ffi.Pointer<ffi.UnsignedChar> in1,
                    ffi.Size inlen)>>
        decrypt,
  ) {
    return _EVP_PKEY_meth_set_decrypt(
      pmeth,
      decrypt_init,
      decrypt,
    );
  }

  late final _EVP_PKEY_meth_set_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>>('EVP_PKEY_meth_set_decrypt');
  late final _EVP_PKEY_meth_set_decrypt =
      _EVP_PKEY_meth_set_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> out,
                          ffi.Pointer<ffi.Size> outlen,
                          ffi.Pointer<ffi.UnsignedChar> in1,
                          ffi.Size inlen)>>)>();

  void EVP_PKEY_meth_set_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>
        derive_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> key,
                    ffi.Pointer<ffi.Size> keylen)>>
        derive,
  ) {
    return _EVP_PKEY_meth_set_derive(
      pmeth,
      derive_init,
      derive,
    );
  }

  late final _EVP_PKEY_meth_set_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size> keylen)>>)>>(
      'EVP_PKEY_meth_set_derive');
  late final _EVP_PKEY_meth_set_derive =
      _EVP_PKEY_meth_set_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> key,
                          ffi.Pointer<ffi.Size> keylen)>>)>();

  void EVP_PKEY_meth_set_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Int type,
                    ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>
        ctrl,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Char> value)>>
        ctrl_str,
  ) {
    return _EVP_PKEY_meth_set_ctrl(
      pmeth,
      ctrl,
      ctrl_str,
    );
  }

  late final _EVP_PKEY_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Int type, ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.Char> type,
                          ffi.Pointer<ffi.Char>
                              value)>>)>>('EVP_PKEY_meth_set_ctrl');
  late final _EVP_PKEY_meth_set_ctrl = _EVP_PKEY_meth_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx, ffi.Int type,
                      ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY_CTX> ctx,
                      ffi.Pointer<ffi.Char> type,
                      ffi.Pointer<ffi.Char> value)>>)>();

  void EVP_PKEY_meth_set_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.Size> siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_set_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_set_digestsignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>>('EVP_PKEY_meth_set_digestsign');
  late final _EVP_PKEY_meth_set_digestsign =
      _EVP_PKEY_meth_set_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX> ctx,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Size siglen,
                    ffi.Pointer<ffi.UnsignedChar> tbs,
                    ffi.Size tbslen)>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_set_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_set_digestverifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>)>>(
      'EVP_PKEY_meth_set_digestverify');
  late final _EVP_PKEY_meth_set_digestverify =
      _EVP_PKEY_meth_set_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Size siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>)>();

  void EVP_PKEY_meth_set_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_check');
  late final _EVP_PKEY_meth_set_check = _EVP_PKEY_meth_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_public_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_public_check');
  late final _EVP_PKEY_meth_set_public_check =
      _EVP_PKEY_meth_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_param_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>>(
      'EVP_PKEY_meth_set_param_check');
  late final _EVP_PKEY_meth_set_param_check =
      _EVP_PKEY_meth_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>)>();

  void EVP_PKEY_meth_set_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                    ffi.Pointer<EVP_MD_CTX> mctx)>>
        digest_custom,
  ) {
    return _EVP_PKEY_meth_set_digest_custom(
      pmeth,
      digest_custom,
    );
  }

  late final _EVP_PKEY_meth_set_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>)>>(
      'EVP_PKEY_meth_set_digest_custom');
  late final _EVP_PKEY_meth_set_digest_custom =
      _EVP_PKEY_meth_set_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<EVP_MD_CTX> mctx)>>)>();

  void EVP_PKEY_meth_get_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pinit,
  ) {
    return _EVP_PKEY_meth_get_init(
      pmeth,
      pinit,
    );
  }

  late final _EVP_PKEY_meth_get_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>>(
      'EVP_PKEY_meth_get_init');
  late final _EVP_PKEY_meth_get_init = _EVP_PKEY_meth_get_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>();

  void EVP_PKEY_meth_get_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                        ffi.Pointer<EVP_PKEY_CTX> src)>>>
        pcopy,
  ) {
    return _EVP_PKEY_meth_get_copy(
      pmeth,
      pcopy,
    );
  }

  late final _EVP_PKEY_meth_get_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                                  ffi.Pointer<EVP_PKEY_CTX> src)>>>)>>(
      'EVP_PKEY_meth_get_copy');
  late final _EVP_PKEY_meth_get_copy = _EVP_PKEY_meth_get_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> dst,
                          ffi.Pointer<EVP_PKEY_CTX> src)>>>)>();

  void EVP_PKEY_meth_get_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pcleanup,
  ) {
    return _EVP_PKEY_meth_get_cleanup(
      pmeth,
      pcleanup,
    );
  }

  late final _EVP_PKEY_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>>(
      'EVP_PKEY_meth_get_cleanup');
  late final _EVP_PKEY_meth_get_cleanup =
      _EVP_PKEY_meth_get_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx)>>>)>();

  void EVP_PKEY_meth_get_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pparamgen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_PKEY> pkey)>>>
        pparamgen,
  ) {
    return _EVP_PKEY_meth_get_paramgen(
      pmeth,
      pparamgen_init,
      pparamgen,
    );
  }

  late final _EVP_PKEY_meth_get_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY>
                                  pkey)>>>)>>('EVP_PKEY_meth_get_paramgen');
  late final _EVP_PKEY_meth_get_paramgen =
      _EVP_PKEY_meth_get_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pkeygen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_PKEY> pkey)>>>
        pkeygen,
  ) {
    return _EVP_PKEY_meth_get_keygen(
      pmeth,
      pkeygen_init,
      pkeygen,
    );
  }

  late final _EVP_PKEY_meth_get_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY>
                                  pkey)>>>)>>('EVP_PKEY_meth_get_keygen');
  late final _EVP_PKEY_meth_get_keygen =
      _EVP_PKEY_meth_get_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        psign_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        psign,
  ) {
    return _EVP_PKEY_meth_get_sign(
      pmeth,
      psign_init,
      psign,
    );
  }

  late final _EVP_PKEY_meth_get_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>>('EVP_PKEY_meth_get_sign');
  late final _EVP_PKEY_meth_get_sign = _EVP_PKEY_meth_get_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.UnsignedChar> sig,
                          ffi.Pointer<ffi.Size> siglen,
                          ffi.Pointer<ffi.UnsignedChar> tbs,
                          ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pverify_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Size siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        pverify,
  ) {
    return _EVP_PKEY_meth_get_verify(
      pmeth,
      pverify_init,
      pverify,
    );
  }

  late final _EVP_PKEY_meth_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size
                                  tbslen)>>>)>>('EVP_PKEY_meth_get_verify');
  late final _EVP_PKEY_meth_get_verify =
      _EVP_PKEY_meth_get_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pverify_recover_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        pverify_recover,
  ) {
    return _EVP_PKEY_meth_get_verify_recover(
      pmeth,
      pverify_recover_init,
      pverify_recover,
    );
  }

  late final _EVP_PKEY_meth_get_verify_recoverPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_PKEY_METHOD>,
                      ffi.Pointer<
                          ffi.Pointer<
                              ffi.NativeFunction<
                                  ffi.Int Function(
                                      ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
                      ffi.Pointer<
                          ffi.Pointer<
                              ffi.NativeFunction<
                                  ffi.Int Function(
                                      ffi.Pointer<EVP_PKEY_CTX> ctx,
                                      ffi.Pointer<ffi.UnsignedChar> sig,
                                      ffi.Pointer<ffi.Size> siglen,
                                      ffi.Pointer<ffi.UnsignedChar> tbs,
                                      ffi.Size tbslen)>>>)>>(
          'EVP_PKEY_meth_get_verify_recover');
  late final _EVP_PKEY_meth_get_verify_recover =
      _EVP_PKEY_meth_get_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        psignctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        psignctx,
  ) {
    return _EVP_PKEY_meth_get_signctx(
      pmeth,
      psignctx_init,
      psignctx,
    );
  }

  late final _EVP_PKEY_meth_get_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.Size> siglen,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_signctx');
  late final _EVP_PKEY_meth_get_signctx =
      _EVP_PKEY_meth_get_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_PKEY_meth_get_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pverifyctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Int siglen,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pverifyctx,
  ) {
    return _EVP_PKEY_meth_get_verifyctx(
      pmeth,
      pverifyctx_init,
      pverifyctx,
    );
  }

  late final _EVP_PKEY_meth_get_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Int siglen,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_verifyctx');
  late final _EVP_PKEY_meth_get_verifyctx =
      _EVP_PKEY_meth_get_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Int siglen,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_PKEY_meth_get_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pencrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> out,
                        ffi.Pointer<ffi.Size> outlen,
                        ffi.Pointer<ffi.UnsignedChar> in1,
                        ffi.Size inlen)>>>
        pencryptfn,
  ) {
    return _EVP_PKEY_meth_get_encrypt(
      pmeth,
      pencrypt_init,
      pencryptfn,
    );
  }

  late final _EVP_PKEY_meth_get_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size
                                  inlen)>>>)>>('EVP_PKEY_meth_get_encrypt');
  late final _EVP_PKEY_meth_get_encrypt =
      _EVP_PKEY_meth_get_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size inlen)>>>)>();

  void EVP_PKEY_meth_get_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pdecrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> out,
                        ffi.Pointer<ffi.Size> outlen,
                        ffi.Pointer<ffi.UnsignedChar> in1,
                        ffi.Size inlen)>>>
        pdecrypt,
  ) {
    return _EVP_PKEY_meth_get_decrypt(
      pmeth,
      pdecrypt_init,
      pdecrypt,
    );
  }

  late final _EVP_PKEY_meth_get_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size
                                  inlen)>>>)>>('EVP_PKEY_meth_get_decrypt');
  late final _EVP_PKEY_meth_get_decrypt =
      _EVP_PKEY_meth_get_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> out,
                              ffi.Pointer<ffi.Size> outlen,
                              ffi.Pointer<ffi.UnsignedChar> in1,
                              ffi.Size inlen)>>>)>();

  void EVP_PKEY_meth_get_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>
        pderive_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> key,
                        ffi.Pointer<ffi.Size> keylen)>>>
        pderive,
  ) {
    return _EVP_PKEY_meth_get_derive(
      pmeth,
      pderive_init,
      pderive,
    );
  }

  late final _EVP_PKEY_meth_get_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size>
                                  keylen)>>>)>>('EVP_PKEY_meth_get_derive');
  late final _EVP_PKEY_meth_get_derive =
      _EVP_PKEY_meth_get_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> key,
                              ffi.Pointer<ffi.Size> keylen)>>>)>();

  void EVP_PKEY_meth_get_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Int type, ffi.Int p1, ffi.Pointer<ffi.Void> p2)>>>
        pctrl,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<ffi.Char> type,
                        ffi.Pointer<ffi.Char> value)>>>
        pctrl_str,
  ) {
    return _EVP_PKEY_meth_get_ctrl(
      pmeth,
      pctrl,
      pctrl_str,
    );
  }

  late final _EVP_PKEY_meth_get_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Int type,
                                  ffi.Int p1,
                                  ffi.Pointer<ffi.Void> p2)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<ffi.Char> type,
                                  ffi.Pointer<ffi.Char> value)>>>)>>(
      'EVP_PKEY_meth_get_ctrl');
  late final _EVP_PKEY_meth_get_ctrl = _EVP_PKEY_meth_get_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Int type,
                          ffi.Int p1,
                          ffi.Pointer<ffi.Void> p2)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX> ctx,
                          ffi.Pointer<ffi.Char> type,
                          ffi.Pointer<ffi.Char> value)>>>)>();

  void EVP_PKEY_meth_get_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Pointer<ffi.Size> siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_get_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_get_digestsignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_MD_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Pointer<ffi.Size> siglen,
                                  ffi.Pointer<ffi.UnsignedChar> tbs,
                                  ffi.Size tbslen)>>>)>>(
      'EVP_PKEY_meth_get_digestsign');
  late final _EVP_PKEY_meth_get_digestsign =
      _EVP_PKEY_meth_get_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Pointer<ffi.Size> siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX> ctx,
                        ffi.Pointer<ffi.UnsignedChar> sig,
                        ffi.Size siglen,
                        ffi.Pointer<ffi.UnsignedChar> tbs,
                        ffi.Size tbslen)>>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_get_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_get_digestverifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_MD_CTX> ctx,
                                  ffi.Pointer<ffi.UnsignedChar> sig,
                                  ffi.Size siglen,
                                  ffi.Pointer<ffi.UnsignedChar> tbs,
                                  ffi.Size tbslen)>>>)>>(
      'EVP_PKEY_meth_get_digestverify');
  late final _EVP_PKEY_meth_get_digestverify =
      _EVP_PKEY_meth_get_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX> ctx,
                              ffi.Pointer<ffi.UnsignedChar> sig,
                              ffi.Size siglen,
                              ffi.Pointer<ffi.UnsignedChar> tbs,
                              ffi.Size tbslen)>>>)>();

  void EVP_PKEY_meth_get_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_check');
  late final _EVP_PKEY_meth_get_check = _EVP_PKEY_meth_get_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_public_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_public_check');
  late final _EVP_PKEY_meth_get_public_check =
      _EVP_PKEY_meth_get_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_param_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY> pkey)>>>)>>(
      'EVP_PKEY_meth_get_param_check');
  late final _EVP_PKEY_meth_get_param_check =
      _EVP_PKEY_meth_get_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY> pkey)>>>)>();

  void EVP_PKEY_meth_get_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                        ffi.Pointer<EVP_MD_CTX> mctx)>>>
        pdigest_custom,
  ) {
    return _EVP_PKEY_meth_get_digest_custom(
      pmeth,
      pdigest_custom,
    );
  }

  late final _EVP_PKEY_meth_get_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                                  ffi.Pointer<EVP_MD_CTX> mctx)>>>)>>(
      'EVP_PKEY_meth_get_digest_custom');
  late final _EVP_PKEY_meth_get_digest_custom =
      _EVP_PKEY_meth_get_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx,
                              ffi.Pointer<EVP_MD_CTX> mctx)>>>)>();

  void EVP_add_alg_module() {
    return _EVP_add_alg_module();
  }

  late final _EVP_add_alg_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_add_alg_module');
  late final _EVP_add_alg_module =
      _EVP_add_alg_modulePtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _AES_BLOCKSIZE =
      _lookup<ffi.Int>('AES_BLOCKSIZE');

  int get AES_BLOCKSIZE => _AES_BLOCKSIZE.value;

  set AES_BLOCKSIZE(int value) => _AES_BLOCKSIZE.value = value;

  late final ffi.Pointer<ffi.Int> _AES128_KEYSIZE =
      _lookup<ffi.Int>('AES128_KEYSIZE');

  int get AES128_KEYSIZE => _AES128_KEYSIZE.value;

  set AES128_KEYSIZE(int value) => _AES128_KEYSIZE.value = value;

  late final ffi.Pointer<ffi.Int> _AES256_KEYSIZE =
      _lookup<ffi.Int>('AES256_KEYSIZE');

  int get AES256_KEYSIZE => _AES256_KEYSIZE.value;

  set AES256_KEYSIZE(int value) => _AES256_KEYSIZE.value = value;

  /// An encryption class for AES-128.
  late final ffi.Pointer<ffi.Int> _AES128Encrypt =
      _lookup<ffi.Int>('AES128Encrypt');

  int get AES128Encrypt => _AES128Encrypt.value;

  set AES128Encrypt(int value) => _AES128Encrypt.value = value;

  /// A decryption class for AES-128.
  late final ffi.Pointer<ffi.Int> _AES128Decrypt =
      _lookup<ffi.Int>('AES128Decrypt');

  int get AES128Decrypt => _AES128Decrypt.value;

  set AES128Decrypt(int value) => _AES128Decrypt.value = value;

  /// An encryption class for AES-256.
  late final ffi.Pointer<ffi.Int> _AES256Encrypt =
      _lookup<ffi.Int>('AES256Encrypt');

  int get AES256Encrypt => _AES256Encrypt.value;

  set AES256Encrypt(int value) => _AES256Encrypt.value = value;

  /// A decryption class for AES-256.
  late final ffi.Pointer<ffi.Int> _AES256Decrypt =
      _lookup<ffi.Int>('AES256Decrypt');

  int get AES256Decrypt => _AES256Decrypt.value;

  set AES256Decrypt(int value) => _AES256Decrypt.value = value;

  late final ffi.Pointer<ffi.Int> _AES256CBCEncrypt =
      _lookup<ffi.Int>('AES256CBCEncrypt');

  int get AES256CBCEncrypt => _AES256CBCEncrypt.value;

  set AES256CBCEncrypt(int value) => _AES256CBCEncrypt.value = value;

  late final ffi.Pointer<ffi.Int> _AES256CBCDecrypt =
      _lookup<ffi.Int>('AES256CBCDecrypt');

  int get AES256CBCDecrypt => _AES256CBCDecrypt.value;

  set AES256CBCDecrypt(int value) => _AES256CBCDecrypt.value = value;

  late final ffi.Pointer<ffi.Int> _AES128CBCEncrypt =
      _lookup<ffi.Int>('AES128CBCEncrypt');

  int get AES128CBCEncrypt => _AES128CBCEncrypt.value;

  set AES128CBCEncrypt(int value) => _AES128CBCEncrypt.value = value;

  late final ffi.Pointer<ffi.Int> _AES128CBCDecrypt =
      _lookup<ffi.Int>('AES128CBCDecrypt');

  int get AES128CBCDecrypt => _AES128CBCDecrypt.value;

  set AES128CBCDecrypt(int value) => _AES128CBCDecrypt.value = value;

  void memory_cleanse(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _memory_cleanse(
      ptr,
      len,
    );
  }

  late final _memory_cleansePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memory_cleanse');
  late final _memory_cleanse = _memory_cleansePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Int> _CVectorWriter =
      _lookup<ffi.Int>('CVectorWriter');

  int get CVectorWriter => _CVectorWriter.value;

  set CVectorWriter(int value) => _CVectorWriter.value = value;

  /// Double ended buffer combining vector and stream-like interfaces.
  ///
  /// >> and << read and write unformatted data using the above serialization templates.
  /// Fills with data in linear time; some stringstream implementations take N^2 time.
  late final ffi.Pointer<ffi.Int> _CDataStream =
      _lookup<ffi.Int>('CDataStream');

  int get CDataStream => _CDataStream.value;

  set CDataStream(int value) => _CDataStream.value = value;

  /// Non-refcounted RAII wrapper for FILE*
  ///
  /// Will automatically close the file when it goes out of scope if not null.
  /// If you're returning the file pointer, return file.release().
  /// If you need to close the file early, use file.fclose() instead of fclose(file).
  late final ffi.Pointer<ffi.Int> _CAutoFile = _lookup<ffi.Int>('CAutoFile');

  int get CAutoFile => _CAutoFile.value;

  set CAutoFile(int value) => _CAutoFile.value = value;

  /// Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to
  /// deserialize from. It guarantees the ability to rewind a given number of bytes.
  ///
  /// Will automatically close the file when it goes out of scope if not null.
  /// If you need to close the file early, use file.fclose() instead of fclose(file).
  late final ffi.Pointer<ffi.Int> _CBufferedFile =
      _lookup<ffi.Int>('CBufferedFile');

  int get CBufferedFile => _CBufferedFile.value;

  set CBufferedFile(int value) => _CBufferedFile.value = value;

  int __fpclassify(
    double __value,
  ) {
    return ___fpclassify(
      __value,
    );
  }

  late final ___fpclassifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__fpclassify');
  late final ___fpclassify =
      ___fpclassifyPtr.asFunction<int Function(double)>();

  int __signbit(
    double __value,
  ) {
    return ___signbit(
      __value,
    );
  }

  late final ___signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__signbit');
  late final ___signbit = ___signbitPtr.asFunction<int Function(double)>();

  int __isinf(
    double __value,
  ) {
    return ___isinf(
      __value,
    );
  }

  late final ___isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isinf');
  late final ___isinf = ___isinfPtr.asFunction<int Function(double)>();

  int __finite(
    double __value,
  ) {
    return ___finite(
      __value,
    );
  }

  late final ___finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__finite');
  late final ___finite = ___finitePtr.asFunction<int Function(double)>();

  int __isnan(
    double __value,
  ) {
    return ___isnan(
      __value,
    );
  }

  late final ___isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__isnan');
  late final ___isnan = ___isnanPtr.asFunction<int Function(double)>();

  int __iseqsig(
    double __x,
    double __y,
  ) {
    return ___iseqsig(
      __x,
      __y,
    );
  }

  late final ___iseqsigPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '__iseqsig');
  late final ___iseqsig =
      ___iseqsigPtr.asFunction<int Function(double, double)>();

  int __issignaling(
    double __value,
  ) {
    return ___issignaling(
      __value,
    );
  }

  late final ___issignalingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__issignaling');
  late final ___issignaling =
      ___issignalingPtr.asFunction<int Function(double)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double __acos(
    double __x,
  ) {
    return ___acos(
      __x,
    );
  }

  late final ___acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acos');
  late final ___acos = ___acosPtr.asFunction<double Function(double)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double __asin(
    double __x,
  ) {
    return ___asin(
      __x,
    );
  }

  late final ___asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asin');
  late final ___asin = ___asinPtr.asFunction<double Function(double)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double __atan(
    double __x,
  ) {
    return ___atan(
      __x,
    );
  }

  late final ___atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atan');
  late final ___atan = ___atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double __atan2(
    double __y,
    double __x,
  ) {
    return ___atan2(
      __y,
      __x,
    );
  }

  late final ___atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__atan2');
  late final ___atan2 =
      ___atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double __cos(
    double __x,
  ) {
    return ___cos(
      __x,
    );
  }

  late final ___cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cos');
  late final ___cos = ___cosPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double __sin(
    double __x,
  ) {
    return ___sin(
      __x,
    );
  }

  late final ___sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sin');
  late final ___sin = ___sinPtr.asFunction<double Function(double)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double __tan(
    double __x,
  ) {
    return ___tan(
      __x,
    );
  }

  late final ___tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tan');
  late final ___tan = ___tanPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double __cosh(
    double __x,
  ) {
    return ___cosh(
      __x,
    );
  }

  late final ___coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cosh');
  late final ___cosh = ___coshPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double __sinh(
    double __x,
  ) {
    return ___sinh(
      __x,
    );
  }

  late final ___sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinh');
  late final ___sinh = ___sinhPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double __tanh(
    double __x,
  ) {
    return ___tanh(
      __x,
    );
  }

  late final ___tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanh');
  late final ___tanh = ___tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double __acosh(
    double __x,
  ) {
    return ___acosh(
      __x,
    );
  }

  late final ___acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acosh');
  late final ___acosh = ___acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double __asinh(
    double __x,
  ) {
    return ___asinh(
      __x,
    );
  }

  late final ___asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asinh');
  late final ___asinh = ___asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double __atanh(
    double __x,
  ) {
    return ___atanh(
      __x,
    );
  }

  late final ___atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atanh');
  late final ___atanh = ___atanhPtr.asFunction<double Function(double)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double __exp(
    double __x,
  ) {
    return ___exp(
      __x,
    );
  }

  late final ___expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp');
  late final ___exp = ___expPtr.asFunction<double Function(double)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexp(
      __x,
      __exponent,
    );
  }

  late final ___frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__frexp');
  late final ___frexp =
      ___frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  late final ___ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__ldexp');
  late final ___ldexp = ___ldexpPtr.asFunction<double Function(double, int)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double __log(
    double __x,
  ) {
    return ___log(
      __x,
    );
  }

  late final ___logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log');
  late final ___log = ___logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double __log10(
    double __x,
  ) {
    return ___log10(
      __x,
    );
  }

  late final ___log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log10');
  late final ___log10 = ___log10Ptr.asFunction<double Function(double)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return ___modf(
      __x,
      __iptr,
    );
  }

  late final ___modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('__modf');
  late final ___modf =
      ___modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double __expm1(
    double __x,
  ) {
    return ___expm1(
      __x,
    );
  }

  late final ___expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__expm1');
  late final ___expm1 = ___expm1Ptr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double __log1p(
    double __x,
  ) {
    return ___log1p(
      __x,
    );
  }

  late final ___log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log1p');
  late final ___log1p = ___log1pPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double __logb(
    double __x,
  ) {
    return ___logb(
      __x,
    );
  }

  late final ___logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__logb');
  late final ___logb = ___logbPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double __exp2(
    double __x,
  ) {
    return ___exp2(
      __x,
    );
  }

  late final ___exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp2');
  late final ___exp2 = ___exp2Ptr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double __log2(
    double __x,
  ) {
    return ___log2(
      __x,
    );
  }

  late final ___log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log2');
  late final ___log2 = ___log2Ptr.asFunction<double Function(double)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double __pow(
    double __x,
    double __y,
  ) {
    return ___pow(
      __x,
      __y,
    );
  }

  late final ___powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__pow');
  late final ___pow = ___powPtr.asFunction<double Function(double, double)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double __sqrt(
    double __x,
  ) {
    return ___sqrt(
      __x,
    );
  }

  late final ___sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sqrt');
  late final ___sqrt = ___sqrtPtr.asFunction<double Function(double)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double __hypot(
    double __x,
    double __y,
  ) {
    return ___hypot(
      __x,
      __y,
    );
  }

  late final ___hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__hypot');
  late final ___hypot =
      ___hypotPtr.asFunction<double Function(double, double)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double __cbrt(
    double __x,
  ) {
    return ___cbrt(
      __x,
    );
  }

  late final ___cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cbrt');
  late final ___cbrt = ___cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double __ceil(
    double __x,
  ) {
    return ___ceil(
      __x,
    );
  }

  late final ___ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__ceil');
  late final ___ceil = ___ceilPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double __fabs(
    double __x,
  ) {
    return ___fabs(
      __x,
    );
  }

  late final ___fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__fabs');
  late final ___fabs = ___fabsPtr.asFunction<double Function(double)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double __floor(
    double __x,
  ) {
    return ___floor(
      __x,
    );
  }

  late final ___floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__floor');
  late final ___floor = ___floorPtr.asFunction<double Function(double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double __fmod(
    double __x,
    double __y,
  ) {
    return ___fmod(
      __x,
      __y,
    );
  }

  late final ___fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmod');
  late final ___fmod = ___fmodPtr.asFunction<double Function(double, double)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double __drem(
    double __x,
    double __y,
  ) {
    return ___drem(
      __x,
      __y,
    );
  }

  late final ___dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__drem');
  late final ___drem = ___dremPtr.asFunction<double Function(double, double)>();

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double __significand(
    double __x,
  ) {
    return ___significand(
      __x,
    );
  }

  late final ___significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__significand');
  late final ___significand =
      ___significandPtr.asFunction<double Function(double)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double __copysign(
    double __x,
    double __y,
  ) {
    return ___copysign(
      __x,
      __y,
    );
  }

  late final ___copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__copysign');
  late final ___copysign =
      ___copysignPtr.asFunction<double Function(double, double)>();

  double nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nan(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nan(
      __tagb,
    );
  }

  late final ___nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          '__nan');
  late final ___nan =
      ___nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double __j0(
    double arg0,
  ) {
    return ___j0(
      arg0,
    );
  }

  late final ___j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j0');
  late final ___j0 = ___j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double __j1(
    double arg0,
  ) {
    return ___j1(
      arg0,
    );
  }

  late final ___j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j1');
  late final ___j1 = ___j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double __jn(
    int arg0,
    double arg1,
  ) {
    return ___jn(
      arg0,
      arg1,
    );
  }

  late final ___jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__jn');
  late final ___jn = ___jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double __y0(
    double arg0,
  ) {
    return ___y0(
      arg0,
    );
  }

  late final ___y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y0');
  late final ___y0 = ___y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double __y1(
    double arg0,
  ) {
    return ___y1(
      arg0,
    );
  }

  late final ___y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y1');
  late final ___y1 = ___y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double __yn(
    int arg0,
    double arg1,
  ) {
    return ___yn(
      arg0,
      arg1,
    );
  }

  late final ___ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '__yn');
  late final ___yn = ___ynPtr.asFunction<double Function(int, double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double __erf(
    double arg0,
  ) {
    return ___erf(
      arg0,
    );
  }

  late final ___erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erf');
  late final ___erf = ___erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double __erfc(
    double arg0,
  ) {
    return ___erfc(
      arg0,
    );
  }

  late final ___erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erfc');
  late final ___erfc = ___erfcPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double __lgamma(
    double arg0,
  ) {
    return ___lgamma(
      arg0,
    );
  }

  late final ___lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__lgamma');
  late final ___lgamma = ___lgammaPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double __tgamma(
    double arg0,
  ) {
    return ___tgamma(
      arg0,
    );
  }

  late final ___tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tgamma');
  late final ___tgamma = ___tgammaPtr.asFunction<double Function(double)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double __gamma(
    double arg0,
  ) {
    return ___gamma(
      arg0,
    );
  }

  late final ___gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__gamma');
  late final ___gamma = ___gammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('lgamma_r');
  late final _lgamma_r =
      _lgamma_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('__lgamma_r');
  late final ___lgamma_r = ___lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double __rint(
    double __x,
  ) {
    return ___rint(
      __x,
    );
  }

  late final ___rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__rint');
  late final ___rint = ___rintPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double __nextafter(
    double __x,
    double __y,
  ) {
    return ___nextafter(
      __x,
      __y,
    );
  }

  late final ___nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__nextafter');
  late final ___nextafter =
      ___nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double __remainder(
    double __x,
    double __y,
  ) {
    return ___remainder(
      __x,
      __y,
    );
  }

  late final ___remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__remainder');
  late final ___remainder =
      ___remainderPtr.asFunction<double Function(double, double)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double __scalbn(
    double __x,
    int __n,
  ) {
    return ___scalbn(
      __x,
      __n,
    );
  }

  late final ___scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '__scalbn');
  late final ___scalbn =
      ___scalbnPtr.asFunction<double Function(double, int)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  int __ilogb(
    double __x,
  ) {
    return ___ilogb(
      __x,
    );
  }

  late final ___ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('__ilogb');
  late final ___ilogb = ___ilogbPtr.asFunction<int Function(double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double __scalbln(
    double __x,
    int __n,
  ) {
    return ___scalbln(
      __x,
      __n,
    );
  }

  late final ___scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          '__scalbln');
  late final ___scalbln =
      ___scalblnPtr.asFunction<double Function(double, int)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double __nearbyint(
    double __x,
  ) {
    return ___nearbyint(
      __x,
    );
  }

  late final ___nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__nearbyint');
  late final ___nearbyint =
      ___nearbyintPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double __round(
    double __x,
  ) {
    return ___round(
      __x,
    );
  }

  late final ___roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__round');
  late final ___round = ___roundPtr.asFunction<double Function(double)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double __trunc(
    double __x,
  ) {
    return ___trunc(
      __x,
    );
  }

  late final ___truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__trunc');
  late final ___trunc = ___truncPtr.asFunction<double Function(double)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('__remquo');
  late final ___remquo = ___remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int __lrint(
    double __x,
  ) {
    return ___lrint(
      __x,
    );
  }

  late final ___lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lrint');
  late final ___lrint = ___lrintPtr.asFunction<int Function(double)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int __llrint(
    double __x,
  ) {
    return ___llrint(
      __x,
    );
  }

  late final ___llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llrint');
  late final ___llrint = ___llrintPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int __lround(
    double __x,
  ) {
    return ___lround(
      __x,
    );
  }

  late final ___lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('__lround');
  late final ___lround = ___lroundPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  int __llround(
    double __x,
  ) {
    return ___llround(
      __x,
    );
  }

  late final ___llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>(
          '__llround');
  late final ___llround = ___llroundPtr.asFunction<int Function(double)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double __fdim(
    double __x,
    double __y,
  ) {
    return ___fdim(
      __x,
      __y,
    );
  }

  late final ___fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fdim');
  late final ___fdim = ___fdimPtr.asFunction<double Function(double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double __fmax(
    double __x,
    double __y,
  ) {
    return ___fmax(
      __x,
      __y,
    );
  }

  late final ___fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmax');
  late final ___fmax = ___fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double __fmin(
    double __x,
    double __y,
  ) {
    return ___fmin(
      __x,
      __y,
    );
  }

  late final ___fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmin');
  late final ___fmin = ___fminPtr.asFunction<double Function(double, double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('__fma');
  late final ___fma =
      ___fmaPtr.asFunction<double Function(double, double, double)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double __scalb(
    double __x,
    double __n,
  ) {
    return ___scalb(
      __x,
      __n,
    );
  }

  late final ___scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__scalb');
  late final ___scalb =
      ___scalbPtr.asFunction<double Function(double, double)>();

  int __fpclassifyf(
    double __value,
  ) {
    return ___fpclassifyf(
      __value,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __signbitf(
    double __value,
  ) {
    return ___signbitf(
      __value,
    );
  }

  late final ___signbitfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__signbitf');
  late final ___signbitf = ___signbitfPtr.asFunction<int Function(double)>();

  int __isinff(
    double __value,
  ) {
    return ___isinff(
      __value,
    );
  }

  late final ___isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isinff');
  late final ___isinff = ___isinffPtr.asFunction<int Function(double)>();

  int __finitef(
    double __value,
  ) {
    return ___finitef(
      __value,
    );
  }

  late final ___finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__finitef');
  late final ___finitef = ___finitefPtr.asFunction<int Function(double)>();

  int __isnanf(
    double __value,
  ) {
    return ___isnanf(
      __value,
    );
  }

  late final ___isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__isnanf');
  late final ___isnanf = ___isnanfPtr.asFunction<int Function(double)>();

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  late final ___iseqsigfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '__iseqsigf');
  late final ___iseqsigf =
      ___iseqsigfPtr.asFunction<int Function(double, double)>();

  int __issignalingf(
    double __value,
  ) {
    return ___issignalingf(
      __value,
    );
  }

  late final ___issignalingfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>(
          '__issignalingf');
  late final ___issignalingf =
      ___issignalingfPtr.asFunction<int Function(double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double __acosf(
    double __x,
  ) {
    return ___acosf(
      __x,
    );
  }

  late final ___acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acosf');
  late final ___acosf = ___acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double __asinf(
    double __x,
  ) {
    return ___asinf(
      __x,
    );
  }

  late final ___asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinf');
  late final ___asinf = ___asinfPtr.asFunction<double Function(double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double __atanf(
    double __x,
  ) {
    return ___atanf(
      __x,
    );
  }

  late final ___atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanf');
  late final ___atanf = ___atanfPtr.asFunction<double Function(double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double __atan2f(
    double __y,
    double __x,
  ) {
    return ___atan2f(
      __y,
      __x,
    );
  }

  late final ___atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__atan2f');
  late final ___atan2f =
      ___atan2fPtr.asFunction<double Function(double, double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double __cosf(
    double __x,
  ) {
    return ___cosf(
      __x,
    );
  }

  late final ___cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cosf');
  late final ___cosf = ___cosfPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double __sinf(
    double __x,
  ) {
    return ___sinf(
      __x,
    );
  }

  late final ___sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinf');
  late final ___sinf = ___sinfPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double __tanf(
    double __x,
  ) {
    return ___tanf(
      __x,
    );
  }

  late final ___tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanf');
  late final ___tanf = ___tanfPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double __coshf(
    double __x,
  ) {
    return ___coshf(
      __x,
    );
  }

  late final ___coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__coshf');
  late final ___coshf = ___coshfPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double __sinhf(
    double __x,
  ) {
    return ___sinhf(
      __x,
    );
  }

  late final ___sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinhf');
  late final ___sinhf = ___sinhfPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double __tanhf(
    double __x,
  ) {
    return ___tanhf(
      __x,
    );
  }

  late final ___tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanhf');
  late final ___tanhf = ___tanhfPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double __acoshf(
    double __x,
  ) {
    return ___acoshf(
      __x,
    );
  }

  late final ___acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acoshf');
  late final ___acoshf = ___acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double __asinhf(
    double __x,
  ) {
    return ___asinhf(
      __x,
    );
  }

  late final ___asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinhf');
  late final ___asinhf = ___asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double __atanhf(
    double __x,
  ) {
    return ___atanhf(
      __x,
    );
  }

  late final ___atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanhf');
  late final ___atanhf = ___atanhfPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double __expf(
    double __x,
  ) {
    return ___expf(
      __x,
    );
  }

  late final ___expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expf');
  late final ___expf = ___expfPtr.asFunction<double Function(double)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int> __exponent,
  ) {
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  late final ___frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__frexpf');
  late final ___frexpf =
      ___frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  late final ___ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__ldexpf');
  late final ___ldexpf =
      ___ldexpfPtr.asFunction<double Function(double, int)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double __logf(
    double __x,
  ) {
    return ___logf(
      __x,
    );
  }

  late final ___logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logf');
  late final ___logf = ___logfPtr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double __log10f(
    double __x,
  ) {
    return ___log10f(
      __x,
    );
  }

  late final ___log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log10f');
  late final ___log10f = ___log10fPtr.asFunction<double Function(double)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return ___modff(
      __x,
      __iptr,
    );
  }

  late final ___modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('__modff');
  late final ___modff =
      ___modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double __expm1f(
    double __x,
  ) {
    return ___expm1f(
      __x,
    );
  }

  late final ___expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expm1f');
  late final ___expm1f = ___expm1fPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double __log1pf(
    double __x,
  ) {
    return ___log1pf(
      __x,
    );
  }

  late final ___log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log1pf');
  late final ___log1pf = ___log1pfPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double __logbf(
    double __x,
  ) {
    return ___logbf(
      __x,
    );
  }

  late final ___logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logbf');
  late final ___logbf = ___logbfPtr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double __exp2f(
    double __x,
  ) {
    return ___exp2f(
      __x,
    );
  }

  late final ___exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp2f');
  late final ___exp2f = ___exp2fPtr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double __log2f(
    double __x,
  ) {
    return ___log2f(
      __x,
    );
  }

  late final ___log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log2f');
  late final ___log2f = ___log2fPtr.asFunction<double Function(double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double __powf(
    double __x,
    double __y,
  ) {
    return ___powf(
      __x,
      __y,
    );
  }

  late final ___powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__powf');
  late final ___powf = ___powfPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double __sqrtf(
    double __x,
  ) {
    return ___sqrtf(
      __x,
    );
  }

  late final ___sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sqrtf');
  late final ___sqrtf = ___sqrtfPtr.asFunction<double Function(double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double __hypotf(
    double __x,
    double __y,
  ) {
    return ___hypotf(
      __x,
      __y,
    );
  }

  late final ___hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__hypotf');
  late final ___hypotf =
      ___hypotfPtr.asFunction<double Function(double, double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double __cbrtf(
    double __x,
  ) {
    return ___cbrtf(
      __x,
    );
  }

  late final ___cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cbrtf');
  late final ___cbrtf = ___cbrtfPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double __ceilf(
    double __x,
  ) {
    return ___ceilf(
      __x,
    );
  }

  late final ___ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__ceilf');
  late final ___ceilf = ___ceilfPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double __fabsf(
    double __x,
  ) {
    return ___fabsf(
      __x,
    );
  }

  late final ___fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__fabsf');
  late final ___fabsf = ___fabsfPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double __floorf(
    double __x,
  ) {
    return ___floorf(
      __x,
    );
  }

  late final ___floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__floorf');
  late final ___floorf = ___floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double __fmodf(
    double __x,
    double __y,
  ) {
    return ___fmodf(
      __x,
      __y,
    );
  }

  late final ___fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmodf');
  late final ___fmodf =
      ___fmodfPtr.asFunction<double Function(double, double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  double __dremf(
    double __x,
    double __y,
  ) {
    return ___dremf(
      __x,
      __y,
    );
  }

  late final ___dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__dremf');
  late final ___dremf =
      ___dremfPtr.asFunction<double Function(double, double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double __significandf(
    double __x,
  ) {
    return ___significandf(
      __x,
    );
  }

  late final ___significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__significandf');
  late final ___significandf =
      ___significandfPtr.asFunction<double Function(double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double __copysignf(
    double __x,
    double __y,
  ) {
    return ___copysignf(
      __x,
      __y,
    );
  }

  late final ___copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__copysignf');
  late final ___copysignf =
      ___copysignfPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double __nanf(
    ffi.Pointer<ffi.Char> __tagb,
  ) {
    return ___nanf(
      __tagb,
    );
  }

  late final ___nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          '__nanf');
  late final ___nanf =
      ___nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double __j0f(
    double arg0,
  ) {
    return ___j0f(
      arg0,
    );
  }

  late final ___j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j0f');
  late final ___j0f = ___j0fPtr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double __j1f(
    double arg0,
  ) {
    return ___j1f(
      arg0,
    );
  }

  late final ___j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j1f');
  late final ___j1f = ___j1fPtr.asFunction<double Function(double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  double __jnf(
    int arg0,
    double arg1,
  ) {
    return ___jnf(
      arg0,
      arg1,
    );
  }

  late final ___jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__jnf');
  late final ___jnf = ___jnfPtr.asFunction<double Function(int, double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double __y0f(
    double arg0,
  ) {
    return ___y0f(
      arg0,
    );
  }

  late final ___y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y0f');
  late final ___y0f = ___y0fPtr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double __y1f(
    double arg0,
  ) {
    return ___y1f(
      arg0,
    );
  }

  late final ___y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y1f');
  late final ___y1f = ___y1fPtr.asFunction<double Function(double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();

  double __ynf(
    int arg0,
    double arg1,
  ) {
    return ___ynf(
      arg0,
      arg1,
    );
  }

  late final ___ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Float)>>(
          '__ynf');
  late final ___ynf = ___ynfPtr.asFunction<double Function(int, double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double __erff(
    double arg0,
  ) {
    return ___erff(
      arg0,
    );
  }

  late final ___erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erff');
  late final ___erff = ___erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double __erfcf(
    double arg0,
  ) {
    return ___erfcf(
      arg0,
    );
  }

  late final ___erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erfcf');
  late final ___erfcf = ___erfcfPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double __lgammaf(
    double arg0,
  ) {
    return ___lgammaf(
      arg0,
    );
  }

  late final ___lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__lgammaf');
  late final ___lgammaf = ___lgammafPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double __tgammaf(
    double arg0,
  ) {
    return ___tgammaf(
      arg0,
    );
  }

  late final ___tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tgammaf');
  late final ___tgammaf = ___tgammafPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  double __gammaf(
    double arg0,
  ) {
    return ___gammaf(
      arg0,
    );
  }

  late final ___gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__gammaf');
  late final ___gammaf = ___gammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('lgammaf_r');
  late final _lgammaf_r =
      _lgammaf_rPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int> __signgamp,
  ) {
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('__lgammaf_r');
  late final ___lgammaf_r = ___lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double __rintf(
    double __x,
  ) {
    return ___rintf(
      __x,
    );
  }

  late final ___rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__rintf');
  late final ___rintf = ___rintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double __nextafterf(
    double __x,
    double __y,
  ) {
    return ___nextafterf(
      __x,
      __y,
    );
  }

  late final ___nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__nextafterf');
  late final ___nextafterf =
      ___nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double __remainderf(
    double __x,
    double __y,
  ) {
    return ___remainderf(
      __x,
      __y,
    );
  }

  late final ___remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__remainderf');
  late final ___remainderf =
      ___remainderfPtr.asFunction<double Function(double, double)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double __scalbnf(
    double __x,
    int __n,
  ) {
    return ___scalbnf(
      __x,
      __n,
    );
  }

  late final ___scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '__scalbnf');
  late final ___scalbnf =
      ___scalbnfPtr.asFunction<double Function(double, int)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int __ilogbf(
    double __x,
  ) {
    return ___ilogbf(
      __x,
    );
  }

  late final ___ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__ilogbf');
  late final ___ilogbf = ___ilogbfPtr.asFunction<int Function(double)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double __scalblnf(
    double __x,
    int __n,
  ) {
    return ___scalblnf(
      __x,
      __n,
    );
  }

  late final ___scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          '__scalblnf');
  late final ___scalblnf =
      ___scalblnfPtr.asFunction<double Function(double, int)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double __nearbyintf(
    double __x,
  ) {
    return ___nearbyintf(
      __x,
    );
  }

  late final ___nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__nearbyintf');
  late final ___nearbyintf =
      ___nearbyintfPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double __roundf(
    double __x,
  ) {
    return ___roundf(
      __x,
    );
  }

  late final ___roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__roundf');
  late final ___roundf = ___roundfPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double __truncf(
    double __x,
  ) {
    return ___truncf(
      __x,
    );
  }

  late final ___truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__truncf');
  late final ___truncf = ___truncfPtr.asFunction<double Function(double)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int> __quo,
  ) {
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('__remquof');
  late final ___remquof = ___remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int __lrintf(
    double __x,
  ) {
    return ___lrintf(
      __x,
    );
  }

  late final ___lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lrintf');
  late final ___lrintf = ___lrintfPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int __llrintf(
    double __x,
  ) {
    return ___llrintf(
      __x,
    );
  }

  late final ___llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llrintf');
  late final ___llrintf = ___llrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int __lroundf(
    double __x,
  ) {
    return ___lroundf(
      __x,
    );
  }

  late final ___lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('__lroundf');
  late final ___lroundf = ___lroundfPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int __llroundf(
    double __x,
  ) {
    return ___llroundf(
      __x,
    );
  }

  late final ___llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>(
          '__llroundf');
  late final ___llroundf = ___llroundfPtr.asFunction<int Function(double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double __fdimf(
    double __x,
    double __y,
  ) {
    return ___fdimf(
      __x,
      __y,
    );
  }

  late final ___fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fdimf');
  late final ___fdimf =
      ___fdimfPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double __fmaxf(
    double __x,
    double __y,
  ) {
    return ___fmaxf(
      __x,
      __y,
    );
  }

  late final ___fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmaxf');
  late final ___fmaxf =
      ___fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double __fminf(
    double __x,
    double __y,
  ) {
    return ___fminf(
      __x,
      __y,
    );
  }

  late final ___fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fminf');
  late final ___fminf =
      ___fminfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('__fmaf');
  late final ___fmaf =
      ___fmafPtr.asFunction<double Function(double, double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  double __scalbf(
    double __x,
    double __n,
  ) {
    return ___scalbf(
      __x,
      __n,
    );
  }

  late final ___scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__scalbf');
  late final ___scalbf =
      ___scalbfPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  late final ffi.Pointer<ffi.Int> _CSparkSpendEntry =
      _lookup<ffi.Int>('CSparkSpendEntry');

  int get CSparkSpendEntry => _CSparkSpendEntry.value;

  set CSparkSpendEntry(int value) => _CSparkSpendEntry.value = value;

  late final ffi.Pointer<ffi.Int> _primitives = _lookup<ffi.Int>('primitives');

  int get primitives => _primitives.value;

  set primitives(int value) => _primitives.value = value;

  late final ffi.Pointer<ffi.Uint32> _SPARK_CHANGE_D =
      _lookup<ffi.Uint32>('SPARK_CHANGE_D');

  int get SPARK_CHANGE_D => _SPARK_CHANGE_D.value;

  set SPARK_CHANGE_D(int value) => _SPARK_CHANGE_D.value = value;

  late final ffi.Pointer<ffi.Int> _SpendKeyData =
      _lookup<ffi.Int>('SpendKeyData');

  int get SpendKeyData => _SpendKeyData.value;

  set SpendKeyData(int value) => _SpendKeyData.value = value;

  int getMetadata(
    int spark,
  ) {
    return _getMetadata(
      spark,
    );
  }

  late final _getMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getMetadata');
  late final _getMetadata = _getMetadataPtr.asFunction<int Function(int)>();

  void createSparkSpendTransaction(
    int spark,
  ) {
    return _createSparkSpendTransaction(
      spark,
    );
  }

  late final _createSparkSpendTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'createSparkSpendTransaction');
  late final _createSparkSpendTransaction =
      _createSparkSpendTransactionPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> generateSpendKey() {
    return _generateSpendKey();
  }

  late final _generateSpendKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'generateSpendKey');
  late final _generateSpendKey =
      _generateSpendKeyPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external UnnamedUnion1 unnamed;

  external UnnamedUnion2 unnamed1;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __wseq;

  external UnnamedStruct1 __wseq32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __g1_start;

  external UnnamedStruct2 __g1_start32;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// Dummy data type to identify deserializing constructors.
///
/// By convention, a constructor of a type T with signature
///
/// template <typename Stream> T::T(deserialize_type, Stream& s)
///
/// is a deserializing constructor, which builds the type by
/// deserializing it from s. If T contains const fields, this
/// is likely the only way to do so.
final class deserialize_type extends ffi.Opaque {}

/// Support for ADD_SERIALIZE_METHODS and READWRITE macro
final class CSerActionSerialize extends ffi.Struct {
  @ffi.Int()
  external int bool;
}

final class CSerActionUnserialize extends ffi.Struct {
  @ffi.Int()
  external int bool;
}

typedef ChainCode = ffi.Int;

final class CExtPubKey extends ffi.Struct {
  @ffi.UnsignedChar()
  external int nDepth;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> vchFingerprint;

  @ffi.UnsignedInt()
  external int nChild;

  @ChainCode()
  external int chaincode;

  @ffi.Int()
  external int pubkey;

  @ffi.Int()
  external int bool;

  external ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar> code)>
      Decode;

  external ffi.NativeFunction<ffi.Int Function(CExtPubKey)> Derive;

  external ffi.NativeFunction<ffi.Void Function(ffi.Int)> Serialize;
}

/// Script opcodes
abstract class opcodetype {
  static const int OP_0 = 0;
  static const int OP_FALSE = 0;
  static const int OP_PUSHDATA1 = 76;
  static const int OP_PUSHDATA2 = 77;
  static const int OP_PUSHDATA4 = 78;
  static const int OP_1NEGATE = 79;
  static const int OP_RESERVED = 80;
  static const int OP_1 = 81;
  static const int OP_TRUE = 81;
  static const int OP_2 = 82;
  static const int OP_3 = 83;
  static const int OP_4 = 84;
  static const int OP_5 = 85;
  static const int OP_6 = 86;
  static const int OP_7 = 87;
  static const int OP_8 = 88;
  static const int OP_9 = 89;
  static const int OP_10 = 90;
  static const int OP_11 = 91;
  static const int OP_12 = 92;
  static const int OP_13 = 93;
  static const int OP_14 = 94;
  static const int OP_15 = 95;
  static const int OP_16 = 96;
  static const int OP_NOP = 97;
  static const int OP_VER = 98;
  static const int OP_IF = 99;
  static const int OP_NOTIF = 100;
  static const int OP_VERIF = 101;
  static const int OP_VERNOTIF = 102;
  static const int OP_ELSE = 103;
  static const int OP_ENDIF = 104;
  static const int OP_VERIFY = 105;
  static const int OP_RETURN = 106;
  static const int OP_TOALTSTACK = 107;
  static const int OP_FROMALTSTACK = 108;
  static const int OP_2DROP = 109;
  static const int OP_2DUP = 110;
  static const int OP_3DUP = 111;
  static const int OP_2OVER = 112;
  static const int OP_2ROT = 113;
  static const int OP_2SWAP = 114;
  static const int OP_IFDUP = 115;
  static const int OP_DEPTH = 116;
  static const int OP_DROP = 117;
  static const int OP_DUP = 118;
  static const int OP_NIP = 119;
  static const int OP_OVER = 120;
  static const int OP_PICK = 121;
  static const int OP_ROLL = 122;
  static const int OP_ROT = 123;
  static const int OP_SWAP = 124;
  static const int OP_TUCK = 125;
  static const int OP_CAT = 126;
  static const int OP_SUBSTR = 127;
  static const int OP_LEFT = 128;
  static const int OP_RIGHT = 129;
  static const int OP_SIZE = 130;
  static const int OP_INVERT = 131;
  static const int OP_AND = 132;
  static const int OP_OR = 133;
  static const int OP_XOR = 134;
  static const int OP_EQUAL = 135;
  static const int OP_EQUALVERIFY = 136;
  static const int OP_RESERVED1 = 137;
  static const int OP_RESERVED2 = 138;
  static const int OP_1ADD = 139;
  static const int OP_1SUB = 140;
  static const int OP_2MUL = 141;
  static const int OP_2DIV = 142;
  static const int OP_NEGATE = 143;
  static const int OP_ABS = 144;
  static const int OP_NOT = 145;
  static const int OP_0NOTEQUAL = 146;
  static const int OP_ADD = 147;
  static const int OP_SUB = 148;
  static const int OP_MUL = 149;
  static const int OP_DIV = 150;
  static const int OP_MOD = 151;
  static const int OP_LSHIFT = 152;
  static const int OP_RSHIFT = 153;
  static const int OP_BOOLAND = 154;
  static const int OP_BOOLOR = 155;
  static const int OP_NUMEQUAL = 156;
  static const int OP_NUMEQUALVERIFY = 157;
  static const int OP_NUMNOTEQUAL = 158;
  static const int OP_LESSTHAN = 159;
  static const int OP_GREATERTHAN = 160;
  static const int OP_LESSTHANOREQUAL = 161;
  static const int OP_GREATERTHANOREQUAL = 162;
  static const int OP_MIN = 163;
  static const int OP_MAX = 164;
  static const int OP_WITHIN = 165;
  static const int OP_RIPEMD160 = 166;
  static const int OP_SHA1 = 167;
  static const int OP_SHA256 = 168;
  static const int OP_HASH160 = 169;
  static const int OP_HASH256 = 170;
  static const int OP_CODESEPARATOR = 171;
  static const int OP_CHECKSIG = 172;
  static const int OP_CHECKSIGVERIFY = 173;
  static const int OP_CHECKMULTISIG = 174;
  static const int OP_CHECKMULTISIGVERIFY = 175;
  static const int OP_NOP1 = 176;
  static const int OP_CHECKLOCKTIMEVERIFY = 177;
  static const int OP_NOP2 = 177;
  static const int OP_CHECKSEQUENCEVERIFY = 178;
  static const int OP_NOP3 = 178;
  static const int OP_NOP4 = 179;
  static const int OP_NOP5 = 180;
  static const int OP_NOP6 = 181;
  static const int OP_NOP7 = 182;
  static const int OP_NOP8 = 183;
  static const int OP_NOP9 = 184;
  static const int OP_NOP10 = 185;
  static const int OP_SMALLINTEGER = 250;
  static const int OP_PUBKEYS = 251;
  static const int OP_PUBKEYHASH = 253;
  static const int OP_PUBKEY = 254;
  static const int OP_INVALIDOPCODE = 255;
  static const int OP_ZEROCOINMINT = 193;
  static const int OP_ZEROCOINSPEND = 194;
  static const int OP_SIGMAMINT = 195;
  static const int OP_SIGMASPEND = 196;
  static const int OP_LELANTUSMINT = 197;
  static const int OP_LELANTUSJMINT = 198;
  static const int OP_LELANTUSJOINSPLIT = 199;
  static const int OP_LELANTUSJOINSPLITPAYLOAD = 201;
  static const int OP_ZEROCOINTOSIGMAREMINT = 200;
  static const int OP_SPARKMINT = 209;
  static const int OP_SPARKSMINT = 210;
  static const int OP_SPARKSPEND = 211;
}

final class CScriptWitness extends ffi.Struct {
  @ffi.Int()
  external int std;

  external ffi.NativeFunction<ffi.Int Function()> CScriptWitness1;
}

/// Amount in satoshis (Can be negative)
typedef CAmount = ffi.Int64;

final class imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Long;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.UnsignedLong;
typedef __gwchar_t = ffi.Int;

final class max_align_t extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef __useconds_t = ffi.UnsignedInt;
typedef __uid_t = ffi.UnsignedInt;
typedef __gid_t = ffi.UnsignedInt;
typedef __pid_t = ffi.Int;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class timezone1 extends ffi.Opaque {}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

final class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

typedef __itimer_which_t = ffi.Int;

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion3 __value;
}

final class UnnamedUnion3 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;
typedef __off64_t = ffi.Long;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef wint_t = ffi.UnsignedInt;
typedef mbstate_t = __mbstate_t;
typedef __FILE = _IO_FILE;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

final class asn1_string_st extends ffi.Struct {
  @ffi.Int()
  external int length;

  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.Long()
  external int flags;
}

final class asn1_object_st extends ffi.Opaque {}

final class ASN1_ITEM_st extends ffi.Opaque {}

final class asn1_pctx_st extends ffi.Opaque {}

final class asn1_sctx_st extends ffi.Opaque {}

final class dane_st extends ffi.Opaque {}

final class bio_st extends ffi.Opaque {}

final class bignum_st extends ffi.Opaque {}

final class bignum_ctx extends ffi.Opaque {}

final class bn_blinding_st extends ffi.Opaque {}

final class bn_mont_ctx_st extends ffi.Opaque {}

final class bn_recp_ctx_st extends ffi.Opaque {}

final class bn_gencb_st extends ffi.Opaque {}

final class buf_mem_st extends ffi.Opaque {}

final class evp_cipher_st extends ffi.Opaque {}

final class evp_cipher_ctx_st extends ffi.Opaque {}

final class evp_md_st extends ffi.Opaque {}

final class evp_md_ctx_st extends ffi.Opaque {}

final class evp_pkey_st extends ffi.Opaque {}

final class evp_pkey_asn1_method_st extends ffi.Opaque {}

final class evp_pkey_method_st extends ffi.Opaque {}

final class evp_pkey_ctx_st extends ffi.Opaque {}

final class evp_Encode_Ctx_st extends ffi.Opaque {}

final class hmac_ctx_st extends ffi.Opaque {}

final class dh_st extends ffi.Opaque {}

final class dh_method extends ffi.Opaque {}

final class dsa_st extends ffi.Opaque {}

final class dsa_method extends ffi.Opaque {}

final class rsa_st extends ffi.Opaque {}

final class rsa_meth_st extends ffi.Opaque {}

final class rsa_pss_params_st extends ffi.Opaque {}

final class ec_key_st extends ffi.Opaque {}

final class ec_key_method_st extends ffi.Opaque {}

final class rand_meth_st extends ffi.Opaque {}

final class rand_drbg_st extends ffi.Opaque {}

final class ssl_dane_st extends ffi.Opaque {}

final class x509_st extends ffi.Opaque {}

final class X509_algor_st extends ffi.Opaque {}

final class X509_crl_st extends ffi.Opaque {}

final class x509_crl_method_st extends ffi.Opaque {}

final class x509_revoked_st extends ffi.Opaque {}

final class X509_name_st extends ffi.Opaque {}

final class X509_pubkey_st extends ffi.Opaque {}

final class x509_store_st extends ffi.Opaque {}

final class x509_store_ctx_st extends ffi.Opaque {}

final class x509_object_st extends ffi.Opaque {}

final class x509_lookup_st extends ffi.Opaque {}

final class x509_lookup_method_st extends ffi.Opaque {}

final class X509_VERIFY_PARAM_st extends ffi.Opaque {}

final class x509_sig_info_st extends ffi.Opaque {}

final class pkcs8_priv_key_info_st extends ffi.Opaque {}

final class v3_ext_ctx extends ffi.Opaque {}

final class conf_st extends ffi.Opaque {}

final class ossl_init_settings_st extends ffi.Opaque {}

final class ui_st extends ffi.Opaque {}

final class ui_method_st extends ffi.Opaque {}

final class engine_st extends ffi.Opaque {}

final class ssl_st extends ffi.Opaque {}

final class ssl_ctx_st extends ffi.Opaque {}

final class comp_ctx_st extends ffi.Opaque {}

final class comp_method_st extends ffi.Opaque {}

final class X509_POLICY_NODE_st extends ffi.Opaque {}

final class X509_POLICY_LEVEL_st extends ffi.Opaque {}

final class X509_POLICY_TREE_st extends ffi.Opaque {}

final class X509_POLICY_CACHE_st extends ffi.Opaque {}

final class AUTHORITY_KEYID_st extends ffi.Opaque {}

final class DIST_POINT_st extends ffi.Opaque {}

final class ISSUING_DIST_POINT_st extends ffi.Opaque {}

final class NAME_CONSTRAINTS_st extends ffi.Opaque {}

final class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<stack_st_void> sk;
}

final class stack_st_void extends ffi.Opaque {}

final class ocsp_req_ctx_st extends ffi.Opaque {}

final class ocsp_response_st extends ffi.Opaque {}

final class ocsp_responder_id_st extends ffi.Opaque {}

final class sct_st extends ffi.Opaque {}

final class sct_ctx_st extends ffi.Opaque {}

final class ctlog_st extends ffi.Opaque {}

final class ctlog_store_st extends ffi.Opaque {}

final class ct_policy_eval_ctx_st extends ffi.Opaque {}

final class ossl_store_info_st extends ffi.Opaque {}

final class ossl_store_search_st extends ffi.Opaque {}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef FILE = _IO_FILE;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class stack_st extends ffi.Opaque {}

typedef OPENSSL_STACK = stack_st;
typedef OPENSSL_sk_compfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_sk_copyfunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_sk_freefunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

final class stack_st_OPENSSL_STRING extends ffi.Opaque {}

final class stack_st_OPENSSL_CSTRING extends ffi.Opaque {}

final class stack_st_OPENSSL_BLOCK extends ffi.Opaque {}

final class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef CRYPTO_RWLOCK = ffi.Void;
typedef CRYPTO_EX_new = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;
typedef CRYPTO_EX_DATA = crypto_ex_data_st;
typedef CRYPTO_EX_dup = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<CRYPTO_EX_DATA> to,
        ffi.Pointer<CRYPTO_EX_DATA> from,
        ffi.Pointer<ffi.Void> from_d,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;
typedef CRYPTO_EX_free = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp)>;

final class crypto_threadid_st extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef OPENSSL_INIT_SETTINGS = ossl_init_settings_st;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_t = ffi.UnsignedLong;
typedef pthread_once_t = ffi.Int;

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct3> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

final class __jmp_buf_tag extends ffi.Opaque {}

typedef pthread_key_t = ffi.UnsignedInt;
typedef CRYPTO_ONCE = pthread_once_t;
typedef CRYPTO_THREAD_LOCAL = pthread_key_t;
typedef CRYPTO_THREAD_ID = pthread_t;

final class bio_addr_st extends ffi.Opaque {}

final class bio_addrinfo_st extends ffi.Opaque {}

typedef BIO = bio_st;
typedef BIO_callback_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Long Function(
            ffi.Pointer<BIO> b,
            ffi.Int oper,
            ffi.Pointer<ffi.Char> argp,
            ffi.Int argi,
            ffi.Long argl,
            ffi.Long ret)>>;
typedef BIO_callback_fn_ex = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Long Function(
            ffi.Pointer<BIO> b,
            ffi.Int oper,
            ffi.Pointer<ffi.Char> argp,
            ffi.Size len,
            ffi.Int argi,
            ffi.Long argl,
            ffi.Int ret,
            ffi.Pointer<ffi.Size> processed)>>;

final class bio_method_st extends ffi.Opaque {}

final class stack_st_BIO extends ffi.Opaque {}

typedef asn1_ps_func = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<BIO> b,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
        ffi.Pointer<ffi.Int> plen,
        ffi.Pointer<ffi.Void> parg)>;
typedef BIO_METHOD = bio_method_st;
typedef BIO_info_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>;
typedef BIO_ADDR = bio_addr_st;
typedef BIO_ADDRINFO = bio_addrinfo_st;

abstract class BIO_hostserv_priorities {
  static const int BIO_PARSE_PRIO_HOST = 0;
  static const int BIO_PARSE_PRIO_SERV = 1;
}

abstract class BIO_lookup_type {
  static const int BIO_LOOKUP_CLIENT = 0;
  static const int BIO_LOOKUP_SERVER = 1;
}

final class hostent extends ffi.Opaque {}

final class BIO_sock_info_u extends ffi.Union {
  external ffi.Pointer<BIO_ADDR> addr;
}

abstract class BIO_sock_info_type {
  static const int BIO_SOCK_INFO_ADDRESS = 0;
}

typedef BIGNUM = bignum_st;
typedef BN_GENCB = bn_gencb_st;
typedef BN_CTX = bignum_ctx;
typedef BN_MONT_CTX = bn_mont_ctx_st;
typedef BN_BLINDING = bn_blinding_st;
typedef BN_RECP_CTX = bn_recp_ctx_st;

final class stack_st_X509_ALGOR extends ffi.Opaque {}

final class ASN1_ENCODING_st extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> enc;

  @ffi.Long()
  external int len;

  @ffi.Int()
  external int modified;
}

final class asn1_string_table_st extends ffi.Struct {
  @ffi.Int()
  external int nid;

  @ffi.Long()
  external int minsize;

  @ffi.Long()
  external int maxsize;

  @ffi.UnsignedLong()
  external int mask;

  @ffi.UnsignedLong()
  external int flags;
}

final class stack_st_ASN1_STRING_TABLE extends ffi.Opaque {}

final class ASN1_TEMPLATE_st extends ffi.Opaque {}

final class ASN1_TLC_st extends ffi.Opaque {}

final class ASN1_VALUE_st extends ffi.Opaque {}

final class stack_st_ASN1_INTEGER extends ffi.Opaque {}

final class stack_st_ASN1_GENERALSTRING extends ffi.Opaque {}

final class stack_st_ASN1_UTF8STRING extends ffi.Opaque {}

final class asn1_type_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  external UnnamedUnion4 value;
}

final class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<ffi.Char> ptr;

  @ASN1_BOOLEAN()
  external int boolean;

  external ffi.Pointer<ASN1_STRING> asn1_string;

  external ffi.Pointer<ASN1_OBJECT> object;

  external ffi.Pointer<ffi.Int> integer;

  external ffi.Pointer<ASN1_ENUMERATED> enumerated;

  external ffi.Pointer<ASN1_BIT_STRING> bit_string;

  external ffi.Pointer<ASN1_OCTET_STRING> octet_string;

  external ffi.Pointer<ASN1_PRINTABLESTRING> printablestring;

  external ffi.Pointer<ASN1_T61STRING> t61string;

  external ffi.Pointer<ASN1_IA5STRING> ia5string;

  external ffi.Pointer<ASN1_GENERALSTRING> generalstring;

  external ffi.Pointer<ASN1_BMPSTRING> bmpstring;

  external ffi.Pointer<ASN1_UNIVERSALSTRING> universalstring;

  external ffi.Pointer<ASN1_UTCTIME> utctime;

  external ffi.Pointer<ASN1_GENERALIZEDTIME> generalizedtime;

  external ffi.Pointer<ASN1_VISIBLESTRING> visiblestring;

  external ffi.Pointer<ASN1_UTF8STRING> utf8string;

  external ffi.Pointer<ASN1_STRING> set1;

  external ffi.Pointer<ASN1_STRING> sequence;

  external ffi.Pointer<ASN1_VALUE> asn1_value;
}

typedef ASN1_BOOLEAN = ffi.Int;
typedef ASN1_STRING = asn1_string_st;
typedef ASN1_OBJECT = asn1_object_st;
typedef ASN1_ENUMERATED = asn1_string_st;
typedef ASN1_BIT_STRING = asn1_string_st;
typedef ASN1_OCTET_STRING = asn1_string_st;
typedef ASN1_PRINTABLESTRING = asn1_string_st;
typedef ASN1_T61STRING = asn1_string_st;
typedef ASN1_IA5STRING = asn1_string_st;
typedef ASN1_GENERALSTRING = asn1_string_st;
typedef ASN1_BMPSTRING = asn1_string_st;
typedef ASN1_UNIVERSALSTRING = asn1_string_st;
typedef ASN1_UTCTIME = asn1_string_st;
typedef ASN1_GENERALIZEDTIME = asn1_string_st;
typedef ASN1_VISIBLESTRING = asn1_string_st;
typedef ASN1_UTF8STRING = asn1_string_st;
typedef ASN1_VALUE = ASN1_VALUE_st;

final class stack_st_ASN1_TYPE extends ffi.Opaque {}

typedef ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;
typedef ASN1_ITEM = ASN1_ITEM_st;

final class BIT_STRING_BITNAME_st extends ffi.Struct {
  @ffi.Int()
  external int bitnum;

  external ffi.Pointer<ffi.Char> lname;

  external ffi.Pointer<ffi.Char> sname;
}

typedef ASN1_TYPE = asn1_type_st;

final class stack_st_ASN1_OBJECT extends ffi.Opaque {}

typedef BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
typedef ASN1_TIME = asn1_string_st;
typedef ASN1_NULL = ffi.Int;
typedef i2d_of_void = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>;
typedef d2i_of_void = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Long)>;
typedef ASN1_STRING_TABLE = asn1_string_table_st;
typedef CONF = conf_st;
typedef X509V3_CTX = v3_ext_ctx;
typedef ASN1_PCTX = asn1_pctx_st;
typedef ASN1_SCTX = asn1_sctx_st;
typedef ASN1_TEMPLATE = ASN1_TEMPLATE_st;

final class obj_name_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int alias;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> data;
}

typedef OBJ_NAME = obj_name_st;
typedef EVP_MD = evp_md_st;
typedef EVP_MD_CTX = evp_md_ctx_st;
typedef EVP_CIPHER = evp_cipher_st;
typedef EVP_CIPHER_CTX = evp_cipher_ctx_st;

final class EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> out;

  external ffi.Pointer<ffi.UnsignedChar> inp;

  @ffi.Size()
  external int len;

  @ffi.UnsignedInt()
  external int interleave;
}

final class evp_cipher_info_st extends ffi.Struct {
  external ffi.Pointer<EVP_CIPHER> cipher;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> iv;
}

typedef EVP_PKEY_CTX = evp_pkey_ctx_st;
typedef ENGINE = engine_st;
typedef EVP_PKEY = evp_pkey_st;
typedef EVP_ENCODE_CTX = evp_Encode_Ctx_st;
typedef EVP_PBE_KEYGEN = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<EVP_CIPHER_CTX> ctx,
        ffi.Pointer<ffi.Char> pass,
        ffi.Int passlen,
        ffi.Pointer<ASN1_TYPE> param,
        ffi.Pointer<EVP_CIPHER> cipher,
        ffi.Pointer<EVP_MD> md,
        ffi.Int en_de)>;
typedef EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
typedef X509_PUBKEY = X509_pubkey_st;
typedef PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
typedef X509_ALGOR = X509_algor_st;
typedef X509_SIG_INFO = x509_sig_info_st;
typedef EVP_PKEY_METHOD = evp_pkey_method_st;
typedef EVP_PKEY_gen_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX> ctx)>;

final class CRecipient extends ffi.Struct {
  @ffi.Int()
  external int pubKey;

  @CAmount()
  external int amount;

  @ffi.Int()
  external int subtractFeeFromAmount;
}

const int SER_NETWORK = 1;

const int SER_DISK = 2;

const int SER_GETHASH = 4;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STRING_H = 1;

const int NULL = 0;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __ENUM_IDTYPE_T = 1;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _ASSERT_H = 1;

const int _INTTYPES_H = 1;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String BOOST_COMPILER_CONFIG = 'boost/config/compiler/clang.hpp';

const String BOOST_COMPILER = 'Clang version 10.0.0 ';

const int BOOST_CLANG = 1;

const String BOOST_PLATFORM_CONFIG = 'boost/config/platform/linux.hpp';

const String BOOST_PLATFORM = 'linux';

const int _UNISTD_H = 1;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const String BOOST_STDLIB = 'GNU libstdc++ version 20210601';

const int __BORLANDC___WORKAROUND_GUARD = 1;

const int __CODEGEARC___WORKAROUND_GUARD = 1;

const int _MSC_VER_WORKAROUND_GUARD = 1;

const int _MSC_FULL_VER_WORKAROUND_GUARD = 1;

const int BOOST_MSVC_WORKAROUND_GUARD = 1;

const int BOOST_MSVC_FULL_VER_WORKAROUND_GUARD = 1;

const int __GNUC___WORKAROUND_GUARD = 0;

const int __GNUC_MINOR___WORKAROUND_GUARD = 0;

const int __GNUC_PATCHLEVEL___WORKAROUND_GUARD = 0;

const int BOOST_GCC_WORKAROUND_GUARD = 1;

const int BOOST_GCC_VERSION_WORKAROUND_GUARD = 1;

const int BOOST_XLCPP_ZOS_WORKAROUND_GUARD = 1;

const int __IBMCPP___WORKAROUND_GUARD = 1;

const int __SUNPRO_CC_WORKAROUND_GUARD = 1;

const int __DECCXX_VER_WORKAROUND_GUARD = 1;

const int __MWERKS___WORKAROUND_GUARD = 1;

const int __EDG___WORKAROUND_GUARD = 1;

const int __EDG_VERSION___WORKAROUND_GUARD = 1;

const int __HP_aCC_WORKAROUND_GUARD = 1;

const int __hpxstd98_WORKAROUND_GUARD = 1;

const int _CRAYC_WORKAROUND_GUARD = 1;

const int __DMC___WORKAROUND_GUARD = 1;

const int MPW_CPLUS_WORKAROUND_GUARD = 1;

const int __COMO___WORKAROUND_GUARD = 1;

const int __COMO_VERSION___WORKAROUND_GUARD = 1;

const int __INTEL_COMPILER_WORKAROUND_GUARD = 1;

const int __ICL_WORKAROUND_GUARD = 1;

const int _COMPILER_VERSION_WORKAROUND_GUARD = 1;

const int _RWSTD_VER_WORKAROUND_GUARD = 1;

const int BOOST_RWSTD_VER_WORKAROUND_GUARD = 1;

const int __GLIBCPP___WORKAROUND_GUARD = 1;

const int _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC_WORKAROUND_GUARD = 1;

const int __SGI_STL_PORT_WORKAROUND_GUARD = 1;

const int _STLPORT_VERSION_WORKAROUND_GUARD = 1;

const int __LIBCOMO_VERSION___WORKAROUND_GUARD = 1;

const int _CPPLIB_VER_WORKAROUND_GUARD = 1;

const int BOOST_INTEL_CXX_VERSION_WORKAROUND_GUARD = 1;

const int BOOST_INTEL_WIN_WORKAROUND_GUARD = 1;

const int BOOST_DINKUMWARE_STDLIB_WORKAROUND_GUARD = 1;

const int BOOST_INTEL_WORKAROUND_GUARD = 1;

const int BOOST_MPL_CFG_GCC_WORKAROUND_GUARD = 0;

const int BOOST_THREAD_POLL_INTERVAL_MILLISECONDS = 100;

const int BOOST_THREAD_VERSION = 2;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int BOOST_VERSION = 107100;

const String BOOST_LIB_VERSION = '1_71';

const int BOOST_TT_HAS_CONFORMING_IS_CLASS_IMPLEMENTATION = 1;

const int BOOST_MOVE_HAS_FEATURE = 0;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int EISCONN = 106;

const int EBADMSG = 74;

const int ECONNABORTED = 103;

const int EALREADY = 114;

const int ECONNREFUSED = 111;

const int ECONNRESET = 104;

const int EDESTADDRREQ = 89;

const int EHOSTUNREACH = 113;

const int EIDRM = 43;

const int EMSGSIZE = 90;

const int ENETDOWN = 100;

const int ENETRESET = 102;

const int ENETUNREACH = 101;

const int ENOBUFS = 105;

const int ENOLINK = 67;

const int ENODATA = 61;

const int ENOMSG = 42;

const int ENOPROTOOPT = 92;

const int ENOSR = 63;

const int ENOTSOCK = 88;

const int ENOSTR = 60;

const int ENOTCONN = 107;

const int ENOTSUP = 95;

const int ECANCELED = 125;

const int EINPROGRESS = 115;

const int EOPNOTSUPP = 95;

const int EWOULDBLOCK = 11;

const int EOWNERDEAD = 130;

const int EPROTO = 71;

const int EPROTONOSUPPORT = 93;

const int ENOTRECOVERABLE = 131;

const int ETIME = 62;

const int ETXTBSY = 26;

const int ETIMEDOUT = 110;

const int ELOOP = 40;

const int EOVERFLOW = 75;

const int EPROTOTYPE = 91;

const int ENOSYS = 38;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 84;

const int E2BIG = 7;

const int EDOM = 33;

const int EFAULT = 14;

const int EBADF = 9;

const int EPIPE = 32;

const int EXDEV = 18;

const int EBUSY = 16;

const int ENOTEMPTY = 39;

const int ENOEXEC = 8;

const int EEXIST = 17;

const int EFBIG = 27;

const int ENAMETOOLONG = 36;

const int ENOTTY = 25;

const int EINTR = 4;

const int ESPIPE = 29;

const int EIO = 5;

const int EISDIR = 21;

const int ECHILD = 10;

const int ENOLCK = 37;

const int ENOSPC = 28;

const int ENXIO = 6;

const int ENODEV = 19;

const int ENOENT = 2;

const int ESRCH = 3;

const int ENOTDIR = 20;

const int ENOMEM = 12;

const int EPERM = 1;

const int EACCES = 13;

const int EROFS = 30;

const int EDEADLK = 35;

const int EAGAIN = 11;

const int ENFILE = 23;

const int EMFILE = 24;

const int EMLINK = 31;

const int _SYS_TIME_H = 1;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int BOOST_VERSION_NUMBER_MAX = 999999999;

const int BOOST_VERSION_NUMBER_ZERO = 0;

const int BOOST_VERSION_NUMBER_MIN = 1;

const int BOOST_VERSION_NUMBER_AVAILABLE = 1;

const int BOOST_VERSION_NUMBER_NOT_AVAILABLE = 0;

const int BOOST_OS_WINDOWS = 0;

const String BOOST_OS_WINDOWS_NAME = 'Microsoft Windows';

const int BOOST_PLAT_WINDOWS_UWP = 0;

const int BOOST_PLAT_WINDOWS_SDK_VERSION = 0;

const String BOOST_PLAT_WINDOWS_UWP_NAME = 'Universal Windows Platform';

const int BOOST_PLAT_WINDOWS_PHONE = 0;

const String BOOST_PLAT_WINDOWS_PHONE_NAME = 'Windows Phone';

const int BOOST_PLAT_WINDOWS_STORE = 0;

const String BOOST_PLAT_WINDOWS_STORE_NAME = 'Windows Store';

const int BOOST_PLAT_WINDOWS_RUNTIME = 0;

const String BOOST_PLAT_WINDOWS_RUNTIME_NAME = 'Windows Runtime';

const int BOOST_MPL_CFG_GCC = 1026;

const int BOOST_PP_CONFIG_EXTENDED_LINE_INFO = 0;

const int BOOST_PP_CONFIG_ERRORS = 1;

const int BOOST_PP_VARIADICS_MSVC = 0;

const int BOOST_PP_VARIADICS = 1;

const int BOOST_PP_BOOL_0 = 0;

const int BOOST_PP_BOOL_1 = 1;

const int BOOST_PP_BOOL_2 = 1;

const int BOOST_PP_BOOL_3 = 1;

const int BOOST_PP_BOOL_4 = 1;

const int BOOST_PP_BOOL_5 = 1;

const int BOOST_PP_BOOL_6 = 1;

const int BOOST_PP_BOOL_7 = 1;

const int BOOST_PP_BOOL_8 = 1;

const int BOOST_PP_BOOL_9 = 1;

const int BOOST_PP_BOOL_10 = 1;

const int BOOST_PP_BOOL_11 = 1;

const int BOOST_PP_BOOL_12 = 1;

const int BOOST_PP_BOOL_13 = 1;

const int BOOST_PP_BOOL_14 = 1;

const int BOOST_PP_BOOL_15 = 1;

const int BOOST_PP_BOOL_16 = 1;

const int BOOST_PP_BOOL_17 = 1;

const int BOOST_PP_BOOL_18 = 1;

const int BOOST_PP_BOOL_19 = 1;

const int BOOST_PP_BOOL_20 = 1;

const int BOOST_PP_BOOL_21 = 1;

const int BOOST_PP_BOOL_22 = 1;

const int BOOST_PP_BOOL_23 = 1;

const int BOOST_PP_BOOL_24 = 1;

const int BOOST_PP_BOOL_25 = 1;

const int BOOST_PP_BOOL_26 = 1;

const int BOOST_PP_BOOL_27 = 1;

const int BOOST_PP_BOOL_28 = 1;

const int BOOST_PP_BOOL_29 = 1;

const int BOOST_PP_BOOL_30 = 1;

const int BOOST_PP_BOOL_31 = 1;

const int BOOST_PP_BOOL_32 = 1;

const int BOOST_PP_BOOL_33 = 1;

const int BOOST_PP_BOOL_34 = 1;

const int BOOST_PP_BOOL_35 = 1;

const int BOOST_PP_BOOL_36 = 1;

const int BOOST_PP_BOOL_37 = 1;

const int BOOST_PP_BOOL_38 = 1;

const int BOOST_PP_BOOL_39 = 1;

const int BOOST_PP_BOOL_40 = 1;

const int BOOST_PP_BOOL_41 = 1;

const int BOOST_PP_BOOL_42 = 1;

const int BOOST_PP_BOOL_43 = 1;

const int BOOST_PP_BOOL_44 = 1;

const int BOOST_PP_BOOL_45 = 1;

const int BOOST_PP_BOOL_46 = 1;

const int BOOST_PP_BOOL_47 = 1;

const int BOOST_PP_BOOL_48 = 1;

const int BOOST_PP_BOOL_49 = 1;

const int BOOST_PP_BOOL_50 = 1;

const int BOOST_PP_BOOL_51 = 1;

const int BOOST_PP_BOOL_52 = 1;

const int BOOST_PP_BOOL_53 = 1;

const int BOOST_PP_BOOL_54 = 1;

const int BOOST_PP_BOOL_55 = 1;

const int BOOST_PP_BOOL_56 = 1;

const int BOOST_PP_BOOL_57 = 1;

const int BOOST_PP_BOOL_58 = 1;

const int BOOST_PP_BOOL_59 = 1;

const int BOOST_PP_BOOL_60 = 1;

const int BOOST_PP_BOOL_61 = 1;

const int BOOST_PP_BOOL_62 = 1;

const int BOOST_PP_BOOL_63 = 1;

const int BOOST_PP_BOOL_64 = 1;

const int BOOST_PP_BOOL_65 = 1;

const int BOOST_PP_BOOL_66 = 1;

const int BOOST_PP_BOOL_67 = 1;

const int BOOST_PP_BOOL_68 = 1;

const int BOOST_PP_BOOL_69 = 1;

const int BOOST_PP_BOOL_70 = 1;

const int BOOST_PP_BOOL_71 = 1;

const int BOOST_PP_BOOL_72 = 1;

const int BOOST_PP_BOOL_73 = 1;

const int BOOST_PP_BOOL_74 = 1;

const int BOOST_PP_BOOL_75 = 1;

const int BOOST_PP_BOOL_76 = 1;

const int BOOST_PP_BOOL_77 = 1;

const int BOOST_PP_BOOL_78 = 1;

const int BOOST_PP_BOOL_79 = 1;

const int BOOST_PP_BOOL_80 = 1;

const int BOOST_PP_BOOL_81 = 1;

const int BOOST_PP_BOOL_82 = 1;

const int BOOST_PP_BOOL_83 = 1;

const int BOOST_PP_BOOL_84 = 1;

const int BOOST_PP_BOOL_85 = 1;

const int BOOST_PP_BOOL_86 = 1;

const int BOOST_PP_BOOL_87 = 1;

const int BOOST_PP_BOOL_88 = 1;

const int BOOST_PP_BOOL_89 = 1;

const int BOOST_PP_BOOL_90 = 1;

const int BOOST_PP_BOOL_91 = 1;

const int BOOST_PP_BOOL_92 = 1;

const int BOOST_PP_BOOL_93 = 1;

const int BOOST_PP_BOOL_94 = 1;

const int BOOST_PP_BOOL_95 = 1;

const int BOOST_PP_BOOL_96 = 1;

const int BOOST_PP_BOOL_97 = 1;

const int BOOST_PP_BOOL_98 = 1;

const int BOOST_PP_BOOL_99 = 1;

const int BOOST_PP_BOOL_100 = 1;

const int BOOST_PP_BOOL_101 = 1;

const int BOOST_PP_BOOL_102 = 1;

const int BOOST_PP_BOOL_103 = 1;

const int BOOST_PP_BOOL_104 = 1;

const int BOOST_PP_BOOL_105 = 1;

const int BOOST_PP_BOOL_106 = 1;

const int BOOST_PP_BOOL_107 = 1;

const int BOOST_PP_BOOL_108 = 1;

const int BOOST_PP_BOOL_109 = 1;

const int BOOST_PP_BOOL_110 = 1;

const int BOOST_PP_BOOL_111 = 1;

const int BOOST_PP_BOOL_112 = 1;

const int BOOST_PP_BOOL_113 = 1;

const int BOOST_PP_BOOL_114 = 1;

const int BOOST_PP_BOOL_115 = 1;

const int BOOST_PP_BOOL_116 = 1;

const int BOOST_PP_BOOL_117 = 1;

const int BOOST_PP_BOOL_118 = 1;

const int BOOST_PP_BOOL_119 = 1;

const int BOOST_PP_BOOL_120 = 1;

const int BOOST_PP_BOOL_121 = 1;

const int BOOST_PP_BOOL_122 = 1;

const int BOOST_PP_BOOL_123 = 1;

const int BOOST_PP_BOOL_124 = 1;

const int BOOST_PP_BOOL_125 = 1;

const int BOOST_PP_BOOL_126 = 1;

const int BOOST_PP_BOOL_127 = 1;

const int BOOST_PP_BOOL_128 = 1;

const int BOOST_PP_BOOL_129 = 1;

const int BOOST_PP_BOOL_130 = 1;

const int BOOST_PP_BOOL_131 = 1;

const int BOOST_PP_BOOL_132 = 1;

const int BOOST_PP_BOOL_133 = 1;

const int BOOST_PP_BOOL_134 = 1;

const int BOOST_PP_BOOL_135 = 1;

const int BOOST_PP_BOOL_136 = 1;

const int BOOST_PP_BOOL_137 = 1;

const int BOOST_PP_BOOL_138 = 1;

const int BOOST_PP_BOOL_139 = 1;

const int BOOST_PP_BOOL_140 = 1;

const int BOOST_PP_BOOL_141 = 1;

const int BOOST_PP_BOOL_142 = 1;

const int BOOST_PP_BOOL_143 = 1;

const int BOOST_PP_BOOL_144 = 1;

const int BOOST_PP_BOOL_145 = 1;

const int BOOST_PP_BOOL_146 = 1;

const int BOOST_PP_BOOL_147 = 1;

const int BOOST_PP_BOOL_148 = 1;

const int BOOST_PP_BOOL_149 = 1;

const int BOOST_PP_BOOL_150 = 1;

const int BOOST_PP_BOOL_151 = 1;

const int BOOST_PP_BOOL_152 = 1;

const int BOOST_PP_BOOL_153 = 1;

const int BOOST_PP_BOOL_154 = 1;

const int BOOST_PP_BOOL_155 = 1;

const int BOOST_PP_BOOL_156 = 1;

const int BOOST_PP_BOOL_157 = 1;

const int BOOST_PP_BOOL_158 = 1;

const int BOOST_PP_BOOL_159 = 1;

const int BOOST_PP_BOOL_160 = 1;

const int BOOST_PP_BOOL_161 = 1;

const int BOOST_PP_BOOL_162 = 1;

const int BOOST_PP_BOOL_163 = 1;

const int BOOST_PP_BOOL_164 = 1;

const int BOOST_PP_BOOL_165 = 1;

const int BOOST_PP_BOOL_166 = 1;

const int BOOST_PP_BOOL_167 = 1;

const int BOOST_PP_BOOL_168 = 1;

const int BOOST_PP_BOOL_169 = 1;

const int BOOST_PP_BOOL_170 = 1;

const int BOOST_PP_BOOL_171 = 1;

const int BOOST_PP_BOOL_172 = 1;

const int BOOST_PP_BOOL_173 = 1;

const int BOOST_PP_BOOL_174 = 1;

const int BOOST_PP_BOOL_175 = 1;

const int BOOST_PP_BOOL_176 = 1;

const int BOOST_PP_BOOL_177 = 1;

const int BOOST_PP_BOOL_178 = 1;

const int BOOST_PP_BOOL_179 = 1;

const int BOOST_PP_BOOL_180 = 1;

const int BOOST_PP_BOOL_181 = 1;

const int BOOST_PP_BOOL_182 = 1;

const int BOOST_PP_BOOL_183 = 1;

const int BOOST_PP_BOOL_184 = 1;

const int BOOST_PP_BOOL_185 = 1;

const int BOOST_PP_BOOL_186 = 1;

const int BOOST_PP_BOOL_187 = 1;

const int BOOST_PP_BOOL_188 = 1;

const int BOOST_PP_BOOL_189 = 1;

const int BOOST_PP_BOOL_190 = 1;

const int BOOST_PP_BOOL_191 = 1;

const int BOOST_PP_BOOL_192 = 1;

const int BOOST_PP_BOOL_193 = 1;

const int BOOST_PP_BOOL_194 = 1;

const int BOOST_PP_BOOL_195 = 1;

const int BOOST_PP_BOOL_196 = 1;

const int BOOST_PP_BOOL_197 = 1;

const int BOOST_PP_BOOL_198 = 1;

const int BOOST_PP_BOOL_199 = 1;

const int BOOST_PP_BOOL_200 = 1;

const int BOOST_PP_BOOL_201 = 1;

const int BOOST_PP_BOOL_202 = 1;

const int BOOST_PP_BOOL_203 = 1;

const int BOOST_PP_BOOL_204 = 1;

const int BOOST_PP_BOOL_205 = 1;

const int BOOST_PP_BOOL_206 = 1;

const int BOOST_PP_BOOL_207 = 1;

const int BOOST_PP_BOOL_208 = 1;

const int BOOST_PP_BOOL_209 = 1;

const int BOOST_PP_BOOL_210 = 1;

const int BOOST_PP_BOOL_211 = 1;

const int BOOST_PP_BOOL_212 = 1;

const int BOOST_PP_BOOL_213 = 1;

const int BOOST_PP_BOOL_214 = 1;

const int BOOST_PP_BOOL_215 = 1;

const int BOOST_PP_BOOL_216 = 1;

const int BOOST_PP_BOOL_217 = 1;

const int BOOST_PP_BOOL_218 = 1;

const int BOOST_PP_BOOL_219 = 1;

const int BOOST_PP_BOOL_220 = 1;

const int BOOST_PP_BOOL_221 = 1;

const int BOOST_PP_BOOL_222 = 1;

const int BOOST_PP_BOOL_223 = 1;

const int BOOST_PP_BOOL_224 = 1;

const int BOOST_PP_BOOL_225 = 1;

const int BOOST_PP_BOOL_226 = 1;

const int BOOST_PP_BOOL_227 = 1;

const int BOOST_PP_BOOL_228 = 1;

const int BOOST_PP_BOOL_229 = 1;

const int BOOST_PP_BOOL_230 = 1;

const int BOOST_PP_BOOL_231 = 1;

const int BOOST_PP_BOOL_232 = 1;

const int BOOST_PP_BOOL_233 = 1;

const int BOOST_PP_BOOL_234 = 1;

const int BOOST_PP_BOOL_235 = 1;

const int BOOST_PP_BOOL_236 = 1;

const int BOOST_PP_BOOL_237 = 1;

const int BOOST_PP_BOOL_238 = 1;

const int BOOST_PP_BOOL_239 = 1;

const int BOOST_PP_BOOL_240 = 1;

const int BOOST_PP_BOOL_241 = 1;

const int BOOST_PP_BOOL_242 = 1;

const int BOOST_PP_BOOL_243 = 1;

const int BOOST_PP_BOOL_244 = 1;

const int BOOST_PP_BOOL_245 = 1;

const int BOOST_PP_BOOL_246 = 1;

const int BOOST_PP_BOOL_247 = 1;

const int BOOST_PP_BOOL_248 = 1;

const int BOOST_PP_BOOL_249 = 1;

const int BOOST_PP_BOOL_250 = 1;

const int BOOST_PP_BOOL_251 = 1;

const int BOOST_PP_BOOL_252 = 1;

const int BOOST_PP_BOOL_253 = 1;

const int BOOST_PP_BOOL_254 = 1;

const int BOOST_PP_BOOL_255 = 1;

const int BOOST_PP_BOOL_256 = 1;

const int BOOST_PP_REPEAT_CHECK_BOOST_PP_NIL = 1;

const int BOOST_PP_INC_0 = 1;

const int BOOST_PP_INC_1 = 2;

const int BOOST_PP_INC_2 = 3;

const int BOOST_PP_INC_3 = 4;

const int BOOST_PP_INC_4 = 5;

const int BOOST_PP_INC_5 = 6;

const int BOOST_PP_INC_6 = 7;

const int BOOST_PP_INC_7 = 8;

const int BOOST_PP_INC_8 = 9;

const int BOOST_PP_INC_9 = 10;

const int BOOST_PP_INC_10 = 11;

const int BOOST_PP_INC_11 = 12;

const int BOOST_PP_INC_12 = 13;

const int BOOST_PP_INC_13 = 14;

const int BOOST_PP_INC_14 = 15;

const int BOOST_PP_INC_15 = 16;

const int BOOST_PP_INC_16 = 17;

const int BOOST_PP_INC_17 = 18;

const int BOOST_PP_INC_18 = 19;

const int BOOST_PP_INC_19 = 20;

const int BOOST_PP_INC_20 = 21;

const int BOOST_PP_INC_21 = 22;

const int BOOST_PP_INC_22 = 23;

const int BOOST_PP_INC_23 = 24;

const int BOOST_PP_INC_24 = 25;

const int BOOST_PP_INC_25 = 26;

const int BOOST_PP_INC_26 = 27;

const int BOOST_PP_INC_27 = 28;

const int BOOST_PP_INC_28 = 29;

const int BOOST_PP_INC_29 = 30;

const int BOOST_PP_INC_30 = 31;

const int BOOST_PP_INC_31 = 32;

const int BOOST_PP_INC_32 = 33;

const int BOOST_PP_INC_33 = 34;

const int BOOST_PP_INC_34 = 35;

const int BOOST_PP_INC_35 = 36;

const int BOOST_PP_INC_36 = 37;

const int BOOST_PP_INC_37 = 38;

const int BOOST_PP_INC_38 = 39;

const int BOOST_PP_INC_39 = 40;

const int BOOST_PP_INC_40 = 41;

const int BOOST_PP_INC_41 = 42;

const int BOOST_PP_INC_42 = 43;

const int BOOST_PP_INC_43 = 44;

const int BOOST_PP_INC_44 = 45;

const int BOOST_PP_INC_45 = 46;

const int BOOST_PP_INC_46 = 47;

const int BOOST_PP_INC_47 = 48;

const int BOOST_PP_INC_48 = 49;

const int BOOST_PP_INC_49 = 50;

const int BOOST_PP_INC_50 = 51;

const int BOOST_PP_INC_51 = 52;

const int BOOST_PP_INC_52 = 53;

const int BOOST_PP_INC_53 = 54;

const int BOOST_PP_INC_54 = 55;

const int BOOST_PP_INC_55 = 56;

const int BOOST_PP_INC_56 = 57;

const int BOOST_PP_INC_57 = 58;

const int BOOST_PP_INC_58 = 59;

const int BOOST_PP_INC_59 = 60;

const int BOOST_PP_INC_60 = 61;

const int BOOST_PP_INC_61 = 62;

const int BOOST_PP_INC_62 = 63;

const int BOOST_PP_INC_63 = 64;

const int BOOST_PP_INC_64 = 65;

const int BOOST_PP_INC_65 = 66;

const int BOOST_PP_INC_66 = 67;

const int BOOST_PP_INC_67 = 68;

const int BOOST_PP_INC_68 = 69;

const int BOOST_PP_INC_69 = 70;

const int BOOST_PP_INC_70 = 71;

const int BOOST_PP_INC_71 = 72;

const int BOOST_PP_INC_72 = 73;

const int BOOST_PP_INC_73 = 74;

const int BOOST_PP_INC_74 = 75;

const int BOOST_PP_INC_75 = 76;

const int BOOST_PP_INC_76 = 77;

const int BOOST_PP_INC_77 = 78;

const int BOOST_PP_INC_78 = 79;

const int BOOST_PP_INC_79 = 80;

const int BOOST_PP_INC_80 = 81;

const int BOOST_PP_INC_81 = 82;

const int BOOST_PP_INC_82 = 83;

const int BOOST_PP_INC_83 = 84;

const int BOOST_PP_INC_84 = 85;

const int BOOST_PP_INC_85 = 86;

const int BOOST_PP_INC_86 = 87;

const int BOOST_PP_INC_87 = 88;

const int BOOST_PP_INC_88 = 89;

const int BOOST_PP_INC_89 = 90;

const int BOOST_PP_INC_90 = 91;

const int BOOST_PP_INC_91 = 92;

const int BOOST_PP_INC_92 = 93;

const int BOOST_PP_INC_93 = 94;

const int BOOST_PP_INC_94 = 95;

const int BOOST_PP_INC_95 = 96;

const int BOOST_PP_INC_96 = 97;

const int BOOST_PP_INC_97 = 98;

const int BOOST_PP_INC_98 = 99;

const int BOOST_PP_INC_99 = 100;

const int BOOST_PP_INC_100 = 101;

const int BOOST_PP_INC_101 = 102;

const int BOOST_PP_INC_102 = 103;

const int BOOST_PP_INC_103 = 104;

const int BOOST_PP_INC_104 = 105;

const int BOOST_PP_INC_105 = 106;

const int BOOST_PP_INC_106 = 107;

const int BOOST_PP_INC_107 = 108;

const int BOOST_PP_INC_108 = 109;

const int BOOST_PP_INC_109 = 110;

const int BOOST_PP_INC_110 = 111;

const int BOOST_PP_INC_111 = 112;

const int BOOST_PP_INC_112 = 113;

const int BOOST_PP_INC_113 = 114;

const int BOOST_PP_INC_114 = 115;

const int BOOST_PP_INC_115 = 116;

const int BOOST_PP_INC_116 = 117;

const int BOOST_PP_INC_117 = 118;

const int BOOST_PP_INC_118 = 119;

const int BOOST_PP_INC_119 = 120;

const int BOOST_PP_INC_120 = 121;

const int BOOST_PP_INC_121 = 122;

const int BOOST_PP_INC_122 = 123;

const int BOOST_PP_INC_123 = 124;

const int BOOST_PP_INC_124 = 125;

const int BOOST_PP_INC_125 = 126;

const int BOOST_PP_INC_126 = 127;

const int BOOST_PP_INC_127 = 128;

const int BOOST_PP_INC_128 = 129;

const int BOOST_PP_INC_129 = 130;

const int BOOST_PP_INC_130 = 131;

const int BOOST_PP_INC_131 = 132;

const int BOOST_PP_INC_132 = 133;

const int BOOST_PP_INC_133 = 134;

const int BOOST_PP_INC_134 = 135;

const int BOOST_PP_INC_135 = 136;

const int BOOST_PP_INC_136 = 137;

const int BOOST_PP_INC_137 = 138;

const int BOOST_PP_INC_138 = 139;

const int BOOST_PP_INC_139 = 140;

const int BOOST_PP_INC_140 = 141;

const int BOOST_PP_INC_141 = 142;

const int BOOST_PP_INC_142 = 143;

const int BOOST_PP_INC_143 = 144;

const int BOOST_PP_INC_144 = 145;

const int BOOST_PP_INC_145 = 146;

const int BOOST_PP_INC_146 = 147;

const int BOOST_PP_INC_147 = 148;

const int BOOST_PP_INC_148 = 149;

const int BOOST_PP_INC_149 = 150;

const int BOOST_PP_INC_150 = 151;

const int BOOST_PP_INC_151 = 152;

const int BOOST_PP_INC_152 = 153;

const int BOOST_PP_INC_153 = 154;

const int BOOST_PP_INC_154 = 155;

const int BOOST_PP_INC_155 = 156;

const int BOOST_PP_INC_156 = 157;

const int BOOST_PP_INC_157 = 158;

const int BOOST_PP_INC_158 = 159;

const int BOOST_PP_INC_159 = 160;

const int BOOST_PP_INC_160 = 161;

const int BOOST_PP_INC_161 = 162;

const int BOOST_PP_INC_162 = 163;

const int BOOST_PP_INC_163 = 164;

const int BOOST_PP_INC_164 = 165;

const int BOOST_PP_INC_165 = 166;

const int BOOST_PP_INC_166 = 167;

const int BOOST_PP_INC_167 = 168;

const int BOOST_PP_INC_168 = 169;

const int BOOST_PP_INC_169 = 170;

const int BOOST_PP_INC_170 = 171;

const int BOOST_PP_INC_171 = 172;

const int BOOST_PP_INC_172 = 173;

const int BOOST_PP_INC_173 = 174;

const int BOOST_PP_INC_174 = 175;

const int BOOST_PP_INC_175 = 176;

const int BOOST_PP_INC_176 = 177;

const int BOOST_PP_INC_177 = 178;

const int BOOST_PP_INC_178 = 179;

const int BOOST_PP_INC_179 = 180;

const int BOOST_PP_INC_180 = 181;

const int BOOST_PP_INC_181 = 182;

const int BOOST_PP_INC_182 = 183;

const int BOOST_PP_INC_183 = 184;

const int BOOST_PP_INC_184 = 185;

const int BOOST_PP_INC_185 = 186;

const int BOOST_PP_INC_186 = 187;

const int BOOST_PP_INC_187 = 188;

const int BOOST_PP_INC_188 = 189;

const int BOOST_PP_INC_189 = 190;

const int BOOST_PP_INC_190 = 191;

const int BOOST_PP_INC_191 = 192;

const int BOOST_PP_INC_192 = 193;

const int BOOST_PP_INC_193 = 194;

const int BOOST_PP_INC_194 = 195;

const int BOOST_PP_INC_195 = 196;

const int BOOST_PP_INC_196 = 197;

const int BOOST_PP_INC_197 = 198;

const int BOOST_PP_INC_198 = 199;

const int BOOST_PP_INC_199 = 200;

const int BOOST_PP_INC_200 = 201;

const int BOOST_PP_INC_201 = 202;

const int BOOST_PP_INC_202 = 203;

const int BOOST_PP_INC_203 = 204;

const int BOOST_PP_INC_204 = 205;

const int BOOST_PP_INC_205 = 206;

const int BOOST_PP_INC_206 = 207;

const int BOOST_PP_INC_207 = 208;

const int BOOST_PP_INC_208 = 209;

const int BOOST_PP_INC_209 = 210;

const int BOOST_PP_INC_210 = 211;

const int BOOST_PP_INC_211 = 212;

const int BOOST_PP_INC_212 = 213;

const int BOOST_PP_INC_213 = 214;

const int BOOST_PP_INC_214 = 215;

const int BOOST_PP_INC_215 = 216;

const int BOOST_PP_INC_216 = 217;

const int BOOST_PP_INC_217 = 218;

const int BOOST_PP_INC_218 = 219;

const int BOOST_PP_INC_219 = 220;

const int BOOST_PP_INC_220 = 221;

const int BOOST_PP_INC_221 = 222;

const int BOOST_PP_INC_222 = 223;

const int BOOST_PP_INC_223 = 224;

const int BOOST_PP_INC_224 = 225;

const int BOOST_PP_INC_225 = 226;

const int BOOST_PP_INC_226 = 227;

const int BOOST_PP_INC_227 = 228;

const int BOOST_PP_INC_228 = 229;

const int BOOST_PP_INC_229 = 230;

const int BOOST_PP_INC_230 = 231;

const int BOOST_PP_INC_231 = 232;

const int BOOST_PP_INC_232 = 233;

const int BOOST_PP_INC_233 = 234;

const int BOOST_PP_INC_234 = 235;

const int BOOST_PP_INC_235 = 236;

const int BOOST_PP_INC_236 = 237;

const int BOOST_PP_INC_237 = 238;

const int BOOST_PP_INC_238 = 239;

const int BOOST_PP_INC_239 = 240;

const int BOOST_PP_INC_240 = 241;

const int BOOST_PP_INC_241 = 242;

const int BOOST_PP_INC_242 = 243;

const int BOOST_PP_INC_243 = 244;

const int BOOST_PP_INC_244 = 245;

const int BOOST_PP_INC_245 = 246;

const int BOOST_PP_INC_246 = 247;

const int BOOST_PP_INC_247 = 248;

const int BOOST_PP_INC_248 = 249;

const int BOOST_PP_INC_249 = 250;

const int BOOST_PP_INC_250 = 251;

const int BOOST_PP_INC_251 = 252;

const int BOOST_PP_INC_252 = 253;

const int BOOST_PP_INC_253 = 254;

const int BOOST_PP_INC_254 = 255;

const int BOOST_PP_INC_255 = 256;

const int BOOST_PP_INC_256 = 256;

const int BOOST_MPL_LIMIT_METAFUNCTION_ARITY = 5;

const int BOOST_PP_BITAND_00 = 0;

const int BOOST_PP_BITAND_01 = 0;

const int BOOST_PP_BITAND_10 = 0;

const int BOOST_PP_BITAND_11 = 1;

const int BOOST_PP_DEC_0 = 0;

const int BOOST_PP_DEC_1 = 0;

const int BOOST_PP_DEC_2 = 1;

const int BOOST_PP_DEC_3 = 2;

const int BOOST_PP_DEC_4 = 3;

const int BOOST_PP_DEC_5 = 4;

const int BOOST_PP_DEC_6 = 5;

const int BOOST_PP_DEC_7 = 6;

const int BOOST_PP_DEC_8 = 7;

const int BOOST_PP_DEC_9 = 8;

const int BOOST_PP_DEC_10 = 9;

const int BOOST_PP_DEC_11 = 10;

const int BOOST_PP_DEC_12 = 11;

const int BOOST_PP_DEC_13 = 12;

const int BOOST_PP_DEC_14 = 13;

const int BOOST_PP_DEC_15 = 14;

const int BOOST_PP_DEC_16 = 15;

const int BOOST_PP_DEC_17 = 16;

const int BOOST_PP_DEC_18 = 17;

const int BOOST_PP_DEC_19 = 18;

const int BOOST_PP_DEC_20 = 19;

const int BOOST_PP_DEC_21 = 20;

const int BOOST_PP_DEC_22 = 21;

const int BOOST_PP_DEC_23 = 22;

const int BOOST_PP_DEC_24 = 23;

const int BOOST_PP_DEC_25 = 24;

const int BOOST_PP_DEC_26 = 25;

const int BOOST_PP_DEC_27 = 26;

const int BOOST_PP_DEC_28 = 27;

const int BOOST_PP_DEC_29 = 28;

const int BOOST_PP_DEC_30 = 29;

const int BOOST_PP_DEC_31 = 30;

const int BOOST_PP_DEC_32 = 31;

const int BOOST_PP_DEC_33 = 32;

const int BOOST_PP_DEC_34 = 33;

const int BOOST_PP_DEC_35 = 34;

const int BOOST_PP_DEC_36 = 35;

const int BOOST_PP_DEC_37 = 36;

const int BOOST_PP_DEC_38 = 37;

const int BOOST_PP_DEC_39 = 38;

const int BOOST_PP_DEC_40 = 39;

const int BOOST_PP_DEC_41 = 40;

const int BOOST_PP_DEC_42 = 41;

const int BOOST_PP_DEC_43 = 42;

const int BOOST_PP_DEC_44 = 43;

const int BOOST_PP_DEC_45 = 44;

const int BOOST_PP_DEC_46 = 45;

const int BOOST_PP_DEC_47 = 46;

const int BOOST_PP_DEC_48 = 47;

const int BOOST_PP_DEC_49 = 48;

const int BOOST_PP_DEC_50 = 49;

const int BOOST_PP_DEC_51 = 50;

const int BOOST_PP_DEC_52 = 51;

const int BOOST_PP_DEC_53 = 52;

const int BOOST_PP_DEC_54 = 53;

const int BOOST_PP_DEC_55 = 54;

const int BOOST_PP_DEC_56 = 55;

const int BOOST_PP_DEC_57 = 56;

const int BOOST_PP_DEC_58 = 57;

const int BOOST_PP_DEC_59 = 58;

const int BOOST_PP_DEC_60 = 59;

const int BOOST_PP_DEC_61 = 60;

const int BOOST_PP_DEC_62 = 61;

const int BOOST_PP_DEC_63 = 62;

const int BOOST_PP_DEC_64 = 63;

const int BOOST_PP_DEC_65 = 64;

const int BOOST_PP_DEC_66 = 65;

const int BOOST_PP_DEC_67 = 66;

const int BOOST_PP_DEC_68 = 67;

const int BOOST_PP_DEC_69 = 68;

const int BOOST_PP_DEC_70 = 69;

const int BOOST_PP_DEC_71 = 70;

const int BOOST_PP_DEC_72 = 71;

const int BOOST_PP_DEC_73 = 72;

const int BOOST_PP_DEC_74 = 73;

const int BOOST_PP_DEC_75 = 74;

const int BOOST_PP_DEC_76 = 75;

const int BOOST_PP_DEC_77 = 76;

const int BOOST_PP_DEC_78 = 77;

const int BOOST_PP_DEC_79 = 78;

const int BOOST_PP_DEC_80 = 79;

const int BOOST_PP_DEC_81 = 80;

const int BOOST_PP_DEC_82 = 81;

const int BOOST_PP_DEC_83 = 82;

const int BOOST_PP_DEC_84 = 83;

const int BOOST_PP_DEC_85 = 84;

const int BOOST_PP_DEC_86 = 85;

const int BOOST_PP_DEC_87 = 86;

const int BOOST_PP_DEC_88 = 87;

const int BOOST_PP_DEC_89 = 88;

const int BOOST_PP_DEC_90 = 89;

const int BOOST_PP_DEC_91 = 90;

const int BOOST_PP_DEC_92 = 91;

const int BOOST_PP_DEC_93 = 92;

const int BOOST_PP_DEC_94 = 93;

const int BOOST_PP_DEC_95 = 94;

const int BOOST_PP_DEC_96 = 95;

const int BOOST_PP_DEC_97 = 96;

const int BOOST_PP_DEC_98 = 97;

const int BOOST_PP_DEC_99 = 98;

const int BOOST_PP_DEC_100 = 99;

const int BOOST_PP_DEC_101 = 100;

const int BOOST_PP_DEC_102 = 101;

const int BOOST_PP_DEC_103 = 102;

const int BOOST_PP_DEC_104 = 103;

const int BOOST_PP_DEC_105 = 104;

const int BOOST_PP_DEC_106 = 105;

const int BOOST_PP_DEC_107 = 106;

const int BOOST_PP_DEC_108 = 107;

const int BOOST_PP_DEC_109 = 108;

const int BOOST_PP_DEC_110 = 109;

const int BOOST_PP_DEC_111 = 110;

const int BOOST_PP_DEC_112 = 111;

const int BOOST_PP_DEC_113 = 112;

const int BOOST_PP_DEC_114 = 113;

const int BOOST_PP_DEC_115 = 114;

const int BOOST_PP_DEC_116 = 115;

const int BOOST_PP_DEC_117 = 116;

const int BOOST_PP_DEC_118 = 117;

const int BOOST_PP_DEC_119 = 118;

const int BOOST_PP_DEC_120 = 119;

const int BOOST_PP_DEC_121 = 120;

const int BOOST_PP_DEC_122 = 121;

const int BOOST_PP_DEC_123 = 122;

const int BOOST_PP_DEC_124 = 123;

const int BOOST_PP_DEC_125 = 124;

const int BOOST_PP_DEC_126 = 125;

const int BOOST_PP_DEC_127 = 126;

const int BOOST_PP_DEC_128 = 127;

const int BOOST_PP_DEC_129 = 128;

const int BOOST_PP_DEC_130 = 129;

const int BOOST_PP_DEC_131 = 130;

const int BOOST_PP_DEC_132 = 131;

const int BOOST_PP_DEC_133 = 132;

const int BOOST_PP_DEC_134 = 133;

const int BOOST_PP_DEC_135 = 134;

const int BOOST_PP_DEC_136 = 135;

const int BOOST_PP_DEC_137 = 136;

const int BOOST_PP_DEC_138 = 137;

const int BOOST_PP_DEC_139 = 138;

const int BOOST_PP_DEC_140 = 139;

const int BOOST_PP_DEC_141 = 140;

const int BOOST_PP_DEC_142 = 141;

const int BOOST_PP_DEC_143 = 142;

const int BOOST_PP_DEC_144 = 143;

const int BOOST_PP_DEC_145 = 144;

const int BOOST_PP_DEC_146 = 145;

const int BOOST_PP_DEC_147 = 146;

const int BOOST_PP_DEC_148 = 147;

const int BOOST_PP_DEC_149 = 148;

const int BOOST_PP_DEC_150 = 149;

const int BOOST_PP_DEC_151 = 150;

const int BOOST_PP_DEC_152 = 151;

const int BOOST_PP_DEC_153 = 152;

const int BOOST_PP_DEC_154 = 153;

const int BOOST_PP_DEC_155 = 154;

const int BOOST_PP_DEC_156 = 155;

const int BOOST_PP_DEC_157 = 156;

const int BOOST_PP_DEC_158 = 157;

const int BOOST_PP_DEC_159 = 158;

const int BOOST_PP_DEC_160 = 159;

const int BOOST_PP_DEC_161 = 160;

const int BOOST_PP_DEC_162 = 161;

const int BOOST_PP_DEC_163 = 162;

const int BOOST_PP_DEC_164 = 163;

const int BOOST_PP_DEC_165 = 164;

const int BOOST_PP_DEC_166 = 165;

const int BOOST_PP_DEC_167 = 166;

const int BOOST_PP_DEC_168 = 167;

const int BOOST_PP_DEC_169 = 168;

const int BOOST_PP_DEC_170 = 169;

const int BOOST_PP_DEC_171 = 170;

const int BOOST_PP_DEC_172 = 171;

const int BOOST_PP_DEC_173 = 172;

const int BOOST_PP_DEC_174 = 173;

const int BOOST_PP_DEC_175 = 174;

const int BOOST_PP_DEC_176 = 175;

const int BOOST_PP_DEC_177 = 176;

const int BOOST_PP_DEC_178 = 177;

const int BOOST_PP_DEC_179 = 178;

const int BOOST_PP_DEC_180 = 179;

const int BOOST_PP_DEC_181 = 180;

const int BOOST_PP_DEC_182 = 181;

const int BOOST_PP_DEC_183 = 182;

const int BOOST_PP_DEC_184 = 183;

const int BOOST_PP_DEC_185 = 184;

const int BOOST_PP_DEC_186 = 185;

const int BOOST_PP_DEC_187 = 186;

const int BOOST_PP_DEC_188 = 187;

const int BOOST_PP_DEC_189 = 188;

const int BOOST_PP_DEC_190 = 189;

const int BOOST_PP_DEC_191 = 190;

const int BOOST_PP_DEC_192 = 191;

const int BOOST_PP_DEC_193 = 192;

const int BOOST_PP_DEC_194 = 193;

const int BOOST_PP_DEC_195 = 194;

const int BOOST_PP_DEC_196 = 195;

const int BOOST_PP_DEC_197 = 196;

const int BOOST_PP_DEC_198 = 197;

const int BOOST_PP_DEC_199 = 198;

const int BOOST_PP_DEC_200 = 199;

const int BOOST_PP_DEC_201 = 200;

const int BOOST_PP_DEC_202 = 201;

const int BOOST_PP_DEC_203 = 202;

const int BOOST_PP_DEC_204 = 203;

const int BOOST_PP_DEC_205 = 204;

const int BOOST_PP_DEC_206 = 205;

const int BOOST_PP_DEC_207 = 206;

const int BOOST_PP_DEC_208 = 207;

const int BOOST_PP_DEC_209 = 208;

const int BOOST_PP_DEC_210 = 209;

const int BOOST_PP_DEC_211 = 210;

const int BOOST_PP_DEC_212 = 211;

const int BOOST_PP_DEC_213 = 212;

const int BOOST_PP_DEC_214 = 213;

const int BOOST_PP_DEC_215 = 214;

const int BOOST_PP_DEC_216 = 215;

const int BOOST_PP_DEC_217 = 216;

const int BOOST_PP_DEC_218 = 217;

const int BOOST_PP_DEC_219 = 218;

const int BOOST_PP_DEC_220 = 219;

const int BOOST_PP_DEC_221 = 220;

const int BOOST_PP_DEC_222 = 221;

const int BOOST_PP_DEC_223 = 222;

const int BOOST_PP_DEC_224 = 223;

const int BOOST_PP_DEC_225 = 224;

const int BOOST_PP_DEC_226 = 225;

const int BOOST_PP_DEC_227 = 226;

const int BOOST_PP_DEC_228 = 227;

const int BOOST_PP_DEC_229 = 228;

const int BOOST_PP_DEC_230 = 229;

const int BOOST_PP_DEC_231 = 230;

const int BOOST_PP_DEC_232 = 231;

const int BOOST_PP_DEC_233 = 232;

const int BOOST_PP_DEC_234 = 233;

const int BOOST_PP_DEC_235 = 234;

const int BOOST_PP_DEC_236 = 235;

const int BOOST_PP_DEC_237 = 236;

const int BOOST_PP_DEC_238 = 237;

const int BOOST_PP_DEC_239 = 238;

const int BOOST_PP_DEC_240 = 239;

const int BOOST_PP_DEC_241 = 240;

const int BOOST_PP_DEC_242 = 241;

const int BOOST_PP_DEC_243 = 242;

const int BOOST_PP_DEC_244 = 243;

const int BOOST_PP_DEC_245 = 244;

const int BOOST_PP_DEC_246 = 245;

const int BOOST_PP_DEC_247 = 246;

const int BOOST_PP_DEC_248 = 247;

const int BOOST_PP_DEC_249 = 248;

const int BOOST_PP_DEC_250 = 249;

const int BOOST_PP_DEC_251 = 250;

const int BOOST_PP_DEC_252 = 251;

const int BOOST_PP_DEC_253 = 252;

const int BOOST_PP_DEC_254 = 253;

const int BOOST_PP_DEC_255 = 254;

const int BOOST_PP_DEC_256 = 255;

const int BOOST_PP_DEC_257 = 256;

const int BOOST_PP_CHECK_RESULT_1 = 1;

const int BOOST_PP_CHECK_RESULT_BOOST_PP_IS_BINARY_CHECK = 0;

const int BOOST_PP_COMPL_0 = 1;

const int BOOST_PP_COMPL_1 = 0;

const int BOOST_PP_LIST_FOLD_LEFT_CHECK_BOOST_PP_NIL = 1;

const int BOOST_PP_WHILE_CHECK_BOOST_PP_NIL = 1;

const int BOOST_MPL_HAS_XXX_NO_WRAPPED_TYPES = 0;

const int BOOST_MPL_HAS_XXX_NO_EXPLICIT_TEST_FUNCTION = 0;

const int BOOST_MPL_HAS_XXX_NEEDS_TEMPLATE_SFINAE = 0;

const int BOOST_LANG_STDC = 1;

const String BOOST_LANG_STDC_NAME = 'Standard C';

const int BOOST_LANG_STDCPP = 440200001;

const String BOOST_LANG_STDCPP_NAME = 'Standard C++';

const int BOOST_LANG_STDCPPCLI = 0;

const String BOOST_LANG_STDCPPCLI_NAME = 'Standard C++/CLI';

const int BOOST_LANG_STDECPP = 0;

const String BOOST_LANG_STDECPP_NAME = 'Standard Embedded C++';

const int BOOST_LANG_OBJC = 0;

const String BOOST_LANG_OBJC_NAME = 'Objective-C';

const int BOOST_LANG_CUDA = 0;

const String BOOST_LANG_CUDA_NAME = 'CUDA C/C++';

const int BOOST_ARCH_ALPHA = 0;

const String BOOST_ARCH_ALPHA_NAME = 'DEC Alpha';

const int BOOST_ARCH_ARM = 0;

const String BOOST_ARCH_ARM_NAME = 'ARM';

const int BOOST_ARCH_BLACKFIN = 0;

const String BOOST_ARCH_BLACKFIN_NAME = 'Blackfin';

const int BOOST_ARCH_CONVEX = 0;

const String BOOST_ARCH_CONVEX_NAME = 'Convex Computer';

const int BOOST_ARCH_IA64 = 0;

const String BOOST_ARCH_IA64_NAME = 'Intel Itanium 64';

const int BOOST_ARCH_M68K = 0;

const String BOOST_ARCH_M68K_NAME = 'Motorola 68k';

const int BOOST_ARCH_MIPS = 0;

const String BOOST_ARCH_MIPS_NAME = 'MIPS';

const int BOOST_ARCH_PARISC = 0;

const String BOOST_ARCH_PARISC_NAME = 'HP/PA RISC';

const int BOOST_ARCH_PPC = 0;

const String BOOST_ARCH_PPC_NAME = 'PowerPC';

const int BOOST_ARCH_PTX = 0;

const String BOOST_ARCH_PTX_NAME = 'PTX';

const int BOOST_ARCH_PYRAMID = 0;

const String BOOST_ARCH_PYRAMID_NAME = 'Pyramid 9810';

const int BOOST_ARCH_RS6000 = 0;

const String BOOST_ARCH_RS6000_NAME = 'RS/6000';

const int BOOST_ARCH_PWR = 0;

const String BOOST_ARCH_PWR_NAME = 'RS/6000';

const int BOOST_ARCH_SPARC = 0;

const String BOOST_ARCH_SPARC_NAME = 'SPARC';

const int BOOST_ARCH_SH = 0;

const String BOOST_ARCH_SH_NAME = 'SuperH';

const int BOOST_ARCH_SYS370 = 0;

const String BOOST_ARCH_SYS370_NAME = 'System/370';

const int BOOST_ARCH_SYS390 = 0;

const String BOOST_ARCH_SYS390_NAME = 'System/390';

const int BOOST_ARCH_X86_32 = 0;

const String BOOST_ARCH_X86_32_NAME = 'Intel x86-32';

const int BOOST_ARCH_X86_64 = 1;

const String BOOST_ARCH_X86_64_NAME = 'Intel x86-64';

const int BOOST_ARCH_X86 = 1;

const String BOOST_ARCH_X86_NAME = 'Intel x86';

const int BOOST_ARCH_Z = 0;

const String BOOST_ARCH_Z_NAME = 'z/Architecture';

const int BOOST_COMP_BORLAND = 0;

const String BOOST_COMP_BORLAND_NAME = 'Borland C++';

const int BOOST_COMP_CLANG = 100000000;

const int BOOST_COMP_CLANG_DETECTION = 100000000;

const int BOOST_PREDEF_DETAIL_COMP_DETECTED = 1;

const String BOOST_COMP_CLANG_NAME = 'Clang';

const int BOOST_COMP_COMO = 0;

const String BOOST_COMP_COMO_NAME = 'Comeau C++';

const int BOOST_COMP_DEC = 0;

const String BOOST_COMP_DEC_NAME = 'Compaq C/C++';

const int BOOST_COMP_DIAB = 0;

const String BOOST_COMP_DIAB_NAME = 'Diab C/C++';

const int BOOST_COMP_DMC = 0;

const String BOOST_COMP_DMC_NAME = 'Digital Mars';

const int BOOST_COMP_SYSC = 0;

const String BOOST_COMP_SYSC_NAME = 'Dignus Systems/C++';

const int BOOST_COMP_EDG = 0;

const String BOOST_COMP_EDG_NAME = 'EDG C++ Frontend';

const int BOOST_COMP_PATH = 0;

const String BOOST_COMP_PATH_NAME = 'EKOpath';

const int BOOST_COMP_GCCXML = 0;

const String BOOST_COMP_GCCXML_NAME = 'GCC XML';

const int BOOST_COMP_GNUC = 0;

const int BOOST_COMP_GNUC_DETECTION = 40200001;

const int BOOST_COMP_GNUC_EMULATED = 40200001;

const String BOOST_COMP_GNUC_NAME = 'Gnu GCC C/C++';

const int BOOST_COMP_GHS = 0;

const String BOOST_COMP_GHS_NAME = 'Green Hills C/C++';

const int BOOST_COMP_HPACC = 0;

const String BOOST_COMP_HPACC_NAME = 'HP aC++';

const int BOOST_COMP_IAR = 0;

const String BOOST_COMP_IAR_NAME = 'IAR C/C++';

const int BOOST_COMP_IBM = 0;

const String BOOST_COMP_IBM_NAME = 'IBM XL C/C++';

const int BOOST_COMP_INTEL = 0;

const String BOOST_COMP_INTEL_NAME = 'Intel C/C++';

const int BOOST_COMP_KCC = 0;

const String BOOST_COMP_KCC_NAME = 'Kai C++';

const int BOOST_COMP_LLVM = 0;

const int BOOST_COMP_LLVM_DETECTION = 1;

const int BOOST_COMP_LLVM_EMULATED = 1;

const String BOOST_COMP_LLVM_NAME = 'LLVM';

const int BOOST_COMP_HIGHC = 0;

const String BOOST_COMP_HIGHC_NAME = 'MetaWare High C/C++';

const int BOOST_COMP_MWERKS = 0;

const String BOOST_COMP_MWERKS_NAME = 'Metrowerks CodeWarrior';

const int BOOST_COMP_MRI = 0;

const String BOOST_COMP_MRI_NAME = 'Microtec C/C++';

const int BOOST_COMP_MPW = 0;

const String BOOST_COMP_MPW_NAME = 'MPW C++';

const int BOOST_COMP_NVCC = 0;

const String BOOST_COMP_NVCC_NAME = 'NVCC';

const int BOOST_COMP_PALM = 0;

const String BOOST_COMP_PALM_NAME = 'Palm C/C++';

const int BOOST_COMP_PGI = 0;

const String BOOST_COMP_PGI_NAME = 'Portland Group C/C++';

const int BOOST_COMP_SGI = 0;

const String BOOST_COMP_SGI_NAME = 'SGI MIPSpro';

const int BOOST_COMP_SUNPRO = 0;

const String BOOST_COMP_SUNPRO_NAME = 'Oracle Solaris Studio';

const int BOOST_COMP_TENDRA = 0;

const String BOOST_COMP_TENDRA_NAME = 'TenDRA C/C++';

const int BOOST_COMP_MSVC = 0;

const String BOOST_COMP_MSVC_NAME = 'Microsoft Visual C/C++';

const int BOOST_COMP_WATCOM = 0;

const String BOOST_COMP_WATCOM_NAME = 'Watcom C++';

const int BOOST_LIB_C_CLOUDABI = 0;

const String BOOST_LIB_C_CLOUDABI_NAME = 'cloudlibc';

const int BOOST_LIB_C_GNU = 23100000;

const String BOOST_LIB_C_GNU_NAME = 'GNU';

const int BOOST_LIB_C_UC = 0;

const String BOOST_LIB_C_UC_NAME = 'uClibc';

const int BOOST_LIB_C_VMS = 0;

const String BOOST_LIB_C_VMS_NAME = 'VMS';

const int BOOST_LIB_C_ZOS = 0;

const String BOOST_LIB_C_ZOS_NAME = 'z/OS';

const int BOOST_LIB_STD_CXX = 0;

const String BOOST_LIB_STD_CXX_NAME = 'libc++';

const int BOOST_LIB_STD_DINKUMWARE = 0;

const String BOOST_LIB_STD_DINKUMWARE_NAME = 'Dinkumware';

const int BOOST_LIB_STD_COMO = 0;

const String BOOST_LIB_STD_COMO_NAME = 'Comeau Computing';

const int BOOST_LIB_STD_MSIPL = 0;

const String BOOST_LIB_STD_MSIPL_NAME = 'Modena Software Lib++';

const int BOOST_LIB_STD_MSL = 0;

const String BOOST_LIB_STD_MSL_NAME = 'Metrowerks';

const int BOOST_LIB_STD_RW = 0;

const String BOOST_LIB_STD_RW_NAME = 'Roguewave';

const int BOOST_LIB_STD_SGI = 0;

const String BOOST_LIB_STD_SGI_NAME = 'SGI';

const int BOOST_LIB_STD_GNU = 510600001;

const String BOOST_LIB_STD_GNU_NAME = 'GNU';

const int BOOST_LIB_STD_STLPORT = 0;

const String BOOST_LIB_STD_STLPORT_NAME = 'STLport';

const int BOOST_LIB_STD_IBM = 0;

const String BOOST_LIB_STD_IBM_NAME = 'IBM VACPP';

const int BOOST_OS_AIX = 0;

const String BOOST_OS_AIX_NAME = 'IBM AIX';

const int BOOST_OS_AMIGAOS = 0;

const String BOOST_OS_AMIGAOS_NAME = 'AmigaOS';

const int BOOST_OS_BEOS = 0;

const String BOOST_OS_BEOS_NAME = 'BeOS';

const int BOOST_OS_IOS = 0;

const String BOOST_OS_IOS_NAME = 'iOS';

const int BOOST_OS_MACOS = 0;

const String BOOST_OS_MACOS_NAME = 'Mac OS';

const int BOOST_OS_BSD_NET = 0;

const String BOOST_OS_BSD_NET_NAME = 'NetBSD';

const int BOOST_OS_BSD_OPEN = 0;

const String BOOST_OS_BSD_OPEN_NAME = 'OpenBSD';

const int BOOST_OS_BSD_FREE = 0;

const String BOOST_OS_BSD_FREE_NAME = 'Free BSD';

const int BOOST_OS_BSD_DRAGONFLY = 0;

const String BOOST_OS_BSD_DRAGONFLY_NAME = 'DragonFly BSD';

const int BOOST_OS_BSD_BSDI = 0;

const String BOOST_OS_BSD_BSDI_NAME = 'BSDi BSD/OS';

const int BOOST_OS_BSD = 0;

const String BOOST_OS_BSD_NAME = 'BSD';

const int BOOST_OS_CYGWIN = 0;

const String BOOST_OS_CYGWIN_NAME = 'Cygwin';

const int BOOST_OS_HAIKU = 0;

const String BOOST_OS_HAIKU_NAME = 'Haiku';

const int BOOST_OS_HPUX = 0;

const String BOOST_OS_HPUX_NAME = 'HP-UX';

const int BOOST_OS_IRIX = 0;

const String BOOST_OS_IRIX_NAME = 'IRIX';

const int BOOST_OS_LINUX = 1;

const int BOOST_PREDEF_DETAIL_OS_DETECTED = 1;

const String BOOST_OS_LINUX_NAME = 'Linux';

const int BOOST_OS_OS400 = 0;

const String BOOST_OS_OS400_NAME = 'IBM OS/400';

const int BOOST_OS_QNX = 0;

const String BOOST_OS_QNX_NAME = 'QNX';

const int BOOST_OS_SOLARIS = 0;

const String BOOST_OS_SOLARIS_NAME = 'Solaris';

const int BOOST_OS_UNIX = 1;

const String BOOST_OS_UNIX_NAME = 'Unix Environment';

const int BOOST_OS_SVR4 = 0;

const String BOOST_OS_SVR4_NAME = 'SVR4 Environment';

const int BOOST_OS_VMS = 0;

const String BOOST_OS_VMS_NAME = 'VMS';

const int BOOST_OS_ANDROID = 0;

const String BOOST_OS_ANDROID_NAME = 'Android';

const int BOOST_ENDIAN_BIG_BYTE = 0;

const int BOOST_ENDIAN_BIG_WORD = 0;

const int BOOST_ENDIAN_LITTLE_BYTE = 1;

const int BOOST_ENDIAN_LITTLE_WORD = 0;

const String BOOST_ENDIAN_BIG_BYTE_NAME = 'Byte-Swapped Big-Endian';

const String BOOST_ENDIAN_BIG_WORD_NAME = 'Word-Swapped Big-Endian';

const String BOOST_ENDIAN_LITTLE_BYTE_NAME = 'Byte-Swapped Little-Endian';

const String BOOST_ENDIAN_LITTLE_WORD_NAME = 'Word-Swapped Little-Endian';

const int BOOST_PLAT_ANDROID = 0;

const String BOOST_PLAT_ANDROID_NAME = 'Android';

const int BOOST_PLAT_CLOUDABI = 0;

const String BOOST_PLAT_CLOUDABI_NAME = 'CloudABI';

const int BOOST_PLAT_MINGW = 0;

const String BOOST_PLAT_MINGW_NAME = 'MinGW (any variety)';

const int BOOST_PLAT_MINGW32 = 0;

const String BOOST_PLAT_MINGW32_NAME = 'MinGW';

const int BOOST_PLAT_MINGW64 = 0;

const String BOOST_PLAT_MINGW64_NAME = 'MinGW-w64';

const int BOOST_PLAT_WINDOWS_DESKTOP = 0;

const String BOOST_PLAT_WINDOWS_DESKTOP_NAME = 'Windows Desktop';

const int BOOST_PLAT_WINDOWS_SERVER = 0;

const String BOOST_PLAT_WINDOWS_SERVER_NAME = 'Windows Server';

const int BOOST_PLAT_WINDOWS_SYSTEM = 0;

const String BOOST_PLAT_WINDOWS_SYSTEM_NAME = 'Windows Drivers and Tools';

const int BOOST_PLAT_IOS_DEVICE = 0;

const int BOOST_PLAT_IOS_SIMULATOR = 0;

const String BOOST_PLAT_IOS_SIMULATOR_NAME = 'iOS Simulator';

const String BOOST_PLAT_IOS_DEVICE_NAME = 'iOS Device';

const int BOOST_HW_SIMD_X86_MMX_VERSION = 9900000;

const int BOOST_HW_SIMD_X86_SSE_VERSION = 10000000;

const int BOOST_HW_SIMD_X86_SSE2_VERSION = 20000000;

const int BOOST_HW_SIMD_X86_SSE3_VERSION = 30000000;

const int BOOST_HW_SIMD_X86_SSSE3_VERSION = 30100000;

const int BOOST_HW_SIMD_X86_SSE4_1_VERSION = 40100000;

const int BOOST_HW_SIMD_X86_SSE4_2_VERSION = 40200000;

const int BOOST_HW_SIMD_X86_AVX_VERSION = 50000000;

const int BOOST_HW_SIMD_X86_FMA3_VERSION = 50200000;

const int BOOST_HW_SIMD_X86_AVX2_VERSION = 50300000;

const int BOOST_HW_SIMD_X86_MIC_VERSION = 90000000;

const int BOOST_HW_SIMD_X86 = 20000000;

const String BOOST_HW_SIMD_X86_NAME = 'x86 SIMD';

const int BOOST_HW_SIMD_X86_AMD_SSE4A_VERSION = 40000000;

const int BOOST_HW_SIMD_X86_AMD_FMA4_VERSION = 50100000;

const int BOOST_HW_SIMD_X86_AMD_XOP_VERSION = 50100001;

const int BOOST_HW_SIMD_X86_AMD = 0;

const String BOOST_HW_SIMD_X86_AMD_NAME = 'x86 (AMD) SIMD';

const int BOOST_HW_SIMD_ARM_NEON_VERSION = 10000000;

const int BOOST_HW_SIMD_ARM = 0;

const String BOOST_HW_SIMD_ARM_NAME = 'ARM SIMD';

const int BOOST_HW_SIMD_PPC_VMX_VERSION = 10000000;

const int BOOST_HW_SIMD_PPC_VSX_VERSION = 10100000;

const int BOOST_HW_SIMD_PPC_QPX_VERSION = 20000000;

const int BOOST_HW_SIMD_PPC = 0;

const String BOOST_HW_SIMD_PPC_NAME = 'PPC SIMD';

const int BOOST_HW_SIMD = 20000000;

const String BOOST_HW_SIMD_NAME = 'Hardware SIMD';

const int BOOST_PREDEF_VERSION = 11000000;

const int BOOST_CHRONO_VERSION = 1;

const int BOOST_CHRONO_THREAD_CLOCK_IS_STEADY = 1;

const int BOOST_RATIO_VERSION = 1;

const int BOOST_RATIO_INTMAX_T_MAX = 9223372036854775806;

const String BOOST_RATIO_OVERFLOW_IN_ADD = 'overflow in ratio add';

const String BOOST_RATIO_OVERFLOW_IN_SUB = 'overflow in ratio sub';

const String BOOST_RATIO_OVERFLOW_IN_MUL = 'overflow in ratio mul';

const String BOOST_RATIO_OVERFLOW_IN_DIV = 'overflow in ratio div';

const String BOOST_RATIO_NUMERATOR_IS_OUT_OF_RANGE =
    'ratio numerator is out of range';

const String BOOST_RATIO_DIVIDE_BY_0 = 'ratio divide by 0';

const String BOOST_RATIO_DENOMINATOR_IS_OUT_OF_RANGE =
    'ratio denominator is out of range';

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int _WCHAR_H = 1;

const int __GNUC_VA_LIST = 1;

const int __wint_t_defined = 1;

const int _WINT_T = 1;

const int __mbstate_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int WEOF = 4294967295;

const String BOOST_CHRONO_A_DURATION_REPRESENTATION_CAN_NOT_BE_A_DURATION =
    'A duration representation can not be a duration';

const String
    BOOST_CHRONO_SECOND_TEMPLATE_PARAMETER_OF_DURATION_MUST_BE_A_STD_RATIO =
    'Second template parameter of duration must be a boost::ratio';

const String BOOST_CHRONO_DURATION_PERIOD_MUST_BE_POSITIVE =
    'duration period must be positive';

const String
    BOOST_CHRONO_SECOND_TEMPLATE_PARAMETER_OF_TIME_POINT_MUST_BE_A_BOOST_CHRONO_DURATION =
    'Second template parameter of time_point must be a boost::chrono::duration';

const int BECH32_H_ = 1;

const int OPENSSL_VERSION_NUMBER = 269488239;

const String OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.1f  31 Mar 2020';

const String SHLIB_VERSION_HISTORY = '';

const String SHLIB_VERSION_NUMBER = '1.1';

const String OPENSSL_FILE = '/tmp/PEGVPC/temp_for_macros.hpp';

const int OPENSSL_LINE = 3044;

const int OPENSSL_MIN_API = 0;

const int OPENSSL_API_COMPAT = 0;

const int OSSL_SSIZE_MAX = 9223372036854775807;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int CRYPTO_F_CMAC_CTX_NEW = 120;

const int CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;

const int CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;

const int CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;

const int CRYPTO_F_CRYPTO_MEMDUP = 115;

const int CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;

const int CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;

const int CRYPTO_F_CRYPTO_OCB128_INIT = 122;

const int CRYPTO_F_CRYPTO_SET_EX_DATA = 102;

const int CRYPTO_F_FIPS_MODE_SET = 109;

const int CRYPTO_F_GET_AND_LOCK = 113;

const int CRYPTO_F_OPENSSL_ATEXIT = 114;

const int CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;

const int CRYPTO_F_OPENSSL_FOPEN = 119;

const int CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;

const int CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;

const int CRYPTO_F_OPENSSL_LH_NEW = 126;

const int CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;

const int CRYPTO_F_OPENSSL_SK_DUP = 128;

const int CRYPTO_F_PKEY_HMAC_INIT = 123;

const int CRYPTO_F_PKEY_POLY1305_INIT = 124;

const int CRYPTO_F_PKEY_SIPHASH_INIT = 125;

const int CRYPTO_F_SK_RESERVE = 129;

const int CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;

const int CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;

const int CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;

const int SSLEAY_VERSION_NUMBER = 269488239;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int CRYPTO_MEM_CHECK_OFF = 0;

const int CRYPTO_MEM_CHECK_ON = 1;

const int CRYPTO_MEM_CHECK_ENABLE = 2;

const int CRYPTO_MEM_CHECK_DISABLE = 3;

const int CRYPTO_EX_INDEX_SSL = 0;

const int CRYPTO_EX_INDEX_SSL_CTX = 1;

const int CRYPTO_EX_INDEX_SSL_SESSION = 2;

const int CRYPTO_EX_INDEX_X509 = 3;

const int CRYPTO_EX_INDEX_X509_STORE = 4;

const int CRYPTO_EX_INDEX_X509_STORE_CTX = 5;

const int CRYPTO_EX_INDEX_DH = 6;

const int CRYPTO_EX_INDEX_DSA = 7;

const int CRYPTO_EX_INDEX_EC_KEY = 8;

const int CRYPTO_EX_INDEX_RSA = 9;

const int CRYPTO_EX_INDEX_ENGINE = 10;

const int CRYPTO_EX_INDEX_UI = 11;

const int CRYPTO_EX_INDEX_BIO = 12;

const int CRYPTO_EX_INDEX_APP = 13;

const int CRYPTO_EX_INDEX_UI_METHOD = 14;

const int CRYPTO_EX_INDEX_DRBG = 15;

const int CRYPTO_EX_INDEX__COUNT = 16;

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int OPENSSL_ENGINES_DIR = 5;

const int CRYPTO_LOCK = 1;

const int CRYPTO_UNLOCK = 2;

const int CRYPTO_READ = 4;

const int CRYPTO_WRITE = 8;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 1;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 2;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 4;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 8;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 16;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 32;

const int OPENSSL_INIT_LOAD_CONFIG = 64;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 128;

const int OPENSSL_INIT_ASYNC = 256;

const int OPENSSL_INIT_ENGINE_RDRAND = 512;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 1024;

const int OPENSSL_INIT_ENGINE_OPENSSL = 2048;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 4096;

const int OPENSSL_INIT_ENGINE_CAPI = 8192;

const int OPENSSL_INIT_ENGINE_PADLOCK = 16384;

const int OPENSSL_INIT_ENGINE_AFALG = 32768;

const int OPENSSL_INIT_ATFORK = 131072;

const int OPENSSL_INIT_NO_ATEXIT = 524288;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 30208;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _BITS_SETJMP_H = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int CRYPTO_ONCE_STATIC_INIT = 0;

const int BIO_F_ACPT_STATE = 100;

const int BIO_F_ADDRINFO_WRAP = 148;

const int BIO_F_ADDR_STRINGS = 134;

const int BIO_F_BIO_ACCEPT = 101;

const int BIO_F_BIO_ACCEPT_EX = 137;

const int BIO_F_BIO_ACCEPT_NEW = 152;

const int BIO_F_BIO_ADDR_NEW = 144;

const int BIO_F_BIO_BIND = 147;

const int BIO_F_BIO_CALLBACK_CTRL = 131;

const int BIO_F_BIO_CONNECT = 138;

const int BIO_F_BIO_CONNECT_NEW = 153;

const int BIO_F_BIO_CTRL = 103;

const int BIO_F_BIO_GETS = 104;

const int BIO_F_BIO_GET_HOST_IP = 106;

const int BIO_F_BIO_GET_NEW_INDEX = 102;

const int BIO_F_BIO_GET_PORT = 107;

const int BIO_F_BIO_LISTEN = 139;

const int BIO_F_BIO_LOOKUP = 135;

const int BIO_F_BIO_LOOKUP_EX = 143;

const int BIO_F_BIO_MAKE_PAIR = 121;

const int BIO_F_BIO_METH_NEW = 146;

const int BIO_F_BIO_NEW = 108;

const int BIO_F_BIO_NEW_DGRAM_SCTP = 145;

const int BIO_F_BIO_NEW_FILE = 109;

const int BIO_F_BIO_NEW_MEM_BUF = 126;

const int BIO_F_BIO_NREAD = 123;

const int BIO_F_BIO_NREAD0 = 124;

const int BIO_F_BIO_NWRITE = 125;

const int BIO_F_BIO_NWRITE0 = 122;

const int BIO_F_BIO_PARSE_HOSTSERV = 136;

const int BIO_F_BIO_PUTS = 110;

const int BIO_F_BIO_READ = 111;

const int BIO_F_BIO_READ_EX = 105;

const int BIO_F_BIO_READ_INTERN = 120;

const int BIO_F_BIO_SOCKET = 140;

const int BIO_F_BIO_SOCKET_NBIO = 142;

const int BIO_F_BIO_SOCK_INFO = 141;

const int BIO_F_BIO_SOCK_INIT = 112;

const int BIO_F_BIO_WRITE = 113;

const int BIO_F_BIO_WRITE_EX = 119;

const int BIO_F_BIO_WRITE_INTERN = 128;

const int BIO_F_BUFFER_CTRL = 114;

const int BIO_F_CONN_CTRL = 127;

const int BIO_F_CONN_STATE = 115;

const int BIO_F_DGRAM_SCTP_NEW = 149;

const int BIO_F_DGRAM_SCTP_READ = 132;

const int BIO_F_DGRAM_SCTP_WRITE = 133;

const int BIO_F_DOAPR_OUTCH = 150;

const int BIO_F_FILE_CTRL = 116;

const int BIO_F_FILE_READ = 130;

const int BIO_F_LINEBUFFER_CTRL = 129;

const int BIO_F_LINEBUFFER_NEW = 151;

const int BIO_F_MEM_WRITE = 117;

const int BIO_F_NBIOF_NEW = 154;

const int BIO_F_SLG_WRITE = 155;

const int BIO_F_SSL_NEW = 118;

const int BIO_R_ACCEPT_ERROR = 100;

const int BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;

const int BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;

const int BIO_R_BAD_FOPEN_MODE = 101;

const int BIO_R_BROKEN_PIPE = 124;

const int BIO_R_CONNECT_ERROR = 103;

const int BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;

const int BIO_R_GETSOCKNAME_ERROR = 132;

const int BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;

const int BIO_R_GETTING_SOCKTYPE = 134;

const int BIO_R_INVALID_ARGUMENT = 125;

const int BIO_R_INVALID_SOCKET = 135;

const int BIO_R_IN_USE = 123;

const int BIO_R_LENGTH_TOO_LONG = 102;

const int BIO_R_LISTEN_V6_ONLY = 136;

const int BIO_R_LOOKUP_RETURNED_NOTHING = 142;

const int BIO_R_MALFORMED_HOST_OR_SERVICE = 130;

const int BIO_R_NBIO_CONNECT_ERROR = 110;

const int BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;

const int BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;

const int BIO_R_NO_PORT_DEFINED = 113;

const int BIO_R_NO_SUCH_FILE = 128;

const int BIO_R_NULL_PARAMETER = 115;

const int BIO_R_UNABLE_TO_BIND_SOCKET = 117;

const int BIO_R_UNABLE_TO_CREATE_SOCKET = 118;

const int BIO_R_UNABLE_TO_KEEPALIVE = 137;

const int BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;

const int BIO_R_UNABLE_TO_NODELAY = 138;

const int BIO_R_UNABLE_TO_REUSEADDR = 139;

const int BIO_R_UNAVAILABLE_IP_FAMILY = 145;

const int BIO_R_UNINITIALIZED = 120;

const int BIO_R_UNKNOWN_INFO_TYPE = 140;

const int BIO_R_UNSUPPORTED_IP_FAMILY = 146;

const int BIO_R_UNSUPPORTED_METHOD = 121;

const int BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;

const int BIO_R_WRITE_TO_READ_ONLY_BIO = 126;

const int BIO_R_WSASTARTUP = 122;

const int BIO_TYPE_DESCRIPTOR = 256;

const int BIO_TYPE_FILTER = 512;

const int BIO_TYPE_SOURCE_SINK = 1024;

const int BIO_TYPE_NONE = 0;

const int BIO_TYPE_MEM = 1025;

const int BIO_TYPE_FILE = 1026;

const int BIO_TYPE_FD = 1284;

const int BIO_TYPE_SOCKET = 1285;

const int BIO_TYPE_NULL = 1030;

const int BIO_TYPE_SSL = 519;

const int BIO_TYPE_MD = 520;

const int BIO_TYPE_BUFFER = 521;

const int BIO_TYPE_CIPHER = 522;

const int BIO_TYPE_BASE64 = 523;

const int BIO_TYPE_CONNECT = 1292;

const int BIO_TYPE_ACCEPT = 1293;

const int BIO_TYPE_NBIO_TEST = 528;

const int BIO_TYPE_NULL_FILTER = 529;

const int BIO_TYPE_BIO = 1043;

const int BIO_TYPE_LINEBUFFER = 532;

const int BIO_TYPE_DGRAM = 1301;

const int BIO_TYPE_ASN1 = 534;

const int BIO_TYPE_COMP = 535;

const int BIO_TYPE_START = 128;

const int BIO_NOCLOSE = 0;

const int BIO_CLOSE = 1;

const int BIO_CTRL_RESET = 1;

const int BIO_CTRL_EOF = 2;

const int BIO_CTRL_INFO = 3;

const int BIO_CTRL_SET = 4;

const int BIO_CTRL_GET = 5;

const int BIO_CTRL_PUSH = 6;

const int BIO_CTRL_POP = 7;

const int BIO_CTRL_GET_CLOSE = 8;

const int BIO_CTRL_SET_CLOSE = 9;

const int BIO_CTRL_PENDING = 10;

const int BIO_CTRL_FLUSH = 11;

const int BIO_CTRL_DUP = 12;

const int BIO_CTRL_WPENDING = 13;

const int BIO_CTRL_SET_CALLBACK = 14;

const int BIO_CTRL_GET_CALLBACK = 15;

const int BIO_CTRL_PEEK = 29;

const int BIO_CTRL_SET_FILENAME = 30;

const int BIO_CTRL_DGRAM_CONNECT = 31;

const int BIO_CTRL_DGRAM_SET_CONNECTED = 32;

const int BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;

const int BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;

const int BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;

const int BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;

const int BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;

const int BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;

const int BIO_CTRL_DGRAM_MTU_DISCOVER = 39;

const int BIO_CTRL_DGRAM_QUERY_MTU = 40;

const int BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;

const int BIO_CTRL_DGRAM_GET_MTU = 41;

const int BIO_CTRL_DGRAM_SET_MTU = 42;

const int BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;

const int BIO_CTRL_DGRAM_GET_PEER = 46;

const int BIO_CTRL_DGRAM_SET_PEER = 44;

const int BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;

const int BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;

const int BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;

const int BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;

const int BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;

const int BIO_FP_READ = 2;

const int BIO_FP_WRITE = 4;

const int BIO_FP_APPEND = 8;

const int BIO_FP_TEXT = 16;

const int BIO_FLAGS_READ = 1;

const int BIO_FLAGS_WRITE = 2;

const int BIO_FLAGS_IO_SPECIAL = 4;

const int BIO_FLAGS_RWS = 7;

const int BIO_FLAGS_SHOULD_RETRY = 8;

const int BIO_FLAGS_UPLINK = 0;

const int BIO_FLAGS_BASE64_NO_NL = 256;

const int BIO_FLAGS_MEM_RDONLY = 512;

const int BIO_FLAGS_NONCLEAR_RST = 1024;

const int BIO_FLAGS_IN_EOF = 2048;

const int BIO_RR_SSL_X509_LOOKUP = 1;

const int BIO_RR_CONNECT = 2;

const int BIO_RR_ACCEPT = 3;

const int BIO_CB_FREE = 1;

const int BIO_CB_READ = 2;

const int BIO_CB_WRITE = 3;

const int BIO_CB_PUTS = 4;

const int BIO_CB_GETS = 5;

const int BIO_CB_CTRL = 6;

const int BIO_CB_RETURN = 128;

const int BIO_C_SET_CONNECT = 100;

const int BIO_C_DO_STATE_MACHINE = 101;

const int BIO_C_SET_NBIO = 102;

const int BIO_C_SET_FD = 104;

const int BIO_C_GET_FD = 105;

const int BIO_C_SET_FILE_PTR = 106;

const int BIO_C_GET_FILE_PTR = 107;

const int BIO_C_SET_FILENAME = 108;

const int BIO_C_SET_SSL = 109;

const int BIO_C_GET_SSL = 110;

const int BIO_C_SET_MD = 111;

const int BIO_C_GET_MD = 112;

const int BIO_C_GET_CIPHER_STATUS = 113;

const int BIO_C_SET_BUF_MEM = 114;

const int BIO_C_GET_BUF_MEM_PTR = 115;

const int BIO_C_GET_BUFF_NUM_LINES = 116;

const int BIO_C_SET_BUFF_SIZE = 117;

const int BIO_C_SET_ACCEPT = 118;

const int BIO_C_SSL_MODE = 119;

const int BIO_C_GET_MD_CTX = 120;

const int BIO_C_SET_BUFF_READ_DATA = 122;

const int BIO_C_GET_CONNECT = 123;

const int BIO_C_GET_ACCEPT = 124;

const int BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;

const int BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;

const int BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;

const int BIO_C_FILE_SEEK = 128;

const int BIO_C_GET_CIPHER_CTX = 129;

const int BIO_C_SET_BUF_MEM_EOF_RETURN = 130;

const int BIO_C_SET_BIND_MODE = 131;

const int BIO_C_GET_BIND_MODE = 132;

const int BIO_C_FILE_TELL = 133;

const int BIO_C_GET_SOCKS = 134;

const int BIO_C_SET_SOCKS = 135;

const int BIO_C_SET_WRITE_BUF_SIZE = 136;

const int BIO_C_GET_WRITE_BUF_SIZE = 137;

const int BIO_C_MAKE_BIO_PAIR = 138;

const int BIO_C_DESTROY_BIO_PAIR = 139;

const int BIO_C_GET_WRITE_GUARANTEE = 140;

const int BIO_C_GET_READ_REQUEST = 141;

const int BIO_C_SHUTDOWN_WR = 142;

const int BIO_C_NREAD0 = 143;

const int BIO_C_NREAD = 144;

const int BIO_C_NWRITE0 = 145;

const int BIO_C_NWRITE = 146;

const int BIO_C_RESET_READ_REQUEST = 147;

const int BIO_C_SET_MD_CTX = 148;

const int BIO_C_SET_PREFIX = 149;

const int BIO_C_GET_PREFIX = 150;

const int BIO_C_SET_SUFFIX = 151;

const int BIO_C_GET_SUFFIX = 152;

const int BIO_C_SET_EX_ARG = 153;

const int BIO_C_GET_EX_ARG = 154;

const int BIO_C_SET_CONNECT_MODE = 155;

const int BIO_FAMILY_IPV4 = 4;

const int BIO_FAMILY_IPV6 = 6;

const int BIO_FAMILY_IPANY = 256;

const int BIO_BIND_NORMAL = 0;

const int BIO_BIND_REUSEADDR = 1;

const int BIO_BIND_REUSEADDR_IF_UNUSED = 1;

const int BIO_SOCK_REUSEADDR = 1;

const int BIO_SOCK_V6_ONLY = 2;

const int BIO_SOCK_KEEPALIVE = 4;

const int BIO_SOCK_NONBLOCK = 8;

const int BIO_SOCK_NODELAY = 16;

const int EVP_F_AESNI_INIT_KEY = 165;

const int EVP_F_AESNI_XTS_INIT_KEY = 207;

const int EVP_F_AES_GCM_CTRL = 196;

const int EVP_F_AES_INIT_KEY = 133;

const int EVP_F_AES_OCB_CIPHER = 169;

const int EVP_F_AES_T4_INIT_KEY = 178;

const int EVP_F_AES_T4_XTS_INIT_KEY = 208;

const int EVP_F_AES_WRAP_CIPHER = 170;

const int EVP_F_AES_XTS_INIT_KEY = 209;

const int EVP_F_ALG_MODULE_INIT = 177;

const int EVP_F_ARIA_CCM_INIT_KEY = 175;

const int EVP_F_ARIA_GCM_CTRL = 197;

const int EVP_F_ARIA_GCM_INIT_KEY = 176;

const int EVP_F_ARIA_INIT_KEY = 185;

const int EVP_F_B64_NEW = 198;

const int EVP_F_CAMELLIA_INIT_KEY = 159;

const int EVP_F_CHACHA20_POLY1305_CTRL = 182;

const int EVP_F_CMLL_T4_INIT_KEY = 179;

const int EVP_F_DES_EDE3_WRAP_CIPHER = 171;

const int EVP_F_DO_SIGVER_INIT = 161;

const int EVP_F_ENC_NEW = 199;

const int EVP_F_EVP_CIPHERINIT_EX = 123;

const int EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 204;

const int EVP_F_EVP_CIPHER_CTX_COPY = 163;

const int EVP_F_EVP_CIPHER_CTX_CTRL = 124;

const int EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 122;

const int EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 205;

const int EVP_F_EVP_DECRYPTFINAL_EX = 101;

const int EVP_F_EVP_DECRYPTUPDATE = 166;

const int EVP_F_EVP_DIGESTFINALXOF = 174;

const int EVP_F_EVP_DIGESTINIT_EX = 128;

const int EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 219;

const int EVP_F_EVP_ENCRYPTFINAL_EX = 127;

const int EVP_F_EVP_ENCRYPTUPDATE = 167;

const int EVP_F_EVP_MD_CTX_COPY_EX = 110;

const int EVP_F_EVP_MD_SIZE = 162;

const int EVP_F_EVP_OPENINIT = 102;

const int EVP_F_EVP_PBE_ALG_ADD = 115;

const int EVP_F_EVP_PBE_ALG_ADD_TYPE = 160;

const int EVP_F_EVP_PBE_CIPHERINIT = 116;

const int EVP_F_EVP_PBE_SCRYPT = 181;

const int EVP_F_EVP_PKCS82PKEY = 111;

const int EVP_F_EVP_PKEY2PKCS8 = 113;

const int EVP_F_EVP_PKEY_ASN1_ADD0 = 188;

const int EVP_F_EVP_PKEY_CHECK = 186;

const int EVP_F_EVP_PKEY_COPY_PARAMETERS = 103;

const int EVP_F_EVP_PKEY_CTX_CTRL = 137;

const int EVP_F_EVP_PKEY_CTX_CTRL_STR = 150;

const int EVP_F_EVP_PKEY_CTX_DUP = 156;

const int EVP_F_EVP_PKEY_CTX_MD = 168;

const int EVP_F_EVP_PKEY_DECRYPT = 104;

const int EVP_F_EVP_PKEY_DECRYPT_INIT = 138;

const int EVP_F_EVP_PKEY_DECRYPT_OLD = 151;

const int EVP_F_EVP_PKEY_DERIVE = 153;

const int EVP_F_EVP_PKEY_DERIVE_INIT = 154;

const int EVP_F_EVP_PKEY_DERIVE_SET_PEER = 155;

const int EVP_F_EVP_PKEY_ENCRYPT = 105;

const int EVP_F_EVP_PKEY_ENCRYPT_INIT = 139;

const int EVP_F_EVP_PKEY_ENCRYPT_OLD = 152;

const int EVP_F_EVP_PKEY_GET0_DH = 119;

const int EVP_F_EVP_PKEY_GET0_DSA = 120;

const int EVP_F_EVP_PKEY_GET0_EC_KEY = 131;

const int EVP_F_EVP_PKEY_GET0_HMAC = 183;

const int EVP_F_EVP_PKEY_GET0_POLY1305 = 184;

const int EVP_F_EVP_PKEY_GET0_RSA = 121;

const int EVP_F_EVP_PKEY_GET0_SIPHASH = 172;

const int EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 202;

const int EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 203;

const int EVP_F_EVP_PKEY_KEYGEN = 146;

const int EVP_F_EVP_PKEY_KEYGEN_INIT = 147;

const int EVP_F_EVP_PKEY_METH_ADD0 = 194;

const int EVP_F_EVP_PKEY_METH_NEW = 195;

const int EVP_F_EVP_PKEY_NEW = 106;

const int EVP_F_EVP_PKEY_NEW_CMAC_KEY = 193;

const int EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 191;

const int EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 192;

const int EVP_F_EVP_PKEY_PARAMGEN = 148;

const int EVP_F_EVP_PKEY_PARAMGEN_INIT = 149;

const int EVP_F_EVP_PKEY_PARAM_CHECK = 189;

const int EVP_F_EVP_PKEY_PUBLIC_CHECK = 190;

const int EVP_F_EVP_PKEY_SET1_ENGINE = 187;

const int EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 206;

const int EVP_F_EVP_PKEY_SIGN = 140;

const int EVP_F_EVP_PKEY_SIGN_INIT = 141;

const int EVP_F_EVP_PKEY_VERIFY = 142;

const int EVP_F_EVP_PKEY_VERIFY_INIT = 143;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER = 144;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 145;

const int EVP_F_EVP_SIGNFINAL = 107;

const int EVP_F_EVP_VERIFYFINAL = 108;

const int EVP_F_INT_CTX_NEW = 157;

const int EVP_F_OK_NEW = 200;

const int EVP_F_PKCS5_PBE_KEYIVGEN = 117;

const int EVP_F_PKCS5_V2_PBE_KEYIVGEN = 118;

const int EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 164;

const int EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 180;

const int EVP_F_PKEY_SET_TYPE = 158;

const int EVP_F_RC2_MAGIC_TO_METH = 109;

const int EVP_F_RC5_CTRL = 125;

const int EVP_F_R_32_12_16_INIT_KEY = 242;

const int EVP_F_S390X_AES_GCM_CTRL = 201;

const int EVP_F_UPDATE = 173;

const int EVP_R_AES_KEY_SETUP_FAILED = 143;

const int EVP_R_ARIA_KEY_SETUP_FAILED = 176;

const int EVP_R_BAD_DECRYPT = 100;

const int EVP_R_BAD_KEY_LENGTH = 195;

const int EVP_R_BUFFER_TOO_SMALL = 155;

const int EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;

const int EVP_R_CIPHER_PARAMETER_ERROR = 122;

const int EVP_R_COMMAND_NOT_SUPPORTED = 147;

const int EVP_R_COPY_ERROR = 173;

const int EVP_R_CTRL_NOT_IMPLEMENTED = 132;

const int EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;

const int EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;

const int EVP_R_DECODE_ERROR = 114;

const int EVP_R_DIFFERENT_KEY_TYPES = 101;

const int EVP_R_DIFFERENT_PARAMETERS = 153;

const int EVP_R_ERROR_LOADING_SECTION = 165;

const int EVP_R_ERROR_SETTING_FIPS_MODE = 166;

const int EVP_R_EXPECTING_AN_HMAC_KEY = 174;

const int EVP_R_EXPECTING_AN_RSA_KEY = 127;

const int EVP_R_EXPECTING_A_DH_KEY = 128;

const int EVP_R_EXPECTING_A_DSA_KEY = 129;

const int EVP_R_EXPECTING_A_EC_KEY = 142;

const int EVP_R_EXPECTING_A_POLY1305_KEY = 164;

const int EVP_R_EXPECTING_A_SIPHASH_KEY = 175;

const int EVP_R_FIPS_MODE_NOT_SUPPORTED = 167;

const int EVP_R_GET_RAW_KEY_FAILED = 182;

const int EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;

const int EVP_R_INITIALIZATION_ERROR = 134;

const int EVP_R_INPUT_NOT_INITIALIZED = 111;

const int EVP_R_INVALID_DIGEST = 152;

const int EVP_R_INVALID_FIPS_MODE = 168;

const int EVP_R_INVALID_IV_LENGTH = 194;

const int EVP_R_INVALID_KEY = 163;

const int EVP_R_INVALID_KEY_LENGTH = 130;

const int EVP_R_INVALID_OPERATION = 148;

const int EVP_R_KEYGEN_FAILURE = 120;

const int EVP_R_KEY_SETUP_FAILED = 180;

const int EVP_R_MEMORY_LIMIT_EXCEEDED = 172;

const int EVP_R_MESSAGE_DIGEST_IS_NULL = 159;

const int EVP_R_METHOD_NOT_SUPPORTED = 144;

const int EVP_R_MISSING_PARAMETERS = 103;

const int EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;

const int EVP_R_NO_CIPHER_SET = 131;

const int EVP_R_NO_DEFAULT_DIGEST = 158;

const int EVP_R_NO_DIGEST_SET = 139;

const int EVP_R_NO_KEY_SET = 154;

const int EVP_R_NO_OPERATION_SET = 149;

const int EVP_R_ONLY_ONESHOT_SUPPORTED = 177;

const int EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;

const int EVP_R_OPERATON_NOT_INITIALIZED = 151;

const int EVP_R_OUTPUT_WOULD_OVERFLOW = 184;

const int EVP_R_PARTIALLY_OVERLAPPING = 162;

const int EVP_R_PBKDF2_ERROR = 181;

const int EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;

const int EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;

const int EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;

const int EVP_R_PUBLIC_KEY_NOT_RSA = 106;

const int EVP_R_UNKNOWN_CIPHER = 160;

const int EVP_R_UNKNOWN_DIGEST = 161;

const int EVP_R_UNKNOWN_OPTION = 169;

const int EVP_R_UNKNOWN_PBE_ALGORITHM = 121;

const int EVP_R_UNSUPPORTED_ALGORITHM = 156;

const int EVP_R_UNSUPPORTED_CIPHER = 107;

const int EVP_R_UNSUPPORTED_KEYLENGTH = 123;

const int EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;

const int EVP_R_UNSUPPORTED_KEY_SIZE = 108;

const int EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;

const int EVP_R_UNSUPPORTED_PRF = 125;

const int EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;

const int EVP_R_UNSUPPORTED_SALT_TYPE = 126;

const int EVP_R_WRAP_MODE_NOT_ALLOWED = 170;

const int EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;

const int EVP_R_XTS_DUPLICATED_KEYS = 183;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_KEY_LENGTH = 64;

const int EVP_MAX_IV_LENGTH = 16;

const int EVP_MAX_BLOCK_LENGTH = 32;

const int PKCS5_SALT_LEN = 8;

const int PKCS5_DEFAULT_ITER = 2048;

const String SN_undef = 'UNDEF';

const String LN_undef = 'undefined';

const int NID_undef = 0;

const int OBJ_undef = 0;

const String SN_itu_t = 'ITU-T';

const String LN_itu_t = 'itu-t';

const int NID_itu_t = 645;

const int OBJ_itu_t = 0;

const int NID_ccitt = 404;

const int OBJ_ccitt = 0;

const String SN_iso = 'ISO';

const String LN_iso = 'iso';

const int NID_iso = 181;

const int OBJ_iso = 1;

const String SN_joint_iso_itu_t = 'JOINT-ISO-ITU-T';

const String LN_joint_iso_itu_t = 'joint-iso-itu-t';

const int NID_joint_iso_itu_t = 646;

const int OBJ_joint_iso_itu_t = 2;

const int NID_joint_iso_ccitt = 393;

const int OBJ_joint_iso_ccitt = 2;

const String SN_member_body = 'member-body';

const String LN_member_body = 'ISO Member Body';

const int NID_member_body = 182;

const int OBJ_member_body = 1;

const String SN_identified_organization = 'identified-organization';

const int NID_identified_organization = 676;

const int OBJ_identified_organization = 1;

const String SN_hmac_md5 = 'HMAC-MD5';

const String LN_hmac_md5 = 'hmac-md5';

const int NID_hmac_md5 = 780;

const int OBJ_hmac_md5 = 1;

const String SN_hmac_sha1 = 'HMAC-SHA1';

const String LN_hmac_sha1 = 'hmac-sha1';

const int NID_hmac_sha1 = 781;

const int OBJ_hmac_sha1 = 1;

const String SN_x509ExtAdmission = 'x509ExtAdmission';

const String LN_x509ExtAdmission =
    'Professional Information or basis for Admission';

const int NID_x509ExtAdmission = 1093;

const int OBJ_x509ExtAdmission = 1;

const String SN_certicom_arc = 'certicom-arc';

const int NID_certicom_arc = 677;

const int OBJ_certicom_arc = 1;

const String SN_ieee = 'ieee';

const int NID_ieee = 1170;

const int OBJ_ieee = 1;

const String SN_ieee_siswg = 'ieee-siswg';

const String LN_ieee_siswg = 'IEEE Security in Storage Working Group';

const int NID_ieee_siswg = 1171;

const int OBJ_ieee_siswg = 1;

const String SN_international_organizations = 'international-organizations';

const String LN_international_organizations = 'International Organizations';

const int NID_international_organizations = 647;

const int OBJ_international_organizations = 2;

const String SN_wap = 'wap';

const int NID_wap = 678;

const int OBJ_wap = 2;

const String SN_wap_wsg = 'wap-wsg';

const int NID_wap_wsg = 679;

const int OBJ_wap_wsg = 2;

const String SN_selected_attribute_types = 'selected-attribute-types';

const String LN_selected_attribute_types = 'Selected Attribute Types';

const int NID_selected_attribute_types = 394;

const int OBJ_selected_attribute_types = 2;

const String SN_clearance = 'clearance';

const int NID_clearance = 395;

const int OBJ_clearance = 2;

const String SN_ISO_US = 'ISO-US';

const String LN_ISO_US = 'ISO US Member Body';

const int NID_ISO_US = 183;

const int OBJ_ISO_US = 1;

const String SN_X9_57 = 'X9-57';

const String LN_X9_57 = 'X9.57';

const int NID_X9_57 = 184;

const int OBJ_X9_57 = 1;

const String SN_X9cm = 'X9cm';

const String LN_X9cm = 'X9.57 CM ?';

const int NID_X9cm = 185;

const int OBJ_X9cm = 1;

const String SN_ISO_CN = 'ISO-CN';

const String LN_ISO_CN = 'ISO CN Member Body';

const int NID_ISO_CN = 1140;

const int OBJ_ISO_CN = 1;

const String SN_oscca = 'oscca';

const int NID_oscca = 1141;

const int OBJ_oscca = 1;

const String SN_sm_scheme = 'sm-scheme';

const int NID_sm_scheme = 1142;

const int OBJ_sm_scheme = 1;

const String SN_dsa = 'DSA';

const String LN_dsa = 'dsaEncryption';

const int NID_dsa = 116;

const int OBJ_dsa = 1;

const String SN_dsaWithSHA1 = 'DSA-SHA1';

const String LN_dsaWithSHA1 = 'dsaWithSHA1';

const int NID_dsaWithSHA1 = 113;

const int OBJ_dsaWithSHA1 = 1;

const String SN_ansi_X9_62 = 'ansi-X9-62';

const String LN_ansi_X9_62 = 'ANSI X9.62';

const int NID_ansi_X9_62 = 405;

const int OBJ_ansi_X9_62 = 1;

const int OBJ_X9_62_id_fieldType = 1;

const String SN_X9_62_prime_field = 'prime-field';

const int NID_X9_62_prime_field = 406;

const int OBJ_X9_62_prime_field = 1;

const String SN_X9_62_characteristic_two_field = 'characteristic-two-field';

const int NID_X9_62_characteristic_two_field = 407;

const int OBJ_X9_62_characteristic_two_field = 1;

const String SN_X9_62_id_characteristic_two_basis =
    'id-characteristic-two-basis';

const int NID_X9_62_id_characteristic_two_basis = 680;

const int OBJ_X9_62_id_characteristic_two_basis = 1;

const String SN_X9_62_onBasis = 'onBasis';

const int NID_X9_62_onBasis = 681;

const int OBJ_X9_62_onBasis = 1;

const String SN_X9_62_tpBasis = 'tpBasis';

const int NID_X9_62_tpBasis = 682;

const int OBJ_X9_62_tpBasis = 1;

const String SN_X9_62_ppBasis = 'ppBasis';

const int NID_X9_62_ppBasis = 683;

const int OBJ_X9_62_ppBasis = 1;

const int OBJ_X9_62_id_publicKeyType = 1;

const String SN_X9_62_id_ecPublicKey = 'id-ecPublicKey';

const int NID_X9_62_id_ecPublicKey = 408;

const int OBJ_X9_62_id_ecPublicKey = 1;

const int OBJ_X9_62_ellipticCurve = 1;

const int OBJ_X9_62_c_TwoCurve = 1;

const String SN_X9_62_c2pnb163v1 = 'c2pnb163v1';

const int NID_X9_62_c2pnb163v1 = 684;

const int OBJ_X9_62_c2pnb163v1 = 1;

const String SN_X9_62_c2pnb163v2 = 'c2pnb163v2';

const int NID_X9_62_c2pnb163v2 = 685;

const int OBJ_X9_62_c2pnb163v2 = 1;

const String SN_X9_62_c2pnb163v3 = 'c2pnb163v3';

const int NID_X9_62_c2pnb163v3 = 686;

const int OBJ_X9_62_c2pnb163v3 = 1;

const String SN_X9_62_c2pnb176v1 = 'c2pnb176v1';

const int NID_X9_62_c2pnb176v1 = 687;

const int OBJ_X9_62_c2pnb176v1 = 1;

const String SN_X9_62_c2tnb191v1 = 'c2tnb191v1';

const int NID_X9_62_c2tnb191v1 = 688;

const int OBJ_X9_62_c2tnb191v1 = 1;

const String SN_X9_62_c2tnb191v2 = 'c2tnb191v2';

const int NID_X9_62_c2tnb191v2 = 689;

const int OBJ_X9_62_c2tnb191v2 = 1;

const String SN_X9_62_c2tnb191v3 = 'c2tnb191v3';

const int NID_X9_62_c2tnb191v3 = 690;

const int OBJ_X9_62_c2tnb191v3 = 1;

const String SN_X9_62_c2onb191v4 = 'c2onb191v4';

const int NID_X9_62_c2onb191v4 = 691;

const int OBJ_X9_62_c2onb191v4 = 1;

const String SN_X9_62_c2onb191v5 = 'c2onb191v5';

const int NID_X9_62_c2onb191v5 = 692;

const int OBJ_X9_62_c2onb191v5 = 1;

const String SN_X9_62_c2pnb208w1 = 'c2pnb208w1';

const int NID_X9_62_c2pnb208w1 = 693;

const int OBJ_X9_62_c2pnb208w1 = 1;

const String SN_X9_62_c2tnb239v1 = 'c2tnb239v1';

const int NID_X9_62_c2tnb239v1 = 694;

const int OBJ_X9_62_c2tnb239v1 = 1;

const String SN_X9_62_c2tnb239v2 = 'c2tnb239v2';

const int NID_X9_62_c2tnb239v2 = 695;

const int OBJ_X9_62_c2tnb239v2 = 1;

const String SN_X9_62_c2tnb239v3 = 'c2tnb239v3';

const int NID_X9_62_c2tnb239v3 = 696;

const int OBJ_X9_62_c2tnb239v3 = 1;

const String SN_X9_62_c2onb239v4 = 'c2onb239v4';

const int NID_X9_62_c2onb239v4 = 697;

const int OBJ_X9_62_c2onb239v4 = 1;

const String SN_X9_62_c2onb239v5 = 'c2onb239v5';

const int NID_X9_62_c2onb239v5 = 698;

const int OBJ_X9_62_c2onb239v5 = 1;

const String SN_X9_62_c2pnb272w1 = 'c2pnb272w1';

const int NID_X9_62_c2pnb272w1 = 699;

const int OBJ_X9_62_c2pnb272w1 = 1;

const String SN_X9_62_c2pnb304w1 = 'c2pnb304w1';

const int NID_X9_62_c2pnb304w1 = 700;

const int OBJ_X9_62_c2pnb304w1 = 1;

const String SN_X9_62_c2tnb359v1 = 'c2tnb359v1';

const int NID_X9_62_c2tnb359v1 = 701;

const int OBJ_X9_62_c2tnb359v1 = 1;

const String SN_X9_62_c2pnb368w1 = 'c2pnb368w1';

const int NID_X9_62_c2pnb368w1 = 702;

const int OBJ_X9_62_c2pnb368w1 = 1;

const String SN_X9_62_c2tnb431r1 = 'c2tnb431r1';

const int NID_X9_62_c2tnb431r1 = 703;

const int OBJ_X9_62_c2tnb431r1 = 1;

const int OBJ_X9_62_primeCurve = 1;

const String SN_X9_62_prime192v1 = 'prime192v1';

const int NID_X9_62_prime192v1 = 409;

const int OBJ_X9_62_prime192v1 = 1;

const String SN_X9_62_prime192v2 = 'prime192v2';

const int NID_X9_62_prime192v2 = 410;

const int OBJ_X9_62_prime192v2 = 1;

const String SN_X9_62_prime192v3 = 'prime192v3';

const int NID_X9_62_prime192v3 = 411;

const int OBJ_X9_62_prime192v3 = 1;

const String SN_X9_62_prime239v1 = 'prime239v1';

const int NID_X9_62_prime239v1 = 412;

const int OBJ_X9_62_prime239v1 = 1;

const String SN_X9_62_prime239v2 = 'prime239v2';

const int NID_X9_62_prime239v2 = 413;

const int OBJ_X9_62_prime239v2 = 1;

const String SN_X9_62_prime239v3 = 'prime239v3';

const int NID_X9_62_prime239v3 = 414;

const int OBJ_X9_62_prime239v3 = 1;

const String SN_X9_62_prime256v1 = 'prime256v1';

const int NID_X9_62_prime256v1 = 415;

const int OBJ_X9_62_prime256v1 = 1;

const int OBJ_X9_62_id_ecSigType = 1;

const String SN_ecdsa_with_SHA1 = 'ecdsa-with-SHA1';

const int NID_ecdsa_with_SHA1 = 416;

const int OBJ_ecdsa_with_SHA1 = 1;

const String SN_ecdsa_with_Recommended = 'ecdsa-with-Recommended';

const int NID_ecdsa_with_Recommended = 791;

const int OBJ_ecdsa_with_Recommended = 1;

const String SN_ecdsa_with_Specified = 'ecdsa-with-Specified';

const int NID_ecdsa_with_Specified = 792;

const int OBJ_ecdsa_with_Specified = 1;

const String SN_ecdsa_with_SHA224 = 'ecdsa-with-SHA224';

const int NID_ecdsa_with_SHA224 = 793;

const int OBJ_ecdsa_with_SHA224 = 1;

const String SN_ecdsa_with_SHA256 = 'ecdsa-with-SHA256';

const int NID_ecdsa_with_SHA256 = 794;

const int OBJ_ecdsa_with_SHA256 = 1;

const String SN_ecdsa_with_SHA384 = 'ecdsa-with-SHA384';

const int NID_ecdsa_with_SHA384 = 795;

const int OBJ_ecdsa_with_SHA384 = 1;

const String SN_ecdsa_with_SHA512 = 'ecdsa-with-SHA512';

const int NID_ecdsa_with_SHA512 = 796;

const int OBJ_ecdsa_with_SHA512 = 1;

const int OBJ_secg_ellipticCurve = 1;

const String SN_secp112r1 = 'secp112r1';

const int NID_secp112r1 = 704;

const int OBJ_secp112r1 = 1;

const String SN_secp112r2 = 'secp112r2';

const int NID_secp112r2 = 705;

const int OBJ_secp112r2 = 1;

const String SN_secp128r1 = 'secp128r1';

const int NID_secp128r1 = 706;

const int OBJ_secp128r1 = 1;

const String SN_secp128r2 = 'secp128r2';

const int NID_secp128r2 = 707;

const int OBJ_secp128r2 = 1;

const String SN_secp160k1 = 'secp160k1';

const int NID_secp160k1 = 708;

const int OBJ_secp160k1 = 1;

const String SN_secp160r1 = 'secp160r1';

const int NID_secp160r1 = 709;

const int OBJ_secp160r1 = 1;

const String SN_secp160r2 = 'secp160r2';

const int NID_secp160r2 = 710;

const int OBJ_secp160r2 = 1;

const String SN_secp192k1 = 'secp192k1';

const int NID_secp192k1 = 711;

const int OBJ_secp192k1 = 1;

const String SN_secp224k1 = 'secp224k1';

const int NID_secp224k1 = 712;

const int OBJ_secp224k1 = 1;

const String SN_secp224r1 = 'secp224r1';

const int NID_secp224r1 = 713;

const int OBJ_secp224r1 = 1;

const String SN_secp256k1 = 'secp256k1';

const int NID_secp256k1 = 714;

const int OBJ_secp256k1 = 1;

const String SN_secp384r1 = 'secp384r1';

const int NID_secp384r1 = 715;

const int OBJ_secp384r1 = 1;

const String SN_secp521r1 = 'secp521r1';

const int NID_secp521r1 = 716;

const int OBJ_secp521r1 = 1;

const String SN_sect113r1 = 'sect113r1';

const int NID_sect113r1 = 717;

const int OBJ_sect113r1 = 1;

const String SN_sect113r2 = 'sect113r2';

const int NID_sect113r2 = 718;

const int OBJ_sect113r2 = 1;

const String SN_sect131r1 = 'sect131r1';

const int NID_sect131r1 = 719;

const int OBJ_sect131r1 = 1;

const String SN_sect131r2 = 'sect131r2';

const int NID_sect131r2 = 720;

const int OBJ_sect131r2 = 1;

const String SN_sect163k1 = 'sect163k1';

const int NID_sect163k1 = 721;

const int OBJ_sect163k1 = 1;

const String SN_sect163r1 = 'sect163r1';

const int NID_sect163r1 = 722;

const int OBJ_sect163r1 = 1;

const String SN_sect163r2 = 'sect163r2';

const int NID_sect163r2 = 723;

const int OBJ_sect163r2 = 1;

const String SN_sect193r1 = 'sect193r1';

const int NID_sect193r1 = 724;

const int OBJ_sect193r1 = 1;

const String SN_sect193r2 = 'sect193r2';

const int NID_sect193r2 = 725;

const int OBJ_sect193r2 = 1;

const String SN_sect233k1 = 'sect233k1';

const int NID_sect233k1 = 726;

const int OBJ_sect233k1 = 1;

const String SN_sect233r1 = 'sect233r1';

const int NID_sect233r1 = 727;

const int OBJ_sect233r1 = 1;

const String SN_sect239k1 = 'sect239k1';

const int NID_sect239k1 = 728;

const int OBJ_sect239k1 = 1;

const String SN_sect283k1 = 'sect283k1';

const int NID_sect283k1 = 729;

const int OBJ_sect283k1 = 1;

const String SN_sect283r1 = 'sect283r1';

const int NID_sect283r1 = 730;

const int OBJ_sect283r1 = 1;

const String SN_sect409k1 = 'sect409k1';

const int NID_sect409k1 = 731;

const int OBJ_sect409k1 = 1;

const String SN_sect409r1 = 'sect409r1';

const int NID_sect409r1 = 732;

const int OBJ_sect409r1 = 1;

const String SN_sect571k1 = 'sect571k1';

const int NID_sect571k1 = 733;

const int OBJ_sect571k1 = 1;

const String SN_sect571r1 = 'sect571r1';

const int NID_sect571r1 = 734;

const int OBJ_sect571r1 = 1;

const int OBJ_wap_wsg_idm_ecid = 2;

const String SN_wap_wsg_idm_ecid_wtls1 = 'wap-wsg-idm-ecid-wtls1';

const int NID_wap_wsg_idm_ecid_wtls1 = 735;

const int OBJ_wap_wsg_idm_ecid_wtls1 = 2;

const String SN_wap_wsg_idm_ecid_wtls3 = 'wap-wsg-idm-ecid-wtls3';

const int NID_wap_wsg_idm_ecid_wtls3 = 736;

const int OBJ_wap_wsg_idm_ecid_wtls3 = 2;

const String SN_wap_wsg_idm_ecid_wtls4 = 'wap-wsg-idm-ecid-wtls4';

const int NID_wap_wsg_idm_ecid_wtls4 = 737;

const int OBJ_wap_wsg_idm_ecid_wtls4 = 2;

const String SN_wap_wsg_idm_ecid_wtls5 = 'wap-wsg-idm-ecid-wtls5';

const int NID_wap_wsg_idm_ecid_wtls5 = 738;

const int OBJ_wap_wsg_idm_ecid_wtls5 = 2;

const String SN_wap_wsg_idm_ecid_wtls6 = 'wap-wsg-idm-ecid-wtls6';

const int NID_wap_wsg_idm_ecid_wtls6 = 739;

const int OBJ_wap_wsg_idm_ecid_wtls6 = 2;

const String SN_wap_wsg_idm_ecid_wtls7 = 'wap-wsg-idm-ecid-wtls7';

const int NID_wap_wsg_idm_ecid_wtls7 = 740;

const int OBJ_wap_wsg_idm_ecid_wtls7 = 2;

const String SN_wap_wsg_idm_ecid_wtls8 = 'wap-wsg-idm-ecid-wtls8';

const int NID_wap_wsg_idm_ecid_wtls8 = 741;

const int OBJ_wap_wsg_idm_ecid_wtls8 = 2;

const String SN_wap_wsg_idm_ecid_wtls9 = 'wap-wsg-idm-ecid-wtls9';

const int NID_wap_wsg_idm_ecid_wtls9 = 742;

const int OBJ_wap_wsg_idm_ecid_wtls9 = 2;

const String SN_wap_wsg_idm_ecid_wtls10 = 'wap-wsg-idm-ecid-wtls10';

const int NID_wap_wsg_idm_ecid_wtls10 = 743;

const int OBJ_wap_wsg_idm_ecid_wtls10 = 2;

const String SN_wap_wsg_idm_ecid_wtls11 = 'wap-wsg-idm-ecid-wtls11';

const int NID_wap_wsg_idm_ecid_wtls11 = 744;

const int OBJ_wap_wsg_idm_ecid_wtls11 = 2;

const String SN_wap_wsg_idm_ecid_wtls12 = 'wap-wsg-idm-ecid-wtls12';

const int NID_wap_wsg_idm_ecid_wtls12 = 745;

const int OBJ_wap_wsg_idm_ecid_wtls12 = 2;

const String SN_cast5_cbc = 'CAST5-CBC';

const String LN_cast5_cbc = 'cast5-cbc';

const int NID_cast5_cbc = 108;

const int OBJ_cast5_cbc = 1;

const String SN_cast5_ecb = 'CAST5-ECB';

const String LN_cast5_ecb = 'cast5-ecb';

const int NID_cast5_ecb = 109;

const String SN_cast5_cfb64 = 'CAST5-CFB';

const String LN_cast5_cfb64 = 'cast5-cfb';

const int NID_cast5_cfb64 = 110;

const String SN_cast5_ofb64 = 'CAST5-OFB';

const String LN_cast5_ofb64 = 'cast5-ofb';

const int NID_cast5_ofb64 = 111;

const String LN_pbeWithMD5AndCast5_CBC = 'pbeWithMD5AndCast5CBC';

const int NID_pbeWithMD5AndCast5_CBC = 112;

const int OBJ_pbeWithMD5AndCast5_CBC = 1;

const String SN_id_PasswordBasedMAC = 'id-PasswordBasedMAC';

const String LN_id_PasswordBasedMAC = 'password based MAC';

const int NID_id_PasswordBasedMAC = 782;

const int OBJ_id_PasswordBasedMAC = 1;

const String SN_id_DHBasedMac = 'id-DHBasedMac';

const String LN_id_DHBasedMac = 'Diffie-Hellman based MAC';

const int NID_id_DHBasedMac = 783;

const int OBJ_id_DHBasedMac = 1;

const String SN_rsadsi = 'rsadsi';

const String LN_rsadsi = 'RSA Data Security, Inc.';

const int NID_rsadsi = 1;

const int OBJ_rsadsi = 1;

const String SN_pkcs = 'pkcs';

const String LN_pkcs = 'RSA Data Security, Inc. PKCS';

const int NID_pkcs = 2;

const int OBJ_pkcs = 1;

const String SN_pkcs1 = 'pkcs1';

const int NID_pkcs1 = 186;

const int OBJ_pkcs1 = 1;

const String LN_rsaEncryption = 'rsaEncryption';

const int NID_rsaEncryption = 6;

const int OBJ_rsaEncryption = 1;

const String SN_md2WithRSAEncryption = 'RSA-MD2';

const String LN_md2WithRSAEncryption = 'md2WithRSAEncryption';

const int NID_md2WithRSAEncryption = 7;

const int OBJ_md2WithRSAEncryption = 1;

const String SN_md4WithRSAEncryption = 'RSA-MD4';

const String LN_md4WithRSAEncryption = 'md4WithRSAEncryption';

const int NID_md4WithRSAEncryption = 396;

const int OBJ_md4WithRSAEncryption = 1;

const String SN_md5WithRSAEncryption = 'RSA-MD5';

const String LN_md5WithRSAEncryption = 'md5WithRSAEncryption';

const int NID_md5WithRSAEncryption = 8;

const int OBJ_md5WithRSAEncryption = 1;

const String SN_sha1WithRSAEncryption = 'RSA-SHA1';

const String LN_sha1WithRSAEncryption = 'sha1WithRSAEncryption';

const int NID_sha1WithRSAEncryption = 65;

const int OBJ_sha1WithRSAEncryption = 1;

const String SN_rsaesOaep = 'RSAES-OAEP';

const String LN_rsaesOaep = 'rsaesOaep';

const int NID_rsaesOaep = 919;

const int OBJ_rsaesOaep = 1;

const String SN_mgf1 = 'MGF1';

const String LN_mgf1 = 'mgf1';

const int NID_mgf1 = 911;

const int OBJ_mgf1 = 1;

const String SN_pSpecified = 'PSPECIFIED';

const String LN_pSpecified = 'pSpecified';

const int NID_pSpecified = 935;

const int OBJ_pSpecified = 1;

const String SN_rsassaPss = 'RSASSA-PSS';

const String LN_rsassaPss = 'rsassaPss';

const int NID_rsassaPss = 912;

const int OBJ_rsassaPss = 1;

const String SN_sha256WithRSAEncryption = 'RSA-SHA256';

const String LN_sha256WithRSAEncryption = 'sha256WithRSAEncryption';

const int NID_sha256WithRSAEncryption = 668;

const int OBJ_sha256WithRSAEncryption = 1;

const String SN_sha384WithRSAEncryption = 'RSA-SHA384';

const String LN_sha384WithRSAEncryption = 'sha384WithRSAEncryption';

const int NID_sha384WithRSAEncryption = 669;

const int OBJ_sha384WithRSAEncryption = 1;

const String SN_sha512WithRSAEncryption = 'RSA-SHA512';

const String LN_sha512WithRSAEncryption = 'sha512WithRSAEncryption';

const int NID_sha512WithRSAEncryption = 670;

const int OBJ_sha512WithRSAEncryption = 1;

const String SN_sha224WithRSAEncryption = 'RSA-SHA224';

const String LN_sha224WithRSAEncryption = 'sha224WithRSAEncryption';

const int NID_sha224WithRSAEncryption = 671;

const int OBJ_sha224WithRSAEncryption = 1;

const String SN_sha512_224WithRSAEncryption = 'RSA-SHA512/224';

const String LN_sha512_224WithRSAEncryption = 'sha512-224WithRSAEncryption';

const int NID_sha512_224WithRSAEncryption = 1145;

const int OBJ_sha512_224WithRSAEncryption = 1;

const String SN_sha512_256WithRSAEncryption = 'RSA-SHA512/256';

const String LN_sha512_256WithRSAEncryption = 'sha512-256WithRSAEncryption';

const int NID_sha512_256WithRSAEncryption = 1146;

const int OBJ_sha512_256WithRSAEncryption = 1;

const String SN_pkcs3 = 'pkcs3';

const int NID_pkcs3 = 27;

const int OBJ_pkcs3 = 1;

const String LN_dhKeyAgreement = 'dhKeyAgreement';

const int NID_dhKeyAgreement = 28;

const int OBJ_dhKeyAgreement = 1;

const String SN_pkcs5 = 'pkcs5';

const int NID_pkcs5 = 187;

const int OBJ_pkcs5 = 1;

const String SN_pbeWithMD2AndDES_CBC = 'PBE-MD2-DES';

const String LN_pbeWithMD2AndDES_CBC = 'pbeWithMD2AndDES-CBC';

const int NID_pbeWithMD2AndDES_CBC = 9;

const int OBJ_pbeWithMD2AndDES_CBC = 1;

const String SN_pbeWithMD5AndDES_CBC = 'PBE-MD5-DES';

const String LN_pbeWithMD5AndDES_CBC = 'pbeWithMD5AndDES-CBC';

const int NID_pbeWithMD5AndDES_CBC = 10;

const int OBJ_pbeWithMD5AndDES_CBC = 1;

const String SN_pbeWithMD2AndRC2_CBC = 'PBE-MD2-RC2-64';

const String LN_pbeWithMD2AndRC2_CBC = 'pbeWithMD2AndRC2-CBC';

const int NID_pbeWithMD2AndRC2_CBC = 168;

const int OBJ_pbeWithMD2AndRC2_CBC = 1;

const String SN_pbeWithMD5AndRC2_CBC = 'PBE-MD5-RC2-64';

const String LN_pbeWithMD5AndRC2_CBC = 'pbeWithMD5AndRC2-CBC';

const int NID_pbeWithMD5AndRC2_CBC = 169;

const int OBJ_pbeWithMD5AndRC2_CBC = 1;

const String SN_pbeWithSHA1AndDES_CBC = 'PBE-SHA1-DES';

const String LN_pbeWithSHA1AndDES_CBC = 'pbeWithSHA1AndDES-CBC';

const int NID_pbeWithSHA1AndDES_CBC = 170;

const int OBJ_pbeWithSHA1AndDES_CBC = 1;

const String SN_pbeWithSHA1AndRC2_CBC = 'PBE-SHA1-RC2-64';

const String LN_pbeWithSHA1AndRC2_CBC = 'pbeWithSHA1AndRC2-CBC';

const int NID_pbeWithSHA1AndRC2_CBC = 68;

const int OBJ_pbeWithSHA1AndRC2_CBC = 1;

const String LN_id_pbkdf2 = 'PBKDF2';

const int NID_id_pbkdf2 = 69;

const int OBJ_id_pbkdf2 = 1;

const String LN_pbes2 = 'PBES2';

const int NID_pbes2 = 161;

const int OBJ_pbes2 = 1;

const String LN_pbmac1 = 'PBMAC1';

const int NID_pbmac1 = 162;

const int OBJ_pbmac1 = 1;

const String SN_pkcs7 = 'pkcs7';

const int NID_pkcs7 = 20;

const int OBJ_pkcs7 = 1;

const String LN_pkcs7_data = 'pkcs7-data';

const int NID_pkcs7_data = 21;

const int OBJ_pkcs7_data = 1;

const String LN_pkcs7_signed = 'pkcs7-signedData';

const int NID_pkcs7_signed = 22;

const int OBJ_pkcs7_signed = 1;

const String LN_pkcs7_enveloped = 'pkcs7-envelopedData';

const int NID_pkcs7_enveloped = 23;

const int OBJ_pkcs7_enveloped = 1;

const String LN_pkcs7_signedAndEnveloped = 'pkcs7-signedAndEnvelopedData';

const int NID_pkcs7_signedAndEnveloped = 24;

const int OBJ_pkcs7_signedAndEnveloped = 1;

const String LN_pkcs7_digest = 'pkcs7-digestData';

const int NID_pkcs7_digest = 25;

const int OBJ_pkcs7_digest = 1;

const String LN_pkcs7_encrypted = 'pkcs7-encryptedData';

const int NID_pkcs7_encrypted = 26;

const int OBJ_pkcs7_encrypted = 1;

const String SN_pkcs9 = 'pkcs9';

const int NID_pkcs9 = 47;

const int OBJ_pkcs9 = 1;

const String LN_pkcs9_emailAddress = 'emailAddress';

const int NID_pkcs9_emailAddress = 48;

const int OBJ_pkcs9_emailAddress = 1;

const String LN_pkcs9_unstructuredName = 'unstructuredName';

const int NID_pkcs9_unstructuredName = 49;

const int OBJ_pkcs9_unstructuredName = 1;

const String LN_pkcs9_contentType = 'contentType';

const int NID_pkcs9_contentType = 50;

const int OBJ_pkcs9_contentType = 1;

const String LN_pkcs9_messageDigest = 'messageDigest';

const int NID_pkcs9_messageDigest = 51;

const int OBJ_pkcs9_messageDigest = 1;

const String LN_pkcs9_signingTime = 'signingTime';

const int NID_pkcs9_signingTime = 52;

const int OBJ_pkcs9_signingTime = 1;

const String LN_pkcs9_countersignature = 'countersignature';

const int NID_pkcs9_countersignature = 53;

const int OBJ_pkcs9_countersignature = 1;

const String LN_pkcs9_challengePassword = 'challengePassword';

const int NID_pkcs9_challengePassword = 54;

const int OBJ_pkcs9_challengePassword = 1;

const String LN_pkcs9_unstructuredAddress = 'unstructuredAddress';

const int NID_pkcs9_unstructuredAddress = 55;

const int OBJ_pkcs9_unstructuredAddress = 1;

const String LN_pkcs9_extCertAttributes = 'extendedCertificateAttributes';

const int NID_pkcs9_extCertAttributes = 56;

const int OBJ_pkcs9_extCertAttributes = 1;

const String SN_ext_req = 'extReq';

const String LN_ext_req = 'Extension Request';

const int NID_ext_req = 172;

const int OBJ_ext_req = 1;

const String SN_SMIMECapabilities = 'SMIME-CAPS';

const String LN_SMIMECapabilities = 'S/MIME Capabilities';

const int NID_SMIMECapabilities = 167;

const int OBJ_SMIMECapabilities = 1;

const String SN_SMIME = 'SMIME';

const String LN_SMIME = 'S/MIME';

const int NID_SMIME = 188;

const int OBJ_SMIME = 1;

const String SN_id_smime_mod = 'id-smime-mod';

const int NID_id_smime_mod = 189;

const int OBJ_id_smime_mod = 1;

const String SN_id_smime_ct = 'id-smime-ct';

const int NID_id_smime_ct = 190;

const int OBJ_id_smime_ct = 1;

const String SN_id_smime_aa = 'id-smime-aa';

const int NID_id_smime_aa = 191;

const int OBJ_id_smime_aa = 1;

const String SN_id_smime_alg = 'id-smime-alg';

const int NID_id_smime_alg = 192;

const int OBJ_id_smime_alg = 1;

const String SN_id_smime_cd = 'id-smime-cd';

const int NID_id_smime_cd = 193;

const int OBJ_id_smime_cd = 1;

const String SN_id_smime_spq = 'id-smime-spq';

const int NID_id_smime_spq = 194;

const int OBJ_id_smime_spq = 1;

const String SN_id_smime_cti = 'id-smime-cti';

const int NID_id_smime_cti = 195;

const int OBJ_id_smime_cti = 1;

const String SN_id_smime_mod_cms = 'id-smime-mod-cms';

const int NID_id_smime_mod_cms = 196;

const int OBJ_id_smime_mod_cms = 1;

const String SN_id_smime_mod_ess = 'id-smime-mod-ess';

const int NID_id_smime_mod_ess = 197;

const int OBJ_id_smime_mod_ess = 1;

const String SN_id_smime_mod_oid = 'id-smime-mod-oid';

const int NID_id_smime_mod_oid = 198;

const int OBJ_id_smime_mod_oid = 1;

const String SN_id_smime_mod_msg_v3 = 'id-smime-mod-msg-v3';

const int NID_id_smime_mod_msg_v3 = 199;

const int OBJ_id_smime_mod_msg_v3 = 1;

const String SN_id_smime_mod_ets_eSignature_88 =
    'id-smime-mod-ets-eSignature-88';

const int NID_id_smime_mod_ets_eSignature_88 = 200;

const int OBJ_id_smime_mod_ets_eSignature_88 = 1;

const String SN_id_smime_mod_ets_eSignature_97 =
    'id-smime-mod-ets-eSignature-97';

const int NID_id_smime_mod_ets_eSignature_97 = 201;

const int OBJ_id_smime_mod_ets_eSignature_97 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_88 =
    'id-smime-mod-ets-eSigPolicy-88';

const int NID_id_smime_mod_ets_eSigPolicy_88 = 202;

const int OBJ_id_smime_mod_ets_eSigPolicy_88 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_97 =
    'id-smime-mod-ets-eSigPolicy-97';

const int NID_id_smime_mod_ets_eSigPolicy_97 = 203;

const int OBJ_id_smime_mod_ets_eSigPolicy_97 = 1;

const String SN_id_smime_ct_receipt = 'id-smime-ct-receipt';

const int NID_id_smime_ct_receipt = 204;

const int OBJ_id_smime_ct_receipt = 1;

const String SN_id_smime_ct_authData = 'id-smime-ct-authData';

const int NID_id_smime_ct_authData = 205;

const int OBJ_id_smime_ct_authData = 1;

const String SN_id_smime_ct_publishCert = 'id-smime-ct-publishCert';

const int NID_id_smime_ct_publishCert = 206;

const int OBJ_id_smime_ct_publishCert = 1;

const String SN_id_smime_ct_TSTInfo = 'id-smime-ct-TSTInfo';

const int NID_id_smime_ct_TSTInfo = 207;

const int OBJ_id_smime_ct_TSTInfo = 1;

const String SN_id_smime_ct_TDTInfo = 'id-smime-ct-TDTInfo';

const int NID_id_smime_ct_TDTInfo = 208;

const int OBJ_id_smime_ct_TDTInfo = 1;

const String SN_id_smime_ct_contentInfo = 'id-smime-ct-contentInfo';

const int NID_id_smime_ct_contentInfo = 209;

const int OBJ_id_smime_ct_contentInfo = 1;

const String SN_id_smime_ct_DVCSRequestData = 'id-smime-ct-DVCSRequestData';

const int NID_id_smime_ct_DVCSRequestData = 210;

const int OBJ_id_smime_ct_DVCSRequestData = 1;

const String SN_id_smime_ct_DVCSResponseData = 'id-smime-ct-DVCSResponseData';

const int NID_id_smime_ct_DVCSResponseData = 211;

const int OBJ_id_smime_ct_DVCSResponseData = 1;

const String SN_id_smime_ct_compressedData = 'id-smime-ct-compressedData';

const int NID_id_smime_ct_compressedData = 786;

const int OBJ_id_smime_ct_compressedData = 1;

const String SN_id_smime_ct_contentCollection = 'id-smime-ct-contentCollection';

const int NID_id_smime_ct_contentCollection = 1058;

const int OBJ_id_smime_ct_contentCollection = 1;

const String SN_id_smime_ct_authEnvelopedData = 'id-smime-ct-authEnvelopedData';

const int NID_id_smime_ct_authEnvelopedData = 1059;

const int OBJ_id_smime_ct_authEnvelopedData = 1;

const String SN_id_ct_asciiTextWithCRLF = 'id-ct-asciiTextWithCRLF';

const int NID_id_ct_asciiTextWithCRLF = 787;

const int OBJ_id_ct_asciiTextWithCRLF = 1;

const String SN_id_ct_xml = 'id-ct-xml';

const int NID_id_ct_xml = 1060;

const int OBJ_id_ct_xml = 1;

const String SN_id_smime_aa_receiptRequest = 'id-smime-aa-receiptRequest';

const int NID_id_smime_aa_receiptRequest = 212;

const int OBJ_id_smime_aa_receiptRequest = 1;

const String SN_id_smime_aa_securityLabel = 'id-smime-aa-securityLabel';

const int NID_id_smime_aa_securityLabel = 213;

const int OBJ_id_smime_aa_securityLabel = 1;

const String SN_id_smime_aa_mlExpandHistory = 'id-smime-aa-mlExpandHistory';

const int NID_id_smime_aa_mlExpandHistory = 214;

const int OBJ_id_smime_aa_mlExpandHistory = 1;

const String SN_id_smime_aa_contentHint = 'id-smime-aa-contentHint';

const int NID_id_smime_aa_contentHint = 215;

const int OBJ_id_smime_aa_contentHint = 1;

const String SN_id_smime_aa_msgSigDigest = 'id-smime-aa-msgSigDigest';

const int NID_id_smime_aa_msgSigDigest = 216;

const int OBJ_id_smime_aa_msgSigDigest = 1;

const String SN_id_smime_aa_encapContentType = 'id-smime-aa-encapContentType';

const int NID_id_smime_aa_encapContentType = 217;

const int OBJ_id_smime_aa_encapContentType = 1;

const String SN_id_smime_aa_contentIdentifier = 'id-smime-aa-contentIdentifier';

const int NID_id_smime_aa_contentIdentifier = 218;

const int OBJ_id_smime_aa_contentIdentifier = 1;

const String SN_id_smime_aa_macValue = 'id-smime-aa-macValue';

const int NID_id_smime_aa_macValue = 219;

const int OBJ_id_smime_aa_macValue = 1;

const String SN_id_smime_aa_equivalentLabels = 'id-smime-aa-equivalentLabels';

const int NID_id_smime_aa_equivalentLabels = 220;

const int OBJ_id_smime_aa_equivalentLabels = 1;

const String SN_id_smime_aa_contentReference = 'id-smime-aa-contentReference';

const int NID_id_smime_aa_contentReference = 221;

const int OBJ_id_smime_aa_contentReference = 1;

const String SN_id_smime_aa_encrypKeyPref = 'id-smime-aa-encrypKeyPref';

const int NID_id_smime_aa_encrypKeyPref = 222;

const int OBJ_id_smime_aa_encrypKeyPref = 1;

const String SN_id_smime_aa_signingCertificate =
    'id-smime-aa-signingCertificate';

const int NID_id_smime_aa_signingCertificate = 223;

const int OBJ_id_smime_aa_signingCertificate = 1;

const String SN_id_smime_aa_smimeEncryptCerts = 'id-smime-aa-smimeEncryptCerts';

const int NID_id_smime_aa_smimeEncryptCerts = 224;

const int OBJ_id_smime_aa_smimeEncryptCerts = 1;

const String SN_id_smime_aa_timeStampToken = 'id-smime-aa-timeStampToken';

const int NID_id_smime_aa_timeStampToken = 225;

const int OBJ_id_smime_aa_timeStampToken = 1;

const String SN_id_smime_aa_ets_sigPolicyId = 'id-smime-aa-ets-sigPolicyId';

const int NID_id_smime_aa_ets_sigPolicyId = 226;

const int OBJ_id_smime_aa_ets_sigPolicyId = 1;

const String SN_id_smime_aa_ets_commitmentType =
    'id-smime-aa-ets-commitmentType';

const int NID_id_smime_aa_ets_commitmentType = 227;

const int OBJ_id_smime_aa_ets_commitmentType = 1;

const String SN_id_smime_aa_ets_signerLocation =
    'id-smime-aa-ets-signerLocation';

const int NID_id_smime_aa_ets_signerLocation = 228;

const int OBJ_id_smime_aa_ets_signerLocation = 1;

const String SN_id_smime_aa_ets_signerAttr = 'id-smime-aa-ets-signerAttr';

const int NID_id_smime_aa_ets_signerAttr = 229;

const int OBJ_id_smime_aa_ets_signerAttr = 1;

const String SN_id_smime_aa_ets_otherSigCert = 'id-smime-aa-ets-otherSigCert';

const int NID_id_smime_aa_ets_otherSigCert = 230;

const int OBJ_id_smime_aa_ets_otherSigCert = 1;

const String SN_id_smime_aa_ets_contentTimestamp =
    'id-smime-aa-ets-contentTimestamp';

const int NID_id_smime_aa_ets_contentTimestamp = 231;

const int OBJ_id_smime_aa_ets_contentTimestamp = 1;

const String SN_id_smime_aa_ets_CertificateRefs =
    'id-smime-aa-ets-CertificateRefs';

const int NID_id_smime_aa_ets_CertificateRefs = 232;

const int OBJ_id_smime_aa_ets_CertificateRefs = 1;

const String SN_id_smime_aa_ets_RevocationRefs =
    'id-smime-aa-ets-RevocationRefs';

const int NID_id_smime_aa_ets_RevocationRefs = 233;

const int OBJ_id_smime_aa_ets_RevocationRefs = 1;

const String SN_id_smime_aa_ets_certValues = 'id-smime-aa-ets-certValues';

const int NID_id_smime_aa_ets_certValues = 234;

const int OBJ_id_smime_aa_ets_certValues = 1;

const String SN_id_smime_aa_ets_revocationValues =
    'id-smime-aa-ets-revocationValues';

const int NID_id_smime_aa_ets_revocationValues = 235;

const int OBJ_id_smime_aa_ets_revocationValues = 1;

const String SN_id_smime_aa_ets_escTimeStamp = 'id-smime-aa-ets-escTimeStamp';

const int NID_id_smime_aa_ets_escTimeStamp = 236;

const int OBJ_id_smime_aa_ets_escTimeStamp = 1;

const String SN_id_smime_aa_ets_certCRLTimestamp =
    'id-smime-aa-ets-certCRLTimestamp';

const int NID_id_smime_aa_ets_certCRLTimestamp = 237;

const int OBJ_id_smime_aa_ets_certCRLTimestamp = 1;

const String SN_id_smime_aa_ets_archiveTimeStamp =
    'id-smime-aa-ets-archiveTimeStamp';

const int NID_id_smime_aa_ets_archiveTimeStamp = 238;

const int OBJ_id_smime_aa_ets_archiveTimeStamp = 1;

const String SN_id_smime_aa_signatureType = 'id-smime-aa-signatureType';

const int NID_id_smime_aa_signatureType = 239;

const int OBJ_id_smime_aa_signatureType = 1;

const String SN_id_smime_aa_dvcs_dvc = 'id-smime-aa-dvcs-dvc';

const int NID_id_smime_aa_dvcs_dvc = 240;

const int OBJ_id_smime_aa_dvcs_dvc = 1;

const String SN_id_smime_aa_signingCertificateV2 =
    'id-smime-aa-signingCertificateV2';

const int NID_id_smime_aa_signingCertificateV2 = 1086;

const int OBJ_id_smime_aa_signingCertificateV2 = 1;

const String SN_id_smime_alg_ESDHwith3DES = 'id-smime-alg-ESDHwith3DES';

const int NID_id_smime_alg_ESDHwith3DES = 241;

const int OBJ_id_smime_alg_ESDHwith3DES = 1;

const String SN_id_smime_alg_ESDHwithRC2 = 'id-smime-alg-ESDHwithRC2';

const int NID_id_smime_alg_ESDHwithRC2 = 242;

const int OBJ_id_smime_alg_ESDHwithRC2 = 1;

const String SN_id_smime_alg_3DESwrap = 'id-smime-alg-3DESwrap';

const int NID_id_smime_alg_3DESwrap = 243;

const int OBJ_id_smime_alg_3DESwrap = 1;

const String SN_id_smime_alg_RC2wrap = 'id-smime-alg-RC2wrap';

const int NID_id_smime_alg_RC2wrap = 244;

const int OBJ_id_smime_alg_RC2wrap = 1;

const String SN_id_smime_alg_ESDH = 'id-smime-alg-ESDH';

const int NID_id_smime_alg_ESDH = 245;

const int OBJ_id_smime_alg_ESDH = 1;

const String SN_id_smime_alg_CMS3DESwrap = 'id-smime-alg-CMS3DESwrap';

const int NID_id_smime_alg_CMS3DESwrap = 246;

const int OBJ_id_smime_alg_CMS3DESwrap = 1;

const String SN_id_smime_alg_CMSRC2wrap = 'id-smime-alg-CMSRC2wrap';

const int NID_id_smime_alg_CMSRC2wrap = 247;

const int OBJ_id_smime_alg_CMSRC2wrap = 1;

const String SN_id_alg_PWRI_KEK = 'id-alg-PWRI-KEK';

const int NID_id_alg_PWRI_KEK = 893;

const int OBJ_id_alg_PWRI_KEK = 1;

const String SN_id_smime_cd_ldap = 'id-smime-cd-ldap';

const int NID_id_smime_cd_ldap = 248;

const int OBJ_id_smime_cd_ldap = 1;

const String SN_id_smime_spq_ets_sqt_uri = 'id-smime-spq-ets-sqt-uri';

const int NID_id_smime_spq_ets_sqt_uri = 249;

const int OBJ_id_smime_spq_ets_sqt_uri = 1;

const String SN_id_smime_spq_ets_sqt_unotice = 'id-smime-spq-ets-sqt-unotice';

const int NID_id_smime_spq_ets_sqt_unotice = 250;

const int OBJ_id_smime_spq_ets_sqt_unotice = 1;

const String SN_id_smime_cti_ets_proofOfOrigin =
    'id-smime-cti-ets-proofOfOrigin';

const int NID_id_smime_cti_ets_proofOfOrigin = 251;

const int OBJ_id_smime_cti_ets_proofOfOrigin = 1;

const String SN_id_smime_cti_ets_proofOfReceipt =
    'id-smime-cti-ets-proofOfReceipt';

const int NID_id_smime_cti_ets_proofOfReceipt = 252;

const int OBJ_id_smime_cti_ets_proofOfReceipt = 1;

const String SN_id_smime_cti_ets_proofOfDelivery =
    'id-smime-cti-ets-proofOfDelivery';

const int NID_id_smime_cti_ets_proofOfDelivery = 253;

const int OBJ_id_smime_cti_ets_proofOfDelivery = 1;

const String SN_id_smime_cti_ets_proofOfSender =
    'id-smime-cti-ets-proofOfSender';

const int NID_id_smime_cti_ets_proofOfSender = 254;

const int OBJ_id_smime_cti_ets_proofOfSender = 1;

const String SN_id_smime_cti_ets_proofOfApproval =
    'id-smime-cti-ets-proofOfApproval';

const int NID_id_smime_cti_ets_proofOfApproval = 255;

const int OBJ_id_smime_cti_ets_proofOfApproval = 1;

const String SN_id_smime_cti_ets_proofOfCreation =
    'id-smime-cti-ets-proofOfCreation';

const int NID_id_smime_cti_ets_proofOfCreation = 256;

const int OBJ_id_smime_cti_ets_proofOfCreation = 1;

const String LN_friendlyName = 'friendlyName';

const int NID_friendlyName = 156;

const int OBJ_friendlyName = 1;

const String LN_localKeyID = 'localKeyID';

const int NID_localKeyID = 157;

const int OBJ_localKeyID = 1;

const String SN_ms_csp_name = 'CSPName';

const String LN_ms_csp_name = 'Microsoft CSP Name';

const int NID_ms_csp_name = 417;

const int OBJ_ms_csp_name = 1;

const String SN_LocalKeySet = 'LocalKeySet';

const String LN_LocalKeySet = 'Microsoft Local Key set';

const int NID_LocalKeySet = 856;

const int OBJ_LocalKeySet = 1;

const int OBJ_certTypes = 1;

const String LN_x509Certificate = 'x509Certificate';

const int NID_x509Certificate = 158;

const int OBJ_x509Certificate = 1;

const String LN_sdsiCertificate = 'sdsiCertificate';

const int NID_sdsiCertificate = 159;

const int OBJ_sdsiCertificate = 1;

const int OBJ_crlTypes = 1;

const String LN_x509Crl = 'x509Crl';

const int NID_x509Crl = 160;

const int OBJ_x509Crl = 1;

const int OBJ_pkcs12 = 1;

const int OBJ_pkcs12_pbeids = 1;

const String SN_pbe_WithSHA1And128BitRC4 = 'PBE-SHA1-RC4-128';

const String LN_pbe_WithSHA1And128BitRC4 = 'pbeWithSHA1And128BitRC4';

const int NID_pbe_WithSHA1And128BitRC4 = 144;

const int OBJ_pbe_WithSHA1And128BitRC4 = 1;

const String SN_pbe_WithSHA1And40BitRC4 = 'PBE-SHA1-RC4-40';

const String LN_pbe_WithSHA1And40BitRC4 = 'pbeWithSHA1And40BitRC4';

const int NID_pbe_WithSHA1And40BitRC4 = 145;

const int OBJ_pbe_WithSHA1And40BitRC4 = 1;

const String SN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'PBE-SHA1-3DES';

const String LN_pbe_WithSHA1And3_Key_TripleDES_CBC =
    'pbeWithSHA1And3-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;

const int OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'PBE-SHA1-2DES';

const String LN_pbe_WithSHA1And2_Key_TripleDES_CBC =
    'pbeWithSHA1And2-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;

const int OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And128BitRC2_CBC = 'PBE-SHA1-RC2-128';

const String LN_pbe_WithSHA1And128BitRC2_CBC = 'pbeWithSHA1And128BitRC2-CBC';

const int NID_pbe_WithSHA1And128BitRC2_CBC = 148;

const int OBJ_pbe_WithSHA1And128BitRC2_CBC = 1;

const String SN_pbe_WithSHA1And40BitRC2_CBC = 'PBE-SHA1-RC2-40';

const String LN_pbe_WithSHA1And40BitRC2_CBC = 'pbeWithSHA1And40BitRC2-CBC';

const int NID_pbe_WithSHA1And40BitRC2_CBC = 149;

const int OBJ_pbe_WithSHA1And40BitRC2_CBC = 1;

const int OBJ_pkcs12_Version1 = 1;

const int OBJ_pkcs12_BagIds = 1;

const String LN_keyBag = 'keyBag';

const int NID_keyBag = 150;

const int OBJ_keyBag = 1;

const String LN_pkcs8ShroudedKeyBag = 'pkcs8ShroudedKeyBag';

const int NID_pkcs8ShroudedKeyBag = 151;

const int OBJ_pkcs8ShroudedKeyBag = 1;

const String LN_certBag = 'certBag';

const int NID_certBag = 152;

const int OBJ_certBag = 1;

const String LN_crlBag = 'crlBag';

const int NID_crlBag = 153;

const int OBJ_crlBag = 1;

const String LN_secretBag = 'secretBag';

const int NID_secretBag = 154;

const int OBJ_secretBag = 1;

const String LN_safeContentsBag = 'safeContentsBag';

const int NID_safeContentsBag = 155;

const int OBJ_safeContentsBag = 1;

const String SN_md2 = 'MD2';

const String LN_md2 = 'md2';

const int NID_md2 = 3;

const int OBJ_md2 = 1;

const String SN_md4 = 'MD4';

const String LN_md4 = 'md4';

const int NID_md4 = 257;

const int OBJ_md4 = 1;

const String SN_md5 = 'MD5';

const String LN_md5 = 'md5';

const int NID_md5 = 4;

const int OBJ_md5 = 1;

const String SN_md5_sha1 = 'MD5-SHA1';

const String LN_md5_sha1 = 'md5-sha1';

const int NID_md5_sha1 = 114;

const String LN_hmacWithMD5 = 'hmacWithMD5';

const int NID_hmacWithMD5 = 797;

const int OBJ_hmacWithMD5 = 1;

const String LN_hmacWithSHA1 = 'hmacWithSHA1';

const int NID_hmacWithSHA1 = 163;

const int OBJ_hmacWithSHA1 = 1;

const String SN_sm2 = 'SM2';

const String LN_sm2 = 'sm2';

const int NID_sm2 = 1172;

const int OBJ_sm2 = 1;

const String SN_sm3 = 'SM3';

const String LN_sm3 = 'sm3';

const int NID_sm3 = 1143;

const int OBJ_sm3 = 1;

const String SN_sm3WithRSAEncryption = 'RSA-SM3';

const String LN_sm3WithRSAEncryption = 'sm3WithRSAEncryption';

const int NID_sm3WithRSAEncryption = 1144;

const int OBJ_sm3WithRSAEncryption = 1;

const String LN_hmacWithSHA224 = 'hmacWithSHA224';

const int NID_hmacWithSHA224 = 798;

const int OBJ_hmacWithSHA224 = 1;

const String LN_hmacWithSHA256 = 'hmacWithSHA256';

const int NID_hmacWithSHA256 = 799;

const int OBJ_hmacWithSHA256 = 1;

const String LN_hmacWithSHA384 = 'hmacWithSHA384';

const int NID_hmacWithSHA384 = 800;

const int OBJ_hmacWithSHA384 = 1;

const String LN_hmacWithSHA512 = 'hmacWithSHA512';

const int NID_hmacWithSHA512 = 801;

const int OBJ_hmacWithSHA512 = 1;

const String LN_hmacWithSHA512_224 = 'hmacWithSHA512-224';

const int NID_hmacWithSHA512_224 = 1193;

const int OBJ_hmacWithSHA512_224 = 1;

const String LN_hmacWithSHA512_256 = 'hmacWithSHA512-256';

const int NID_hmacWithSHA512_256 = 1194;

const int OBJ_hmacWithSHA512_256 = 1;

const String SN_rc2_cbc = 'RC2-CBC';

const String LN_rc2_cbc = 'rc2-cbc';

const int NID_rc2_cbc = 37;

const int OBJ_rc2_cbc = 1;

const String SN_rc2_ecb = 'RC2-ECB';

const String LN_rc2_ecb = 'rc2-ecb';

const int NID_rc2_ecb = 38;

const String SN_rc2_cfb64 = 'RC2-CFB';

const String LN_rc2_cfb64 = 'rc2-cfb';

const int NID_rc2_cfb64 = 39;

const String SN_rc2_ofb64 = 'RC2-OFB';

const String LN_rc2_ofb64 = 'rc2-ofb';

const int NID_rc2_ofb64 = 40;

const String SN_rc2_40_cbc = 'RC2-40-CBC';

const String LN_rc2_40_cbc = 'rc2-40-cbc';

const int NID_rc2_40_cbc = 98;

const String SN_rc2_64_cbc = 'RC2-64-CBC';

const String LN_rc2_64_cbc = 'rc2-64-cbc';

const int NID_rc2_64_cbc = 166;

const String SN_rc4 = 'RC4';

const String LN_rc4 = 'rc4';

const int NID_rc4 = 5;

const int OBJ_rc4 = 1;

const String SN_rc4_40 = 'RC4-40';

const String LN_rc4_40 = 'rc4-40';

const int NID_rc4_40 = 97;

const String SN_des_ede3_cbc = 'DES-EDE3-CBC';

const String LN_des_ede3_cbc = 'des-ede3-cbc';

const int NID_des_ede3_cbc = 44;

const int OBJ_des_ede3_cbc = 1;

const String SN_rc5_cbc = 'RC5-CBC';

const String LN_rc5_cbc = 'rc5-cbc';

const int NID_rc5_cbc = 120;

const int OBJ_rc5_cbc = 1;

const String SN_rc5_ecb = 'RC5-ECB';

const String LN_rc5_ecb = 'rc5-ecb';

const int NID_rc5_ecb = 121;

const String SN_rc5_cfb64 = 'RC5-CFB';

const String LN_rc5_cfb64 = 'rc5-cfb';

const int NID_rc5_cfb64 = 122;

const String SN_rc5_ofb64 = 'RC5-OFB';

const String LN_rc5_ofb64 = 'rc5-ofb';

const int NID_rc5_ofb64 = 123;

const String SN_ms_ext_req = 'msExtReq';

const String LN_ms_ext_req = 'Microsoft Extension Request';

const int NID_ms_ext_req = 171;

const int OBJ_ms_ext_req = 1;

const String SN_ms_code_ind = 'msCodeInd';

const String LN_ms_code_ind = 'Microsoft Individual Code Signing';

const int NID_ms_code_ind = 134;

const int OBJ_ms_code_ind = 1;

const String SN_ms_code_com = 'msCodeCom';

const String LN_ms_code_com = 'Microsoft Commercial Code Signing';

const int NID_ms_code_com = 135;

const int OBJ_ms_code_com = 1;

const String SN_ms_ctl_sign = 'msCTLSign';

const String LN_ms_ctl_sign = 'Microsoft Trust List Signing';

const int NID_ms_ctl_sign = 136;

const int OBJ_ms_ctl_sign = 1;

const String SN_ms_sgc = 'msSGC';

const String LN_ms_sgc = 'Microsoft Server Gated Crypto';

const int NID_ms_sgc = 137;

const int OBJ_ms_sgc = 1;

const String SN_ms_efs = 'msEFS';

const String LN_ms_efs = 'Microsoft Encrypted File System';

const int NID_ms_efs = 138;

const int OBJ_ms_efs = 1;

const String SN_ms_smartcard_login = 'msSmartcardLogin';

const String LN_ms_smartcard_login = 'Microsoft Smartcard Login';

const int NID_ms_smartcard_login = 648;

const int OBJ_ms_smartcard_login = 1;

const String SN_ms_upn = 'msUPN';

const String LN_ms_upn = 'Microsoft User Principal Name';

const int NID_ms_upn = 649;

const int OBJ_ms_upn = 1;

const String SN_idea_cbc = 'IDEA-CBC';

const String LN_idea_cbc = 'idea-cbc';

const int NID_idea_cbc = 34;

const int OBJ_idea_cbc = 1;

const String SN_idea_ecb = 'IDEA-ECB';

const String LN_idea_ecb = 'idea-ecb';

const int NID_idea_ecb = 36;

const String SN_idea_cfb64 = 'IDEA-CFB';

const String LN_idea_cfb64 = 'idea-cfb';

const int NID_idea_cfb64 = 35;

const String SN_idea_ofb64 = 'IDEA-OFB';

const String LN_idea_ofb64 = 'idea-ofb';

const int NID_idea_ofb64 = 46;

const String SN_bf_cbc = 'BF-CBC';

const String LN_bf_cbc = 'bf-cbc';

const int NID_bf_cbc = 91;

const int OBJ_bf_cbc = 1;

const String SN_bf_ecb = 'BF-ECB';

const String LN_bf_ecb = 'bf-ecb';

const int NID_bf_ecb = 92;

const String SN_bf_cfb64 = 'BF-CFB';

const String LN_bf_cfb64 = 'bf-cfb';

const int NID_bf_cfb64 = 93;

const String SN_bf_ofb64 = 'BF-OFB';

const String LN_bf_ofb64 = 'bf-ofb';

const int NID_bf_ofb64 = 94;

const String SN_id_pkix = 'PKIX';

const int NID_id_pkix = 127;

const int OBJ_id_pkix = 1;

const String SN_id_pkix_mod = 'id-pkix-mod';

const int NID_id_pkix_mod = 258;

const int OBJ_id_pkix_mod = 1;

const String SN_id_pe = 'id-pe';

const int NID_id_pe = 175;

const int OBJ_id_pe = 1;

const String SN_id_qt = 'id-qt';

const int NID_id_qt = 259;

const int OBJ_id_qt = 1;

const String SN_id_kp = 'id-kp';

const int NID_id_kp = 128;

const int OBJ_id_kp = 1;

const String SN_id_it = 'id-it';

const int NID_id_it = 260;

const int OBJ_id_it = 1;

const String SN_id_pkip = 'id-pkip';

const int NID_id_pkip = 261;

const int OBJ_id_pkip = 1;

const String SN_id_alg = 'id-alg';

const int NID_id_alg = 262;

const int OBJ_id_alg = 1;

const String SN_id_cmc = 'id-cmc';

const int NID_id_cmc = 263;

const int OBJ_id_cmc = 1;

const String SN_id_on = 'id-on';

const int NID_id_on = 264;

const int OBJ_id_on = 1;

const String SN_id_pda = 'id-pda';

const int NID_id_pda = 265;

const int OBJ_id_pda = 1;

const String SN_id_aca = 'id-aca';

const int NID_id_aca = 266;

const int OBJ_id_aca = 1;

const String SN_id_qcs = 'id-qcs';

const int NID_id_qcs = 267;

const int OBJ_id_qcs = 1;

const String SN_id_cct = 'id-cct';

const int NID_id_cct = 268;

const int OBJ_id_cct = 1;

const String SN_id_ppl = 'id-ppl';

const int NID_id_ppl = 662;

const int OBJ_id_ppl = 1;

const String SN_id_ad = 'id-ad';

const int NID_id_ad = 176;

const int OBJ_id_ad = 1;

const String SN_id_pkix1_explicit_88 = 'id-pkix1-explicit-88';

const int NID_id_pkix1_explicit_88 = 269;

const int OBJ_id_pkix1_explicit_88 = 1;

const String SN_id_pkix1_implicit_88 = 'id-pkix1-implicit-88';

const int NID_id_pkix1_implicit_88 = 270;

const int OBJ_id_pkix1_implicit_88 = 1;

const String SN_id_pkix1_explicit_93 = 'id-pkix1-explicit-93';

const int NID_id_pkix1_explicit_93 = 271;

const int OBJ_id_pkix1_explicit_93 = 1;

const String SN_id_pkix1_implicit_93 = 'id-pkix1-implicit-93';

const int NID_id_pkix1_implicit_93 = 272;

const int OBJ_id_pkix1_implicit_93 = 1;

const String SN_id_mod_crmf = 'id-mod-crmf';

const int NID_id_mod_crmf = 273;

const int OBJ_id_mod_crmf = 1;

const String SN_id_mod_cmc = 'id-mod-cmc';

const int NID_id_mod_cmc = 274;

const int OBJ_id_mod_cmc = 1;

const String SN_id_mod_kea_profile_88 = 'id-mod-kea-profile-88';

const int NID_id_mod_kea_profile_88 = 275;

const int OBJ_id_mod_kea_profile_88 = 1;

const String SN_id_mod_kea_profile_93 = 'id-mod-kea-profile-93';

const int NID_id_mod_kea_profile_93 = 276;

const int OBJ_id_mod_kea_profile_93 = 1;

const String SN_id_mod_cmp = 'id-mod-cmp';

const int NID_id_mod_cmp = 277;

const int OBJ_id_mod_cmp = 1;

const String SN_id_mod_qualified_cert_88 = 'id-mod-qualified-cert-88';

const int NID_id_mod_qualified_cert_88 = 278;

const int OBJ_id_mod_qualified_cert_88 = 1;

const String SN_id_mod_qualified_cert_93 = 'id-mod-qualified-cert-93';

const int NID_id_mod_qualified_cert_93 = 279;

const int OBJ_id_mod_qualified_cert_93 = 1;

const String SN_id_mod_attribute_cert = 'id-mod-attribute-cert';

const int NID_id_mod_attribute_cert = 280;

const int OBJ_id_mod_attribute_cert = 1;

const String SN_id_mod_timestamp_protocol = 'id-mod-timestamp-protocol';

const int NID_id_mod_timestamp_protocol = 281;

const int OBJ_id_mod_timestamp_protocol = 1;

const String SN_id_mod_ocsp = 'id-mod-ocsp';

const int NID_id_mod_ocsp = 282;

const int OBJ_id_mod_ocsp = 1;

const String SN_id_mod_dvcs = 'id-mod-dvcs';

const int NID_id_mod_dvcs = 283;

const int OBJ_id_mod_dvcs = 1;

const String SN_id_mod_cmp2000 = 'id-mod-cmp2000';

const int NID_id_mod_cmp2000 = 284;

const int OBJ_id_mod_cmp2000 = 1;

const String SN_info_access = 'authorityInfoAccess';

const String LN_info_access = 'Authority Information Access';

const int NID_info_access = 177;

const int OBJ_info_access = 1;

const String SN_biometricInfo = 'biometricInfo';

const String LN_biometricInfo = 'Biometric Info';

const int NID_biometricInfo = 285;

const int OBJ_biometricInfo = 1;

const String SN_qcStatements = 'qcStatements';

const int NID_qcStatements = 286;

const int OBJ_qcStatements = 1;

const String SN_ac_auditEntity = 'ac-auditEntity';

const int NID_ac_auditEntity = 287;

const int OBJ_ac_auditEntity = 1;

const String SN_ac_targeting = 'ac-targeting';

const int NID_ac_targeting = 288;

const int OBJ_ac_targeting = 1;

const String SN_aaControls = 'aaControls';

const int NID_aaControls = 289;

const int OBJ_aaControls = 1;

const String SN_sbgp_ipAddrBlock = 'sbgp-ipAddrBlock';

const int NID_sbgp_ipAddrBlock = 290;

const int OBJ_sbgp_ipAddrBlock = 1;

const String SN_sbgp_autonomousSysNum = 'sbgp-autonomousSysNum';

const int NID_sbgp_autonomousSysNum = 291;

const int OBJ_sbgp_autonomousSysNum = 1;

const String SN_sbgp_routerIdentifier = 'sbgp-routerIdentifier';

const int NID_sbgp_routerIdentifier = 292;

const int OBJ_sbgp_routerIdentifier = 1;

const String SN_ac_proxying = 'ac-proxying';

const int NID_ac_proxying = 397;

const int OBJ_ac_proxying = 1;

const String SN_sinfo_access = 'subjectInfoAccess';

const String LN_sinfo_access = 'Subject Information Access';

const int NID_sinfo_access = 398;

const int OBJ_sinfo_access = 1;

const String SN_proxyCertInfo = 'proxyCertInfo';

const String LN_proxyCertInfo = 'Proxy Certificate Information';

const int NID_proxyCertInfo = 663;

const int OBJ_proxyCertInfo = 1;

const String SN_tlsfeature = 'tlsfeature';

const String LN_tlsfeature = 'TLS Feature';

const int NID_tlsfeature = 1020;

const int OBJ_tlsfeature = 1;

const String SN_id_qt_cps = 'id-qt-cps';

const String LN_id_qt_cps = 'Policy Qualifier CPS';

const int NID_id_qt_cps = 164;

const int OBJ_id_qt_cps = 1;

const String SN_id_qt_unotice = 'id-qt-unotice';

const String LN_id_qt_unotice = 'Policy Qualifier User Notice';

const int NID_id_qt_unotice = 165;

const int OBJ_id_qt_unotice = 1;

const String SN_textNotice = 'textNotice';

const int NID_textNotice = 293;

const int OBJ_textNotice = 1;

const String SN_server_auth = 'serverAuth';

const String LN_server_auth = 'TLS Web Server Authentication';

const int NID_server_auth = 129;

const int OBJ_server_auth = 1;

const String SN_client_auth = 'clientAuth';

const String LN_client_auth = 'TLS Web Client Authentication';

const int NID_client_auth = 130;

const int OBJ_client_auth = 1;

const String SN_code_sign = 'codeSigning';

const String LN_code_sign = 'Code Signing';

const int NID_code_sign = 131;

const int OBJ_code_sign = 1;

const String SN_email_protect = 'emailProtection';

const String LN_email_protect = 'E-mail Protection';

const int NID_email_protect = 132;

const int OBJ_email_protect = 1;

const String SN_ipsecEndSystem = 'ipsecEndSystem';

const String LN_ipsecEndSystem = 'IPSec End System';

const int NID_ipsecEndSystem = 294;

const int OBJ_ipsecEndSystem = 1;

const String SN_ipsecTunnel = 'ipsecTunnel';

const String LN_ipsecTunnel = 'IPSec Tunnel';

const int NID_ipsecTunnel = 295;

const int OBJ_ipsecTunnel = 1;

const String SN_ipsecUser = 'ipsecUser';

const String LN_ipsecUser = 'IPSec User';

const int NID_ipsecUser = 296;

const int OBJ_ipsecUser = 1;

const String SN_time_stamp = 'timeStamping';

const String LN_time_stamp = 'Time Stamping';

const int NID_time_stamp = 133;

const int OBJ_time_stamp = 1;

const String SN_OCSP_sign = 'OCSPSigning';

const String LN_OCSP_sign = 'OCSP Signing';

const int NID_OCSP_sign = 180;

const int OBJ_OCSP_sign = 1;

const String SN_dvcs = 'DVCS';

const String LN_dvcs = 'dvcs';

const int NID_dvcs = 297;

const int OBJ_dvcs = 1;

const String SN_ipsec_IKE = 'ipsecIKE';

const String LN_ipsec_IKE = 'ipsec Internet Key Exchange';

const int NID_ipsec_IKE = 1022;

const int OBJ_ipsec_IKE = 1;

const String SN_capwapAC = 'capwapAC';

const String LN_capwapAC = 'Ctrl/provision WAP Access';

const int NID_capwapAC = 1023;

const int OBJ_capwapAC = 1;

const String SN_capwapWTP = 'capwapWTP';

const String LN_capwapWTP = 'Ctrl/Provision WAP Termination';

const int NID_capwapWTP = 1024;

const int OBJ_capwapWTP = 1;

const String SN_sshClient = 'secureShellClient';

const String LN_sshClient = 'SSH Client';

const int NID_sshClient = 1025;

const int OBJ_sshClient = 1;

const String SN_sshServer = 'secureShellServer';

const String LN_sshServer = 'SSH Server';

const int NID_sshServer = 1026;

const int OBJ_sshServer = 1;

const String SN_sendRouter = 'sendRouter';

const String LN_sendRouter = 'Send Router';

const int NID_sendRouter = 1027;

const int OBJ_sendRouter = 1;

const String SN_sendProxiedRouter = 'sendProxiedRouter';

const String LN_sendProxiedRouter = 'Send Proxied Router';

const int NID_sendProxiedRouter = 1028;

const int OBJ_sendProxiedRouter = 1;

const String SN_sendOwner = 'sendOwner';

const String LN_sendOwner = 'Send Owner';

const int NID_sendOwner = 1029;

const int OBJ_sendOwner = 1;

const String SN_sendProxiedOwner = 'sendProxiedOwner';

const String LN_sendProxiedOwner = 'Send Proxied Owner';

const int NID_sendProxiedOwner = 1030;

const int OBJ_sendProxiedOwner = 1;

const String SN_cmcCA = 'cmcCA';

const String LN_cmcCA = 'CMC Certificate Authority';

const int NID_cmcCA = 1131;

const int OBJ_cmcCA = 1;

const String SN_cmcRA = 'cmcRA';

const String LN_cmcRA = 'CMC Registration Authority';

const int NID_cmcRA = 1132;

const int OBJ_cmcRA = 1;

const String SN_id_it_caProtEncCert = 'id-it-caProtEncCert';

const int NID_id_it_caProtEncCert = 298;

const int OBJ_id_it_caProtEncCert = 1;

const String SN_id_it_signKeyPairTypes = 'id-it-signKeyPairTypes';

const int NID_id_it_signKeyPairTypes = 299;

const int OBJ_id_it_signKeyPairTypes = 1;

const String SN_id_it_encKeyPairTypes = 'id-it-encKeyPairTypes';

const int NID_id_it_encKeyPairTypes = 300;

const int OBJ_id_it_encKeyPairTypes = 1;

const String SN_id_it_preferredSymmAlg = 'id-it-preferredSymmAlg';

const int NID_id_it_preferredSymmAlg = 301;

const int OBJ_id_it_preferredSymmAlg = 1;

const String SN_id_it_caKeyUpdateInfo = 'id-it-caKeyUpdateInfo';

const int NID_id_it_caKeyUpdateInfo = 302;

const int OBJ_id_it_caKeyUpdateInfo = 1;

const String SN_id_it_currentCRL = 'id-it-currentCRL';

const int NID_id_it_currentCRL = 303;

const int OBJ_id_it_currentCRL = 1;

const String SN_id_it_unsupportedOIDs = 'id-it-unsupportedOIDs';

const int NID_id_it_unsupportedOIDs = 304;

const int OBJ_id_it_unsupportedOIDs = 1;

const String SN_id_it_subscriptionRequest = 'id-it-subscriptionRequest';

const int NID_id_it_subscriptionRequest = 305;

const int OBJ_id_it_subscriptionRequest = 1;

const String SN_id_it_subscriptionResponse = 'id-it-subscriptionResponse';

const int NID_id_it_subscriptionResponse = 306;

const int OBJ_id_it_subscriptionResponse = 1;

const String SN_id_it_keyPairParamReq = 'id-it-keyPairParamReq';

const int NID_id_it_keyPairParamReq = 307;

const int OBJ_id_it_keyPairParamReq = 1;

const String SN_id_it_keyPairParamRep = 'id-it-keyPairParamRep';

const int NID_id_it_keyPairParamRep = 308;

const int OBJ_id_it_keyPairParamRep = 1;

const String SN_id_it_revPassphrase = 'id-it-revPassphrase';

const int NID_id_it_revPassphrase = 309;

const int OBJ_id_it_revPassphrase = 1;

const String SN_id_it_implicitConfirm = 'id-it-implicitConfirm';

const int NID_id_it_implicitConfirm = 310;

const int OBJ_id_it_implicitConfirm = 1;

const String SN_id_it_confirmWaitTime = 'id-it-confirmWaitTime';

const int NID_id_it_confirmWaitTime = 311;

const int OBJ_id_it_confirmWaitTime = 1;

const String SN_id_it_origPKIMessage = 'id-it-origPKIMessage';

const int NID_id_it_origPKIMessage = 312;

const int OBJ_id_it_origPKIMessage = 1;

const String SN_id_it_suppLangTags = 'id-it-suppLangTags';

const int NID_id_it_suppLangTags = 784;

const int OBJ_id_it_suppLangTags = 1;

const String SN_id_regCtrl = 'id-regCtrl';

const int NID_id_regCtrl = 313;

const int OBJ_id_regCtrl = 1;

const String SN_id_regInfo = 'id-regInfo';

const int NID_id_regInfo = 314;

const int OBJ_id_regInfo = 1;

const String SN_id_regCtrl_regToken = 'id-regCtrl-regToken';

const int NID_id_regCtrl_regToken = 315;

const int OBJ_id_regCtrl_regToken = 1;

const String SN_id_regCtrl_authenticator = 'id-regCtrl-authenticator';

const int NID_id_regCtrl_authenticator = 316;

const int OBJ_id_regCtrl_authenticator = 1;

const String SN_id_regCtrl_pkiPublicationInfo = 'id-regCtrl-pkiPublicationInfo';

const int NID_id_regCtrl_pkiPublicationInfo = 317;

const int OBJ_id_regCtrl_pkiPublicationInfo = 1;

const String SN_id_regCtrl_pkiArchiveOptions = 'id-regCtrl-pkiArchiveOptions';

const int NID_id_regCtrl_pkiArchiveOptions = 318;

const int OBJ_id_regCtrl_pkiArchiveOptions = 1;

const String SN_id_regCtrl_oldCertID = 'id-regCtrl-oldCertID';

const int NID_id_regCtrl_oldCertID = 319;

const int OBJ_id_regCtrl_oldCertID = 1;

const String SN_id_regCtrl_protocolEncrKey = 'id-regCtrl-protocolEncrKey';

const int NID_id_regCtrl_protocolEncrKey = 320;

const int OBJ_id_regCtrl_protocolEncrKey = 1;

const String SN_id_regInfo_utf8Pairs = 'id-regInfo-utf8Pairs';

const int NID_id_regInfo_utf8Pairs = 321;

const int OBJ_id_regInfo_utf8Pairs = 1;

const String SN_id_regInfo_certReq = 'id-regInfo-certReq';

const int NID_id_regInfo_certReq = 322;

const int OBJ_id_regInfo_certReq = 1;

const String SN_id_alg_des40 = 'id-alg-des40';

const int NID_id_alg_des40 = 323;

const int OBJ_id_alg_des40 = 1;

const String SN_id_alg_noSignature = 'id-alg-noSignature';

const int NID_id_alg_noSignature = 324;

const int OBJ_id_alg_noSignature = 1;

const String SN_id_alg_dh_sig_hmac_sha1 = 'id-alg-dh-sig-hmac-sha1';

const int NID_id_alg_dh_sig_hmac_sha1 = 325;

const int OBJ_id_alg_dh_sig_hmac_sha1 = 1;

const String SN_id_alg_dh_pop = 'id-alg-dh-pop';

const int NID_id_alg_dh_pop = 326;

const int OBJ_id_alg_dh_pop = 1;

const String SN_id_cmc_statusInfo = 'id-cmc-statusInfo';

const int NID_id_cmc_statusInfo = 327;

const int OBJ_id_cmc_statusInfo = 1;

const String SN_id_cmc_identification = 'id-cmc-identification';

const int NID_id_cmc_identification = 328;

const int OBJ_id_cmc_identification = 1;

const String SN_id_cmc_identityProof = 'id-cmc-identityProof';

const int NID_id_cmc_identityProof = 329;

const int OBJ_id_cmc_identityProof = 1;

const String SN_id_cmc_dataReturn = 'id-cmc-dataReturn';

const int NID_id_cmc_dataReturn = 330;

const int OBJ_id_cmc_dataReturn = 1;

const String SN_id_cmc_transactionId = 'id-cmc-transactionId';

const int NID_id_cmc_transactionId = 331;

const int OBJ_id_cmc_transactionId = 1;

const String SN_id_cmc_senderNonce = 'id-cmc-senderNonce';

const int NID_id_cmc_senderNonce = 332;

const int OBJ_id_cmc_senderNonce = 1;

const String SN_id_cmc_recipientNonce = 'id-cmc-recipientNonce';

const int NID_id_cmc_recipientNonce = 333;

const int OBJ_id_cmc_recipientNonce = 1;

const String SN_id_cmc_addExtensions = 'id-cmc-addExtensions';

const int NID_id_cmc_addExtensions = 334;

const int OBJ_id_cmc_addExtensions = 1;

const String SN_id_cmc_encryptedPOP = 'id-cmc-encryptedPOP';

const int NID_id_cmc_encryptedPOP = 335;

const int OBJ_id_cmc_encryptedPOP = 1;

const String SN_id_cmc_decryptedPOP = 'id-cmc-decryptedPOP';

const int NID_id_cmc_decryptedPOP = 336;

const int OBJ_id_cmc_decryptedPOP = 1;

const String SN_id_cmc_lraPOPWitness = 'id-cmc-lraPOPWitness';

const int NID_id_cmc_lraPOPWitness = 337;

const int OBJ_id_cmc_lraPOPWitness = 1;

const String SN_id_cmc_getCert = 'id-cmc-getCert';

const int NID_id_cmc_getCert = 338;

const int OBJ_id_cmc_getCert = 1;

const String SN_id_cmc_getCRL = 'id-cmc-getCRL';

const int NID_id_cmc_getCRL = 339;

const int OBJ_id_cmc_getCRL = 1;

const String SN_id_cmc_revokeRequest = 'id-cmc-revokeRequest';

const int NID_id_cmc_revokeRequest = 340;

const int OBJ_id_cmc_revokeRequest = 1;

const String SN_id_cmc_regInfo = 'id-cmc-regInfo';

const int NID_id_cmc_regInfo = 341;

const int OBJ_id_cmc_regInfo = 1;

const String SN_id_cmc_responseInfo = 'id-cmc-responseInfo';

const int NID_id_cmc_responseInfo = 342;

const int OBJ_id_cmc_responseInfo = 1;

const String SN_id_cmc_queryPending = 'id-cmc-queryPending';

const int NID_id_cmc_queryPending = 343;

const int OBJ_id_cmc_queryPending = 1;

const String SN_id_cmc_popLinkRandom = 'id-cmc-popLinkRandom';

const int NID_id_cmc_popLinkRandom = 344;

const int OBJ_id_cmc_popLinkRandom = 1;

const String SN_id_cmc_popLinkWitness = 'id-cmc-popLinkWitness';

const int NID_id_cmc_popLinkWitness = 345;

const int OBJ_id_cmc_popLinkWitness = 1;

const String SN_id_cmc_confirmCertAcceptance = 'id-cmc-confirmCertAcceptance';

const int NID_id_cmc_confirmCertAcceptance = 346;

const int OBJ_id_cmc_confirmCertAcceptance = 1;

const String SN_id_on_personalData = 'id-on-personalData';

const int NID_id_on_personalData = 347;

const int OBJ_id_on_personalData = 1;

const String SN_id_on_permanentIdentifier = 'id-on-permanentIdentifier';

const String LN_id_on_permanentIdentifier = 'Permanent Identifier';

const int NID_id_on_permanentIdentifier = 858;

const int OBJ_id_on_permanentIdentifier = 1;

const String SN_id_pda_dateOfBirth = 'id-pda-dateOfBirth';

const int NID_id_pda_dateOfBirth = 348;

const int OBJ_id_pda_dateOfBirth = 1;

const String SN_id_pda_placeOfBirth = 'id-pda-placeOfBirth';

const int NID_id_pda_placeOfBirth = 349;

const int OBJ_id_pda_placeOfBirth = 1;

const String SN_id_pda_gender = 'id-pda-gender';

const int NID_id_pda_gender = 351;

const int OBJ_id_pda_gender = 1;

const String SN_id_pda_countryOfCitizenship = 'id-pda-countryOfCitizenship';

const int NID_id_pda_countryOfCitizenship = 352;

const int OBJ_id_pda_countryOfCitizenship = 1;

const String SN_id_pda_countryOfResidence = 'id-pda-countryOfResidence';

const int NID_id_pda_countryOfResidence = 353;

const int OBJ_id_pda_countryOfResidence = 1;

const String SN_id_aca_authenticationInfo = 'id-aca-authenticationInfo';

const int NID_id_aca_authenticationInfo = 354;

const int OBJ_id_aca_authenticationInfo = 1;

const String SN_id_aca_accessIdentity = 'id-aca-accessIdentity';

const int NID_id_aca_accessIdentity = 355;

const int OBJ_id_aca_accessIdentity = 1;

const String SN_id_aca_chargingIdentity = 'id-aca-chargingIdentity';

const int NID_id_aca_chargingIdentity = 356;

const int OBJ_id_aca_chargingIdentity = 1;

const String SN_id_aca_group = 'id-aca-group';

const int NID_id_aca_group = 357;

const int OBJ_id_aca_group = 1;

const String SN_id_aca_role = 'id-aca-role';

const int NID_id_aca_role = 358;

const int OBJ_id_aca_role = 1;

const String SN_id_aca_encAttrs = 'id-aca-encAttrs';

const int NID_id_aca_encAttrs = 399;

const int OBJ_id_aca_encAttrs = 1;

const String SN_id_qcs_pkixQCSyntax_v1 = 'id-qcs-pkixQCSyntax-v1';

const int NID_id_qcs_pkixQCSyntax_v1 = 359;

const int OBJ_id_qcs_pkixQCSyntax_v1 = 1;

const String SN_id_cct_crs = 'id-cct-crs';

const int NID_id_cct_crs = 360;

const int OBJ_id_cct_crs = 1;

const String SN_id_cct_PKIData = 'id-cct-PKIData';

const int NID_id_cct_PKIData = 361;

const int OBJ_id_cct_PKIData = 1;

const String SN_id_cct_PKIResponse = 'id-cct-PKIResponse';

const int NID_id_cct_PKIResponse = 362;

const int OBJ_id_cct_PKIResponse = 1;

const String SN_id_ppl_anyLanguage = 'id-ppl-anyLanguage';

const String LN_id_ppl_anyLanguage = 'Any language';

const int NID_id_ppl_anyLanguage = 664;

const int OBJ_id_ppl_anyLanguage = 1;

const String SN_id_ppl_inheritAll = 'id-ppl-inheritAll';

const String LN_id_ppl_inheritAll = 'Inherit all';

const int NID_id_ppl_inheritAll = 665;

const int OBJ_id_ppl_inheritAll = 1;

const String SN_Independent = 'id-ppl-independent';

const String LN_Independent = 'Independent';

const int NID_Independent = 667;

const int OBJ_Independent = 1;

const String SN_ad_OCSP = 'OCSP';

const String LN_ad_OCSP = 'OCSP';

const int NID_ad_OCSP = 178;

const int OBJ_ad_OCSP = 1;

const String SN_ad_ca_issuers = 'caIssuers';

const String LN_ad_ca_issuers = 'CA Issuers';

const int NID_ad_ca_issuers = 179;

const int OBJ_ad_ca_issuers = 1;

const String SN_ad_timeStamping = 'ad_timestamping';

const String LN_ad_timeStamping = 'AD Time Stamping';

const int NID_ad_timeStamping = 363;

const int OBJ_ad_timeStamping = 1;

const String SN_ad_dvcs = 'AD_DVCS';

const String LN_ad_dvcs = 'ad dvcs';

const int NID_ad_dvcs = 364;

const int OBJ_ad_dvcs = 1;

const String SN_caRepository = 'caRepository';

const String LN_caRepository = 'CA Repository';

const int NID_caRepository = 785;

const int OBJ_caRepository = 1;

const int OBJ_id_pkix_OCSP = 1;

const String SN_id_pkix_OCSP_basic = 'basicOCSPResponse';

const String LN_id_pkix_OCSP_basic = 'Basic OCSP Response';

const int NID_id_pkix_OCSP_basic = 365;

const int OBJ_id_pkix_OCSP_basic = 1;

const String SN_id_pkix_OCSP_Nonce = 'Nonce';

const String LN_id_pkix_OCSP_Nonce = 'OCSP Nonce';

const int NID_id_pkix_OCSP_Nonce = 366;

const int OBJ_id_pkix_OCSP_Nonce = 1;

const String SN_id_pkix_OCSP_CrlID = 'CrlID';

const String LN_id_pkix_OCSP_CrlID = 'OCSP CRL ID';

const int NID_id_pkix_OCSP_CrlID = 367;

const int OBJ_id_pkix_OCSP_CrlID = 1;

const String SN_id_pkix_OCSP_acceptableResponses = 'acceptableResponses';

const String LN_id_pkix_OCSP_acceptableResponses = 'Acceptable OCSP Responses';

const int NID_id_pkix_OCSP_acceptableResponses = 368;

const int OBJ_id_pkix_OCSP_acceptableResponses = 1;

const String SN_id_pkix_OCSP_noCheck = 'noCheck';

const String LN_id_pkix_OCSP_noCheck = 'OCSP No Check';

const int NID_id_pkix_OCSP_noCheck = 369;

const int OBJ_id_pkix_OCSP_noCheck = 1;

const String SN_id_pkix_OCSP_archiveCutoff = 'archiveCutoff';

const String LN_id_pkix_OCSP_archiveCutoff = 'OCSP Archive Cutoff';

const int NID_id_pkix_OCSP_archiveCutoff = 370;

const int OBJ_id_pkix_OCSP_archiveCutoff = 1;

const String SN_id_pkix_OCSP_serviceLocator = 'serviceLocator';

const String LN_id_pkix_OCSP_serviceLocator = 'OCSP Service Locator';

const int NID_id_pkix_OCSP_serviceLocator = 371;

const int OBJ_id_pkix_OCSP_serviceLocator = 1;

const String SN_id_pkix_OCSP_extendedStatus = 'extendedStatus';

const String LN_id_pkix_OCSP_extendedStatus = 'Extended OCSP Status';

const int NID_id_pkix_OCSP_extendedStatus = 372;

const int OBJ_id_pkix_OCSP_extendedStatus = 1;

const String SN_id_pkix_OCSP_valid = 'valid';

const int NID_id_pkix_OCSP_valid = 373;

const int OBJ_id_pkix_OCSP_valid = 1;

const String SN_id_pkix_OCSP_path = 'path';

const int NID_id_pkix_OCSP_path = 374;

const int OBJ_id_pkix_OCSP_path = 1;

const String SN_id_pkix_OCSP_trustRoot = 'trustRoot';

const String LN_id_pkix_OCSP_trustRoot = 'Trust Root';

const int NID_id_pkix_OCSP_trustRoot = 375;

const int OBJ_id_pkix_OCSP_trustRoot = 1;

const String SN_algorithm = 'algorithm';

const String LN_algorithm = 'algorithm';

const int NID_algorithm = 376;

const int OBJ_algorithm = 1;

const String SN_md5WithRSA = 'RSA-NP-MD5';

const String LN_md5WithRSA = 'md5WithRSA';

const int NID_md5WithRSA = 104;

const int OBJ_md5WithRSA = 1;

const String SN_des_ecb = 'DES-ECB';

const String LN_des_ecb = 'des-ecb';

const int NID_des_ecb = 29;

const int OBJ_des_ecb = 1;

const String SN_des_cbc = 'DES-CBC';

const String LN_des_cbc = 'des-cbc';

const int NID_des_cbc = 31;

const int OBJ_des_cbc = 1;

const String SN_des_ofb64 = 'DES-OFB';

const String LN_des_ofb64 = 'des-ofb';

const int NID_des_ofb64 = 45;

const int OBJ_des_ofb64 = 1;

const String SN_des_cfb64 = 'DES-CFB';

const String LN_des_cfb64 = 'des-cfb';

const int NID_des_cfb64 = 30;

const int OBJ_des_cfb64 = 1;

const String SN_rsaSignature = 'rsaSignature';

const int NID_rsaSignature = 377;

const int OBJ_rsaSignature = 1;

const String SN_dsa_2 = 'DSA-old';

const String LN_dsa_2 = 'dsaEncryption-old';

const int NID_dsa_2 = 67;

const int OBJ_dsa_2 = 1;

const String SN_dsaWithSHA = 'DSA-SHA';

const String LN_dsaWithSHA = 'dsaWithSHA';

const int NID_dsaWithSHA = 66;

const int OBJ_dsaWithSHA = 1;

const String SN_shaWithRSAEncryption = 'RSA-SHA';

const String LN_shaWithRSAEncryption = 'shaWithRSAEncryption';

const int NID_shaWithRSAEncryption = 42;

const int OBJ_shaWithRSAEncryption = 1;

const String SN_des_ede_ecb = 'DES-EDE';

const String LN_des_ede_ecb = 'des-ede';

const int NID_des_ede_ecb = 32;

const int OBJ_des_ede_ecb = 1;

const String SN_des_ede3_ecb = 'DES-EDE3';

const String LN_des_ede3_ecb = 'des-ede3';

const int NID_des_ede3_ecb = 33;

const String SN_des_ede_cbc = 'DES-EDE-CBC';

const String LN_des_ede_cbc = 'des-ede-cbc';

const int NID_des_ede_cbc = 43;

const String SN_des_ede_cfb64 = 'DES-EDE-CFB';

const String LN_des_ede_cfb64 = 'des-ede-cfb';

const int NID_des_ede_cfb64 = 60;

const String SN_des_ede3_cfb64 = 'DES-EDE3-CFB';

const String LN_des_ede3_cfb64 = 'des-ede3-cfb';

const int NID_des_ede3_cfb64 = 61;

const String SN_des_ede_ofb64 = 'DES-EDE-OFB';

const String LN_des_ede_ofb64 = 'des-ede-ofb';

const int NID_des_ede_ofb64 = 62;

const String SN_des_ede3_ofb64 = 'DES-EDE3-OFB';

const String LN_des_ede3_ofb64 = 'des-ede3-ofb';

const int NID_des_ede3_ofb64 = 63;

const String SN_desx_cbc = 'DESX-CBC';

const String LN_desx_cbc = 'desx-cbc';

const int NID_desx_cbc = 80;

const String SN_sha = 'SHA';

const String LN_sha = 'sha';

const int NID_sha = 41;

const int OBJ_sha = 1;

const String SN_sha1 = 'SHA1';

const String LN_sha1 = 'sha1';

const int NID_sha1 = 64;

const int OBJ_sha1 = 1;

const String SN_dsaWithSHA1_2 = 'DSA-SHA1-old';

const String LN_dsaWithSHA1_2 = 'dsaWithSHA1-old';

const int NID_dsaWithSHA1_2 = 70;

const int OBJ_dsaWithSHA1_2 = 1;

const String SN_sha1WithRSA = 'RSA-SHA1-2';

const String LN_sha1WithRSA = 'sha1WithRSA';

const int NID_sha1WithRSA = 115;

const int OBJ_sha1WithRSA = 1;

const String SN_ripemd160 = 'RIPEMD160';

const String LN_ripemd160 = 'ripemd160';

const int NID_ripemd160 = 117;

const int OBJ_ripemd160 = 1;

const String SN_ripemd160WithRSA = 'RSA-RIPEMD160';

const String LN_ripemd160WithRSA = 'ripemd160WithRSA';

const int NID_ripemd160WithRSA = 119;

const int OBJ_ripemd160WithRSA = 1;

const String SN_blake2b512 = 'BLAKE2b512';

const String LN_blake2b512 = 'blake2b512';

const int NID_blake2b512 = 1056;

const int OBJ_blake2b512 = 1;

const String SN_blake2s256 = 'BLAKE2s256';

const String LN_blake2s256 = 'blake2s256';

const int NID_blake2s256 = 1057;

const int OBJ_blake2s256 = 1;

const String SN_sxnet = 'SXNetID';

const String LN_sxnet = 'Strong Extranet ID';

const int NID_sxnet = 143;

const int OBJ_sxnet = 1;

const String SN_X500 = 'X500';

const String LN_X500 = 'directory services (X.500)';

const int NID_X500 = 11;

const int OBJ_X500 = 2;

const String SN_X509 = 'X509';

const int NID_X509 = 12;

const int OBJ_X509 = 2;

const String SN_commonName = 'CN';

const String LN_commonName = 'commonName';

const int NID_commonName = 13;

const int OBJ_commonName = 2;

const String SN_surname = 'SN';

const String LN_surname = 'surname';

const int NID_surname = 100;

const int OBJ_surname = 2;

const String LN_serialNumber = 'serialNumber';

const int NID_serialNumber = 105;

const int OBJ_serialNumber = 2;

const String SN_countryName = 'C';

const String LN_countryName = 'countryName';

const int NID_countryName = 14;

const int OBJ_countryName = 2;

const String SN_localityName = 'L';

const String LN_localityName = 'localityName';

const int NID_localityName = 15;

const int OBJ_localityName = 2;

const String SN_stateOrProvinceName = 'ST';

const String LN_stateOrProvinceName = 'stateOrProvinceName';

const int NID_stateOrProvinceName = 16;

const int OBJ_stateOrProvinceName = 2;

const String SN_streetAddress = 'street';

const String LN_streetAddress = 'streetAddress';

const int NID_streetAddress = 660;

const int OBJ_streetAddress = 2;

const String SN_organizationName = 'O';

const String LN_organizationName = 'organizationName';

const int NID_organizationName = 17;

const int OBJ_organizationName = 2;

const String SN_organizationalUnitName = 'OU';

const String LN_organizationalUnitName = 'organizationalUnitName';

const int NID_organizationalUnitName = 18;

const int OBJ_organizationalUnitName = 2;

const String SN_title = 'title';

const String LN_title = 'title';

const int NID_title = 106;

const int OBJ_title = 2;

const String LN_description = 'description';

const int NID_description = 107;

const int OBJ_description = 2;

const String LN_searchGuide = 'searchGuide';

const int NID_searchGuide = 859;

const int OBJ_searchGuide = 2;

const String LN_businessCategory = 'businessCategory';

const int NID_businessCategory = 860;

const int OBJ_businessCategory = 2;

const String LN_postalAddress = 'postalAddress';

const int NID_postalAddress = 861;

const int OBJ_postalAddress = 2;

const String LN_postalCode = 'postalCode';

const int NID_postalCode = 661;

const int OBJ_postalCode = 2;

const String LN_postOfficeBox = 'postOfficeBox';

const int NID_postOfficeBox = 862;

const int OBJ_postOfficeBox = 2;

const String LN_physicalDeliveryOfficeName = 'physicalDeliveryOfficeName';

const int NID_physicalDeliveryOfficeName = 863;

const int OBJ_physicalDeliveryOfficeName = 2;

const String LN_telephoneNumber = 'telephoneNumber';

const int NID_telephoneNumber = 864;

const int OBJ_telephoneNumber = 2;

const String LN_telexNumber = 'telexNumber';

const int NID_telexNumber = 865;

const int OBJ_telexNumber = 2;

const String LN_teletexTerminalIdentifier = 'teletexTerminalIdentifier';

const int NID_teletexTerminalIdentifier = 866;

const int OBJ_teletexTerminalIdentifier = 2;

const String LN_facsimileTelephoneNumber = 'facsimileTelephoneNumber';

const int NID_facsimileTelephoneNumber = 867;

const int OBJ_facsimileTelephoneNumber = 2;

const String LN_x121Address = 'x121Address';

const int NID_x121Address = 868;

const int OBJ_x121Address = 2;

const String LN_internationaliSDNNumber = 'internationaliSDNNumber';

const int NID_internationaliSDNNumber = 869;

const int OBJ_internationaliSDNNumber = 2;

const String LN_registeredAddress = 'registeredAddress';

const int NID_registeredAddress = 870;

const int OBJ_registeredAddress = 2;

const String LN_destinationIndicator = 'destinationIndicator';

const int NID_destinationIndicator = 871;

const int OBJ_destinationIndicator = 2;

const String LN_preferredDeliveryMethod = 'preferredDeliveryMethod';

const int NID_preferredDeliveryMethod = 872;

const int OBJ_preferredDeliveryMethod = 2;

const String LN_presentationAddress = 'presentationAddress';

const int NID_presentationAddress = 873;

const int OBJ_presentationAddress = 2;

const String LN_supportedApplicationContext = 'supportedApplicationContext';

const int NID_supportedApplicationContext = 874;

const int OBJ_supportedApplicationContext = 2;

const String SN_member = 'member';

const int NID_member = 875;

const int OBJ_member = 2;

const String SN_owner = 'owner';

const int NID_owner = 876;

const int OBJ_owner = 2;

const String LN_roleOccupant = 'roleOccupant';

const int NID_roleOccupant = 877;

const int OBJ_roleOccupant = 2;

const String SN_seeAlso = 'seeAlso';

const int NID_seeAlso = 878;

const int OBJ_seeAlso = 2;

const String LN_userPassword = 'userPassword';

const int NID_userPassword = 879;

const int OBJ_userPassword = 2;

const String LN_userCertificate = 'userCertificate';

const int NID_userCertificate = 880;

const int OBJ_userCertificate = 2;

const String LN_cACertificate = 'cACertificate';

const int NID_cACertificate = 881;

const int OBJ_cACertificate = 2;

const String LN_authorityRevocationList = 'authorityRevocationList';

const int NID_authorityRevocationList = 882;

const int OBJ_authorityRevocationList = 2;

const String LN_certificateRevocationList = 'certificateRevocationList';

const int NID_certificateRevocationList = 883;

const int OBJ_certificateRevocationList = 2;

const String LN_crossCertificatePair = 'crossCertificatePair';

const int NID_crossCertificatePair = 884;

const int OBJ_crossCertificatePair = 2;

const String SN_name = 'name';

const String LN_name = 'name';

const int NID_name = 173;

const int OBJ_name = 2;

const String SN_givenName = 'GN';

const String LN_givenName = 'givenName';

const int NID_givenName = 99;

const int OBJ_givenName = 2;

const String SN_initials = 'initials';

const String LN_initials = 'initials';

const int NID_initials = 101;

const int OBJ_initials = 2;

const String LN_generationQualifier = 'generationQualifier';

const int NID_generationQualifier = 509;

const int OBJ_generationQualifier = 2;

const String LN_x500UniqueIdentifier = 'x500UniqueIdentifier';

const int NID_x500UniqueIdentifier = 503;

const int OBJ_x500UniqueIdentifier = 2;

const String SN_dnQualifier = 'dnQualifier';

const String LN_dnQualifier = 'dnQualifier';

const int NID_dnQualifier = 174;

const int OBJ_dnQualifier = 2;

const String LN_enhancedSearchGuide = 'enhancedSearchGuide';

const int NID_enhancedSearchGuide = 885;

const int OBJ_enhancedSearchGuide = 2;

const String LN_protocolInformation = 'protocolInformation';

const int NID_protocolInformation = 886;

const int OBJ_protocolInformation = 2;

const String LN_distinguishedName = 'distinguishedName';

const int NID_distinguishedName = 887;

const int OBJ_distinguishedName = 2;

const String LN_uniqueMember = 'uniqueMember';

const int NID_uniqueMember = 888;

const int OBJ_uniqueMember = 2;

const String LN_houseIdentifier = 'houseIdentifier';

const int NID_houseIdentifier = 889;

const int OBJ_houseIdentifier = 2;

const String LN_supportedAlgorithms = 'supportedAlgorithms';

const int NID_supportedAlgorithms = 890;

const int OBJ_supportedAlgorithms = 2;

const String LN_deltaRevocationList = 'deltaRevocationList';

const int NID_deltaRevocationList = 891;

const int OBJ_deltaRevocationList = 2;

const String SN_dmdName = 'dmdName';

const int NID_dmdName = 892;

const int OBJ_dmdName = 2;

const String LN_pseudonym = 'pseudonym';

const int NID_pseudonym = 510;

const int OBJ_pseudonym = 2;

const String SN_role = 'role';

const String LN_role = 'role';

const int NID_role = 400;

const int OBJ_role = 2;

const String LN_organizationIdentifier = 'organizationIdentifier';

const int NID_organizationIdentifier = 1089;

const int OBJ_organizationIdentifier = 2;

const String SN_countryCode3c = 'c3';

const String LN_countryCode3c = 'countryCode3c';

const int NID_countryCode3c = 1090;

const int OBJ_countryCode3c = 2;

const String SN_countryCode3n = 'n3';

const String LN_countryCode3n = 'countryCode3n';

const int NID_countryCode3n = 1091;

const int OBJ_countryCode3n = 2;

const String LN_dnsName = 'dnsName';

const int NID_dnsName = 1092;

const int OBJ_dnsName = 2;

const String SN_X500algorithms = 'X500algorithms';

const String LN_X500algorithms = 'directory services - algorithms';

const int NID_X500algorithms = 378;

const int OBJ_X500algorithms = 2;

const String SN_rsa = 'RSA';

const String LN_rsa = 'rsa';

const int NID_rsa = 19;

const int OBJ_rsa = 2;

const String SN_mdc2WithRSA = 'RSA-MDC2';

const String LN_mdc2WithRSA = 'mdc2WithRSA';

const int NID_mdc2WithRSA = 96;

const int OBJ_mdc2WithRSA = 2;

const String SN_mdc2 = 'MDC2';

const String LN_mdc2 = 'mdc2';

const int NID_mdc2 = 95;

const int OBJ_mdc2 = 2;

const String SN_id_ce = 'id-ce';

const int NID_id_ce = 81;

const int OBJ_id_ce = 2;

const String SN_subject_directory_attributes = 'subjectDirectoryAttributes';

const String LN_subject_directory_attributes =
    'X509v3 Subject Directory Attributes';

const int NID_subject_directory_attributes = 769;

const int OBJ_subject_directory_attributes = 2;

const String SN_subject_key_identifier = 'subjectKeyIdentifier';

const String LN_subject_key_identifier = 'X509v3 Subject Key Identifier';

const int NID_subject_key_identifier = 82;

const int OBJ_subject_key_identifier = 2;

const String SN_key_usage = 'keyUsage';

const String LN_key_usage = 'X509v3 Key Usage';

const int NID_key_usage = 83;

const int OBJ_key_usage = 2;

const String SN_private_key_usage_period = 'privateKeyUsagePeriod';

const String LN_private_key_usage_period = 'X509v3 Private Key Usage Period';

const int NID_private_key_usage_period = 84;

const int OBJ_private_key_usage_period = 2;

const String SN_subject_alt_name = 'subjectAltName';

const String LN_subject_alt_name = 'X509v3 Subject Alternative Name';

const int NID_subject_alt_name = 85;

const int OBJ_subject_alt_name = 2;

const String SN_issuer_alt_name = 'issuerAltName';

const String LN_issuer_alt_name = 'X509v3 Issuer Alternative Name';

const int NID_issuer_alt_name = 86;

const int OBJ_issuer_alt_name = 2;

const String SN_basic_constraints = 'basicConstraints';

const String LN_basic_constraints = 'X509v3 Basic Constraints';

const int NID_basic_constraints = 87;

const int OBJ_basic_constraints = 2;

const String SN_crl_number = 'crlNumber';

const String LN_crl_number = 'X509v3 CRL Number';

const int NID_crl_number = 88;

const int OBJ_crl_number = 2;

const String SN_crl_reason = 'CRLReason';

const String LN_crl_reason = 'X509v3 CRL Reason Code';

const int NID_crl_reason = 141;

const int OBJ_crl_reason = 2;

const String SN_invalidity_date = 'invalidityDate';

const String LN_invalidity_date = 'Invalidity Date';

const int NID_invalidity_date = 142;

const int OBJ_invalidity_date = 2;

const String SN_delta_crl = 'deltaCRL';

const String LN_delta_crl = 'X509v3 Delta CRL Indicator';

const int NID_delta_crl = 140;

const int OBJ_delta_crl = 2;

const String SN_issuing_distribution_point = 'issuingDistributionPoint';

const String LN_issuing_distribution_point =
    'X509v3 Issuing Distribution Point';

const int NID_issuing_distribution_point = 770;

const int OBJ_issuing_distribution_point = 2;

const String SN_certificate_issuer = 'certificateIssuer';

const String LN_certificate_issuer = 'X509v3 Certificate Issuer';

const int NID_certificate_issuer = 771;

const int OBJ_certificate_issuer = 2;

const String SN_name_constraints = 'nameConstraints';

const String LN_name_constraints = 'X509v3 Name Constraints';

const int NID_name_constraints = 666;

const int OBJ_name_constraints = 2;

const String SN_crl_distribution_points = 'crlDistributionPoints';

const String LN_crl_distribution_points = 'X509v3 CRL Distribution Points';

const int NID_crl_distribution_points = 103;

const int OBJ_crl_distribution_points = 2;

const String SN_certificate_policies = 'certificatePolicies';

const String LN_certificate_policies = 'X509v3 Certificate Policies';

const int NID_certificate_policies = 89;

const int OBJ_certificate_policies = 2;

const String SN_any_policy = 'anyPolicy';

const String LN_any_policy = 'X509v3 Any Policy';

const int NID_any_policy = 746;

const int OBJ_any_policy = 2;

const String SN_policy_mappings = 'policyMappings';

const String LN_policy_mappings = 'X509v3 Policy Mappings';

const int NID_policy_mappings = 747;

const int OBJ_policy_mappings = 2;

const String SN_authority_key_identifier = 'authorityKeyIdentifier';

const String LN_authority_key_identifier = 'X509v3 Authority Key Identifier';

const int NID_authority_key_identifier = 90;

const int OBJ_authority_key_identifier = 2;

const String SN_policy_constraints = 'policyConstraints';

const String LN_policy_constraints = 'X509v3 Policy Constraints';

const int NID_policy_constraints = 401;

const int OBJ_policy_constraints = 2;

const String SN_ext_key_usage = 'extendedKeyUsage';

const String LN_ext_key_usage = 'X509v3 Extended Key Usage';

const int NID_ext_key_usage = 126;

const int OBJ_ext_key_usage = 2;

const String SN_freshest_crl = 'freshestCRL';

const String LN_freshest_crl = 'X509v3 Freshest CRL';

const int NID_freshest_crl = 857;

const int OBJ_freshest_crl = 2;

const String SN_inhibit_any_policy = 'inhibitAnyPolicy';

const String LN_inhibit_any_policy = 'X509v3 Inhibit Any Policy';

const int NID_inhibit_any_policy = 748;

const int OBJ_inhibit_any_policy = 2;

const String SN_target_information = 'targetInformation';

const String LN_target_information = 'X509v3 AC Targeting';

const int NID_target_information = 402;

const int OBJ_target_information = 2;

const String SN_no_rev_avail = 'noRevAvail';

const String LN_no_rev_avail = 'X509v3 No Revocation Available';

const int NID_no_rev_avail = 403;

const int OBJ_no_rev_avail = 2;

const String SN_anyExtendedKeyUsage = 'anyExtendedKeyUsage';

const String LN_anyExtendedKeyUsage = 'Any Extended Key Usage';

const int NID_anyExtendedKeyUsage = 910;

const int OBJ_anyExtendedKeyUsage = 2;

const String SN_netscape = 'Netscape';

const String LN_netscape = 'Netscape Communications Corp.';

const int NID_netscape = 57;

const int OBJ_netscape = 2;

const String SN_netscape_cert_extension = 'nsCertExt';

const String LN_netscape_cert_extension = 'Netscape Certificate Extension';

const int NID_netscape_cert_extension = 58;

const int OBJ_netscape_cert_extension = 2;

const String SN_netscape_data_type = 'nsDataType';

const String LN_netscape_data_type = 'Netscape Data Type';

const int NID_netscape_data_type = 59;

const int OBJ_netscape_data_type = 2;

const String SN_netscape_cert_type = 'nsCertType';

const String LN_netscape_cert_type = 'Netscape Cert Type';

const int NID_netscape_cert_type = 71;

const int OBJ_netscape_cert_type = 2;

const String SN_netscape_base_url = 'nsBaseUrl';

const String LN_netscape_base_url = 'Netscape Base Url';

const int NID_netscape_base_url = 72;

const int OBJ_netscape_base_url = 2;

const String SN_netscape_revocation_url = 'nsRevocationUrl';

const String LN_netscape_revocation_url = 'Netscape Revocation Url';

const int NID_netscape_revocation_url = 73;

const int OBJ_netscape_revocation_url = 2;

const String SN_netscape_ca_revocation_url = 'nsCaRevocationUrl';

const String LN_netscape_ca_revocation_url = 'Netscape CA Revocation Url';

const int NID_netscape_ca_revocation_url = 74;

const int OBJ_netscape_ca_revocation_url = 2;

const String SN_netscape_renewal_url = 'nsRenewalUrl';

const String LN_netscape_renewal_url = 'Netscape Renewal Url';

const int NID_netscape_renewal_url = 75;

const int OBJ_netscape_renewal_url = 2;

const String SN_netscape_ca_policy_url = 'nsCaPolicyUrl';

const String LN_netscape_ca_policy_url = 'Netscape CA Policy Url';

const int NID_netscape_ca_policy_url = 76;

const int OBJ_netscape_ca_policy_url = 2;

const String SN_netscape_ssl_server_name = 'nsSslServerName';

const String LN_netscape_ssl_server_name = 'Netscape SSL Server Name';

const int NID_netscape_ssl_server_name = 77;

const int OBJ_netscape_ssl_server_name = 2;

const String SN_netscape_comment = 'nsComment';

const String LN_netscape_comment = 'Netscape Comment';

const int NID_netscape_comment = 78;

const int OBJ_netscape_comment = 2;

const String SN_netscape_cert_sequence = 'nsCertSequence';

const String LN_netscape_cert_sequence = 'Netscape Certificate Sequence';

const int NID_netscape_cert_sequence = 79;

const int OBJ_netscape_cert_sequence = 2;

const String SN_ns_sgc = 'nsSGC';

const String LN_ns_sgc = 'Netscape Server Gated Crypto';

const int NID_ns_sgc = 139;

const int OBJ_ns_sgc = 2;

const String SN_org = 'ORG';

const String LN_org = 'org';

const int NID_org = 379;

const int OBJ_org = 1;

const String SN_dod = 'DOD';

const String LN_dod = 'dod';

const int NID_dod = 380;

const int OBJ_dod = 1;

const String SN_iana = 'IANA';

const String LN_iana = 'iana';

const int NID_iana = 381;

const int OBJ_iana = 1;

const int OBJ_internet = 1;

const String SN_Directory = 'directory';

const String LN_Directory = 'Directory';

const int NID_Directory = 382;

const int OBJ_Directory = 1;

const String SN_Management = 'mgmt';

const String LN_Management = 'Management';

const int NID_Management = 383;

const int OBJ_Management = 1;

const String SN_Experimental = 'experimental';

const String LN_Experimental = 'Experimental';

const int NID_Experimental = 384;

const int OBJ_Experimental = 1;

const String SN_Private = 'private';

const String LN_Private = 'Private';

const int NID_Private = 385;

const int OBJ_Private = 1;

const String SN_Security = 'security';

const String LN_Security = 'Security';

const int NID_Security = 386;

const int OBJ_Security = 1;

const String SN_SNMPv2 = 'snmpv2';

const String LN_SNMPv2 = 'SNMPv2';

const int NID_SNMPv2 = 387;

const int OBJ_SNMPv2 = 1;

const String LN_Mail = 'Mail';

const int NID_Mail = 388;

const int OBJ_Mail = 1;

const String SN_Enterprises = 'enterprises';

const String LN_Enterprises = 'Enterprises';

const int NID_Enterprises = 389;

const int OBJ_Enterprises = 1;

const String SN_dcObject = 'dcobject';

const String LN_dcObject = 'dcObject';

const int NID_dcObject = 390;

const int OBJ_dcObject = 1;

const String SN_mime_mhs = 'mime-mhs';

const String LN_mime_mhs = 'MIME MHS';

const int NID_mime_mhs = 504;

const int OBJ_mime_mhs = 1;

const String SN_mime_mhs_headings = 'mime-mhs-headings';

const String LN_mime_mhs_headings = 'mime-mhs-headings';

const int NID_mime_mhs_headings = 505;

const int OBJ_mime_mhs_headings = 1;

const String SN_mime_mhs_bodies = 'mime-mhs-bodies';

const String LN_mime_mhs_bodies = 'mime-mhs-bodies';

const int NID_mime_mhs_bodies = 506;

const int OBJ_mime_mhs_bodies = 1;

const String SN_id_hex_partial_message = 'id-hex-partial-message';

const String LN_id_hex_partial_message = 'id-hex-partial-message';

const int NID_id_hex_partial_message = 507;

const int OBJ_id_hex_partial_message = 1;

const String SN_id_hex_multipart_message = 'id-hex-multipart-message';

const String LN_id_hex_multipart_message = 'id-hex-multipart-message';

const int NID_id_hex_multipart_message = 508;

const int OBJ_id_hex_multipart_message = 1;

const String SN_zlib_compression = 'ZLIB';

const String LN_zlib_compression = 'zlib compression';

const int NID_zlib_compression = 125;

const int OBJ_zlib_compression = 1;

const int OBJ_csor = 2;

const int OBJ_nistAlgorithms = 2;

const int OBJ_aes = 2;

const String SN_aes_128_ecb = 'AES-128-ECB';

const String LN_aes_128_ecb = 'aes-128-ecb';

const int NID_aes_128_ecb = 418;

const int OBJ_aes_128_ecb = 2;

const String SN_aes_128_cbc = 'AES-128-CBC';

const String LN_aes_128_cbc = 'aes-128-cbc';

const int NID_aes_128_cbc = 419;

const int OBJ_aes_128_cbc = 2;

const String SN_aes_128_ofb128 = 'AES-128-OFB';

const String LN_aes_128_ofb128 = 'aes-128-ofb';

const int NID_aes_128_ofb128 = 420;

const int OBJ_aes_128_ofb128 = 2;

const String SN_aes_128_cfb128 = 'AES-128-CFB';

const String LN_aes_128_cfb128 = 'aes-128-cfb';

const int NID_aes_128_cfb128 = 421;

const int OBJ_aes_128_cfb128 = 2;

const String SN_id_aes128_wrap = 'id-aes128-wrap';

const int NID_id_aes128_wrap = 788;

const int OBJ_id_aes128_wrap = 2;

const String SN_aes_128_gcm = 'id-aes128-GCM';

const String LN_aes_128_gcm = 'aes-128-gcm';

const int NID_aes_128_gcm = 895;

const int OBJ_aes_128_gcm = 2;

const String SN_aes_128_ccm = 'id-aes128-CCM';

const String LN_aes_128_ccm = 'aes-128-ccm';

const int NID_aes_128_ccm = 896;

const int OBJ_aes_128_ccm = 2;

const String SN_id_aes128_wrap_pad = 'id-aes128-wrap-pad';

const int NID_id_aes128_wrap_pad = 897;

const int OBJ_id_aes128_wrap_pad = 2;

const String SN_aes_192_ecb = 'AES-192-ECB';

const String LN_aes_192_ecb = 'aes-192-ecb';

const int NID_aes_192_ecb = 422;

const int OBJ_aes_192_ecb = 2;

const String SN_aes_192_cbc = 'AES-192-CBC';

const String LN_aes_192_cbc = 'aes-192-cbc';

const int NID_aes_192_cbc = 423;

const int OBJ_aes_192_cbc = 2;

const String SN_aes_192_ofb128 = 'AES-192-OFB';

const String LN_aes_192_ofb128 = 'aes-192-ofb';

const int NID_aes_192_ofb128 = 424;

const int OBJ_aes_192_ofb128 = 2;

const String SN_aes_192_cfb128 = 'AES-192-CFB';

const String LN_aes_192_cfb128 = 'aes-192-cfb';

const int NID_aes_192_cfb128 = 425;

const int OBJ_aes_192_cfb128 = 2;

const String SN_id_aes192_wrap = 'id-aes192-wrap';

const int NID_id_aes192_wrap = 789;

const int OBJ_id_aes192_wrap = 2;

const String SN_aes_192_gcm = 'id-aes192-GCM';

const String LN_aes_192_gcm = 'aes-192-gcm';

const int NID_aes_192_gcm = 898;

const int OBJ_aes_192_gcm = 2;

const String SN_aes_192_ccm = 'id-aes192-CCM';

const String LN_aes_192_ccm = 'aes-192-ccm';

const int NID_aes_192_ccm = 899;

const int OBJ_aes_192_ccm = 2;

const String SN_id_aes192_wrap_pad = 'id-aes192-wrap-pad';

const int NID_id_aes192_wrap_pad = 900;

const int OBJ_id_aes192_wrap_pad = 2;

const String SN_aes_256_ecb = 'AES-256-ECB';

const String LN_aes_256_ecb = 'aes-256-ecb';

const int NID_aes_256_ecb = 426;

const int OBJ_aes_256_ecb = 2;

const String SN_aes_256_cbc = 'AES-256-CBC';

const String LN_aes_256_cbc = 'aes-256-cbc';

const int NID_aes_256_cbc = 427;

const int OBJ_aes_256_cbc = 2;

const String SN_aes_256_ofb128 = 'AES-256-OFB';

const String LN_aes_256_ofb128 = 'aes-256-ofb';

const int NID_aes_256_ofb128 = 428;

const int OBJ_aes_256_ofb128 = 2;

const String SN_aes_256_cfb128 = 'AES-256-CFB';

const String LN_aes_256_cfb128 = 'aes-256-cfb';

const int NID_aes_256_cfb128 = 429;

const int OBJ_aes_256_cfb128 = 2;

const String SN_id_aes256_wrap = 'id-aes256-wrap';

const int NID_id_aes256_wrap = 790;

const int OBJ_id_aes256_wrap = 2;

const String SN_aes_256_gcm = 'id-aes256-GCM';

const String LN_aes_256_gcm = 'aes-256-gcm';

const int NID_aes_256_gcm = 901;

const int OBJ_aes_256_gcm = 2;

const String SN_aes_256_ccm = 'id-aes256-CCM';

const String LN_aes_256_ccm = 'aes-256-ccm';

const int NID_aes_256_ccm = 902;

const int OBJ_aes_256_ccm = 2;

const String SN_id_aes256_wrap_pad = 'id-aes256-wrap-pad';

const int NID_id_aes256_wrap_pad = 903;

const int OBJ_id_aes256_wrap_pad = 2;

const String SN_aes_128_xts = 'AES-128-XTS';

const String LN_aes_128_xts = 'aes-128-xts';

const int NID_aes_128_xts = 913;

const int OBJ_aes_128_xts = 1;

const String SN_aes_256_xts = 'AES-256-XTS';

const String LN_aes_256_xts = 'aes-256-xts';

const int NID_aes_256_xts = 914;

const int OBJ_aes_256_xts = 1;

const String SN_aes_128_cfb1 = 'AES-128-CFB1';

const String LN_aes_128_cfb1 = 'aes-128-cfb1';

const int NID_aes_128_cfb1 = 650;

const String SN_aes_192_cfb1 = 'AES-192-CFB1';

const String LN_aes_192_cfb1 = 'aes-192-cfb1';

const int NID_aes_192_cfb1 = 651;

const String SN_aes_256_cfb1 = 'AES-256-CFB1';

const String LN_aes_256_cfb1 = 'aes-256-cfb1';

const int NID_aes_256_cfb1 = 652;

const String SN_aes_128_cfb8 = 'AES-128-CFB8';

const String LN_aes_128_cfb8 = 'aes-128-cfb8';

const int NID_aes_128_cfb8 = 653;

const String SN_aes_192_cfb8 = 'AES-192-CFB8';

const String LN_aes_192_cfb8 = 'aes-192-cfb8';

const int NID_aes_192_cfb8 = 654;

const String SN_aes_256_cfb8 = 'AES-256-CFB8';

const String LN_aes_256_cfb8 = 'aes-256-cfb8';

const int NID_aes_256_cfb8 = 655;

const String SN_aes_128_ctr = 'AES-128-CTR';

const String LN_aes_128_ctr = 'aes-128-ctr';

const int NID_aes_128_ctr = 904;

const String SN_aes_192_ctr = 'AES-192-CTR';

const String LN_aes_192_ctr = 'aes-192-ctr';

const int NID_aes_192_ctr = 905;

const String SN_aes_256_ctr = 'AES-256-CTR';

const String LN_aes_256_ctr = 'aes-256-ctr';

const int NID_aes_256_ctr = 906;

const String SN_aes_128_ocb = 'AES-128-OCB';

const String LN_aes_128_ocb = 'aes-128-ocb';

const int NID_aes_128_ocb = 958;

const String SN_aes_192_ocb = 'AES-192-OCB';

const String LN_aes_192_ocb = 'aes-192-ocb';

const int NID_aes_192_ocb = 959;

const String SN_aes_256_ocb = 'AES-256-OCB';

const String LN_aes_256_ocb = 'aes-256-ocb';

const int NID_aes_256_ocb = 960;

const String SN_des_cfb1 = 'DES-CFB1';

const String LN_des_cfb1 = 'des-cfb1';

const int NID_des_cfb1 = 656;

const String SN_des_cfb8 = 'DES-CFB8';

const String LN_des_cfb8 = 'des-cfb8';

const int NID_des_cfb8 = 657;

const String SN_des_ede3_cfb1 = 'DES-EDE3-CFB1';

const String LN_des_ede3_cfb1 = 'des-ede3-cfb1';

const int NID_des_ede3_cfb1 = 658;

const String SN_des_ede3_cfb8 = 'DES-EDE3-CFB8';

const String LN_des_ede3_cfb8 = 'des-ede3-cfb8';

const int NID_des_ede3_cfb8 = 659;

const int OBJ_nist_hashalgs = 2;

const String SN_sha256 = 'SHA256';

const String LN_sha256 = 'sha256';

const int NID_sha256 = 672;

const int OBJ_sha256 = 2;

const String SN_sha384 = 'SHA384';

const String LN_sha384 = 'sha384';

const int NID_sha384 = 673;

const int OBJ_sha384 = 2;

const String SN_sha512 = 'SHA512';

const String LN_sha512 = 'sha512';

const int NID_sha512 = 674;

const int OBJ_sha512 = 2;

const String SN_sha224 = 'SHA224';

const String LN_sha224 = 'sha224';

const int NID_sha224 = 675;

const int OBJ_sha224 = 2;

const String SN_sha512_224 = 'SHA512-224';

const String LN_sha512_224 = 'sha512-224';

const int NID_sha512_224 = 1094;

const int OBJ_sha512_224 = 2;

const String SN_sha512_256 = 'SHA512-256';

const String LN_sha512_256 = 'sha512-256';

const int NID_sha512_256 = 1095;

const int OBJ_sha512_256 = 2;

const String SN_sha3_224 = 'SHA3-224';

const String LN_sha3_224 = 'sha3-224';

const int NID_sha3_224 = 1096;

const int OBJ_sha3_224 = 2;

const String SN_sha3_256 = 'SHA3-256';

const String LN_sha3_256 = 'sha3-256';

const int NID_sha3_256 = 1097;

const int OBJ_sha3_256 = 2;

const String SN_sha3_384 = 'SHA3-384';

const String LN_sha3_384 = 'sha3-384';

const int NID_sha3_384 = 1098;

const int OBJ_sha3_384 = 2;

const String SN_sha3_512 = 'SHA3-512';

const String LN_sha3_512 = 'sha3-512';

const int NID_sha3_512 = 1099;

const int OBJ_sha3_512 = 2;

const String SN_shake128 = 'SHAKE128';

const String LN_shake128 = 'shake128';

const int NID_shake128 = 1100;

const int OBJ_shake128 = 2;

const String SN_shake256 = 'SHAKE256';

const String LN_shake256 = 'shake256';

const int NID_shake256 = 1101;

const int OBJ_shake256 = 2;

const String SN_hmac_sha3_224 = 'id-hmacWithSHA3-224';

const String LN_hmac_sha3_224 = 'hmac-sha3-224';

const int NID_hmac_sha3_224 = 1102;

const int OBJ_hmac_sha3_224 = 2;

const String SN_hmac_sha3_256 = 'id-hmacWithSHA3-256';

const String LN_hmac_sha3_256 = 'hmac-sha3-256';

const int NID_hmac_sha3_256 = 1103;

const int OBJ_hmac_sha3_256 = 2;

const String SN_hmac_sha3_384 = 'id-hmacWithSHA3-384';

const String LN_hmac_sha3_384 = 'hmac-sha3-384';

const int NID_hmac_sha3_384 = 1104;

const int OBJ_hmac_sha3_384 = 2;

const String SN_hmac_sha3_512 = 'id-hmacWithSHA3-512';

const String LN_hmac_sha3_512 = 'hmac-sha3-512';

const int NID_hmac_sha3_512 = 1105;

const int OBJ_hmac_sha3_512 = 2;

const int OBJ_dsa_with_sha2 = 2;

const String SN_dsa_with_SHA224 = 'dsa_with_SHA224';

const int NID_dsa_with_SHA224 = 802;

const int OBJ_dsa_with_SHA224 = 2;

const String SN_dsa_with_SHA256 = 'dsa_with_SHA256';

const int NID_dsa_with_SHA256 = 803;

const int OBJ_dsa_with_SHA256 = 2;

const int OBJ_sigAlgs = 2;

const String SN_dsa_with_SHA384 = 'id-dsa-with-sha384';

const String LN_dsa_with_SHA384 = 'dsa_with_SHA384';

const int NID_dsa_with_SHA384 = 1106;

const int OBJ_dsa_with_SHA384 = 2;

const String SN_dsa_with_SHA512 = 'id-dsa-with-sha512';

const String LN_dsa_with_SHA512 = 'dsa_with_SHA512';

const int NID_dsa_with_SHA512 = 1107;

const int OBJ_dsa_with_SHA512 = 2;

const String SN_dsa_with_SHA3_224 = 'id-dsa-with-sha3-224';

const String LN_dsa_with_SHA3_224 = 'dsa_with_SHA3-224';

const int NID_dsa_with_SHA3_224 = 1108;

const int OBJ_dsa_with_SHA3_224 = 2;

const String SN_dsa_with_SHA3_256 = 'id-dsa-with-sha3-256';

const String LN_dsa_with_SHA3_256 = 'dsa_with_SHA3-256';

const int NID_dsa_with_SHA3_256 = 1109;

const int OBJ_dsa_with_SHA3_256 = 2;

const String SN_dsa_with_SHA3_384 = 'id-dsa-with-sha3-384';

const String LN_dsa_with_SHA3_384 = 'dsa_with_SHA3-384';

const int NID_dsa_with_SHA3_384 = 1110;

const int OBJ_dsa_with_SHA3_384 = 2;

const String SN_dsa_with_SHA3_512 = 'id-dsa-with-sha3-512';

const String LN_dsa_with_SHA3_512 = 'dsa_with_SHA3-512';

const int NID_dsa_with_SHA3_512 = 1111;

const int OBJ_dsa_with_SHA3_512 = 2;

const String SN_ecdsa_with_SHA3_224 = 'id-ecdsa-with-sha3-224';

const String LN_ecdsa_with_SHA3_224 = 'ecdsa_with_SHA3-224';

const int NID_ecdsa_with_SHA3_224 = 1112;

const int OBJ_ecdsa_with_SHA3_224 = 2;

const String SN_ecdsa_with_SHA3_256 = 'id-ecdsa-with-sha3-256';

const String LN_ecdsa_with_SHA3_256 = 'ecdsa_with_SHA3-256';

const int NID_ecdsa_with_SHA3_256 = 1113;

const int OBJ_ecdsa_with_SHA3_256 = 2;

const String SN_ecdsa_with_SHA3_384 = 'id-ecdsa-with-sha3-384';

const String LN_ecdsa_with_SHA3_384 = 'ecdsa_with_SHA3-384';

const int NID_ecdsa_with_SHA3_384 = 1114;

const int OBJ_ecdsa_with_SHA3_384 = 2;

const String SN_ecdsa_with_SHA3_512 = 'id-ecdsa-with-sha3-512';

const String LN_ecdsa_with_SHA3_512 = 'ecdsa_with_SHA3-512';

const int NID_ecdsa_with_SHA3_512 = 1115;

const int OBJ_ecdsa_with_SHA3_512 = 2;

const String SN_RSA_SHA3_224 = 'id-rsassa-pkcs1-v1_5-with-sha3-224';

const String LN_RSA_SHA3_224 = 'RSA-SHA3-224';

const int NID_RSA_SHA3_224 = 1116;

const int OBJ_RSA_SHA3_224 = 2;

const String SN_RSA_SHA3_256 = 'id-rsassa-pkcs1-v1_5-with-sha3-256';

const String LN_RSA_SHA3_256 = 'RSA-SHA3-256';

const int NID_RSA_SHA3_256 = 1117;

const int OBJ_RSA_SHA3_256 = 2;

const String SN_RSA_SHA3_384 = 'id-rsassa-pkcs1-v1_5-with-sha3-384';

const String LN_RSA_SHA3_384 = 'RSA-SHA3-384';

const int NID_RSA_SHA3_384 = 1118;

const int OBJ_RSA_SHA3_384 = 2;

const String SN_RSA_SHA3_512 = 'id-rsassa-pkcs1-v1_5-with-sha3-512';

const String LN_RSA_SHA3_512 = 'RSA-SHA3-512';

const int NID_RSA_SHA3_512 = 1119;

const int OBJ_RSA_SHA3_512 = 2;

const String SN_hold_instruction_code = 'holdInstructionCode';

const String LN_hold_instruction_code = 'Hold Instruction Code';

const int NID_hold_instruction_code = 430;

const int OBJ_hold_instruction_code = 2;

const int OBJ_holdInstruction = 1;

const String SN_hold_instruction_none = 'holdInstructionNone';

const String LN_hold_instruction_none = 'Hold Instruction None';

const int NID_hold_instruction_none = 431;

const int OBJ_hold_instruction_none = 1;

const String SN_hold_instruction_call_issuer = 'holdInstructionCallIssuer';

const String LN_hold_instruction_call_issuer = 'Hold Instruction Call Issuer';

const int NID_hold_instruction_call_issuer = 432;

const int OBJ_hold_instruction_call_issuer = 1;

const String SN_hold_instruction_reject = 'holdInstructionReject';

const String LN_hold_instruction_reject = 'Hold Instruction Reject';

const int NID_hold_instruction_reject = 433;

const int OBJ_hold_instruction_reject = 1;

const String SN_data = 'data';

const int NID_data = 434;

const int OBJ_data = 0;

const String SN_pss = 'pss';

const int NID_pss = 435;

const int OBJ_pss = 0;

const String SN_ucl = 'ucl';

const int NID_ucl = 436;

const int OBJ_ucl = 0;

const String SN_pilot = 'pilot';

const int NID_pilot = 437;

const int OBJ_pilot = 0;

const String LN_pilotAttributeType = 'pilotAttributeType';

const int NID_pilotAttributeType = 438;

const int OBJ_pilotAttributeType = 0;

const String LN_pilotAttributeSyntax = 'pilotAttributeSyntax';

const int NID_pilotAttributeSyntax = 439;

const int OBJ_pilotAttributeSyntax = 0;

const String LN_pilotObjectClass = 'pilotObjectClass';

const int NID_pilotObjectClass = 440;

const int OBJ_pilotObjectClass = 0;

const String LN_pilotGroups = 'pilotGroups';

const int NID_pilotGroups = 441;

const int OBJ_pilotGroups = 0;

const String LN_iA5StringSyntax = 'iA5StringSyntax';

const int NID_iA5StringSyntax = 442;

const int OBJ_iA5StringSyntax = 0;

const String LN_caseIgnoreIA5StringSyntax = 'caseIgnoreIA5StringSyntax';

const int NID_caseIgnoreIA5StringSyntax = 443;

const int OBJ_caseIgnoreIA5StringSyntax = 0;

const String LN_pilotObject = 'pilotObject';

const int NID_pilotObject = 444;

const int OBJ_pilotObject = 0;

const String LN_pilotPerson = 'pilotPerson';

const int NID_pilotPerson = 445;

const int OBJ_pilotPerson = 0;

const String SN_account = 'account';

const int NID_account = 446;

const int OBJ_account = 0;

const String SN_document = 'document';

const int NID_document = 447;

const int OBJ_document = 0;

const String SN_room = 'room';

const int NID_room = 448;

const int OBJ_room = 0;

const String LN_documentSeries = 'documentSeries';

const int NID_documentSeries = 449;

const int OBJ_documentSeries = 0;

const String SN_Domain = 'domain';

const String LN_Domain = 'Domain';

const int NID_Domain = 392;

const int OBJ_Domain = 0;

const String LN_rFC822localPart = 'rFC822localPart';

const int NID_rFC822localPart = 450;

const int OBJ_rFC822localPart = 0;

const String LN_dNSDomain = 'dNSDomain';

const int NID_dNSDomain = 451;

const int OBJ_dNSDomain = 0;

const String LN_domainRelatedObject = 'domainRelatedObject';

const int NID_domainRelatedObject = 452;

const int OBJ_domainRelatedObject = 0;

const String LN_friendlyCountry = 'friendlyCountry';

const int NID_friendlyCountry = 453;

const int OBJ_friendlyCountry = 0;

const String LN_simpleSecurityObject = 'simpleSecurityObject';

const int NID_simpleSecurityObject = 454;

const int OBJ_simpleSecurityObject = 0;

const String LN_pilotOrganization = 'pilotOrganization';

const int NID_pilotOrganization = 455;

const int OBJ_pilotOrganization = 0;

const String LN_pilotDSA = 'pilotDSA';

const int NID_pilotDSA = 456;

const int OBJ_pilotDSA = 0;

const String LN_qualityLabelledData = 'qualityLabelledData';

const int NID_qualityLabelledData = 457;

const int OBJ_qualityLabelledData = 0;

const String SN_userId = 'UID';

const String LN_userId = 'userId';

const int NID_userId = 458;

const int OBJ_userId = 0;

const String LN_textEncodedORAddress = 'textEncodedORAddress';

const int NID_textEncodedORAddress = 459;

const int OBJ_textEncodedORAddress = 0;

const String SN_rfc822Mailbox = 'mail';

const String LN_rfc822Mailbox = 'rfc822Mailbox';

const int NID_rfc822Mailbox = 460;

const int OBJ_rfc822Mailbox = 0;

const String SN_info = 'info';

const int NID_info = 461;

const int OBJ_info = 0;

const String LN_favouriteDrink = 'favouriteDrink';

const int NID_favouriteDrink = 462;

const int OBJ_favouriteDrink = 0;

const String LN_roomNumber = 'roomNumber';

const int NID_roomNumber = 463;

const int OBJ_roomNumber = 0;

const String SN_photo = 'photo';

const int NID_photo = 464;

const int OBJ_photo = 0;

const String LN_userClass = 'userClass';

const int NID_userClass = 465;

const int OBJ_userClass = 0;

const String SN_host = 'host';

const int NID_host = 466;

const int OBJ_host = 0;

const String SN_manager = 'manager';

const int NID_manager = 467;

const int OBJ_manager = 0;

const String LN_documentIdentifier = 'documentIdentifier';

const int NID_documentIdentifier = 468;

const int OBJ_documentIdentifier = 0;

const String LN_documentTitle = 'documentTitle';

const int NID_documentTitle = 469;

const int OBJ_documentTitle = 0;

const String LN_documentVersion = 'documentVersion';

const int NID_documentVersion = 470;

const int OBJ_documentVersion = 0;

const String LN_documentAuthor = 'documentAuthor';

const int NID_documentAuthor = 471;

const int OBJ_documentAuthor = 0;

const String LN_documentLocation = 'documentLocation';

const int NID_documentLocation = 472;

const int OBJ_documentLocation = 0;

const String LN_homeTelephoneNumber = 'homeTelephoneNumber';

const int NID_homeTelephoneNumber = 473;

const int OBJ_homeTelephoneNumber = 0;

const String SN_secretary = 'secretary';

const int NID_secretary = 474;

const int OBJ_secretary = 0;

const String LN_otherMailbox = 'otherMailbox';

const int NID_otherMailbox = 475;

const int OBJ_otherMailbox = 0;

const String LN_lastModifiedTime = 'lastModifiedTime';

const int NID_lastModifiedTime = 476;

const int OBJ_lastModifiedTime = 0;

const String LN_lastModifiedBy = 'lastModifiedBy';

const int NID_lastModifiedBy = 477;

const int OBJ_lastModifiedBy = 0;

const String SN_domainComponent = 'DC';

const String LN_domainComponent = 'domainComponent';

const int NID_domainComponent = 391;

const int OBJ_domainComponent = 0;

const String LN_aRecord = 'aRecord';

const int NID_aRecord = 478;

const int OBJ_aRecord = 0;

const String LN_pilotAttributeType27 = 'pilotAttributeType27';

const int NID_pilotAttributeType27 = 479;

const int OBJ_pilotAttributeType27 = 0;

const String LN_mXRecord = 'mXRecord';

const int NID_mXRecord = 480;

const int OBJ_mXRecord = 0;

const String LN_nSRecord = 'nSRecord';

const int NID_nSRecord = 481;

const int OBJ_nSRecord = 0;

const String LN_sOARecord = 'sOARecord';

const int NID_sOARecord = 482;

const int OBJ_sOARecord = 0;

const String LN_cNAMERecord = 'cNAMERecord';

const int NID_cNAMERecord = 483;

const int OBJ_cNAMERecord = 0;

const String LN_associatedDomain = 'associatedDomain';

const int NID_associatedDomain = 484;

const int OBJ_associatedDomain = 0;

const String LN_associatedName = 'associatedName';

const int NID_associatedName = 485;

const int OBJ_associatedName = 0;

const String LN_homePostalAddress = 'homePostalAddress';

const int NID_homePostalAddress = 486;

const int OBJ_homePostalAddress = 0;

const String LN_personalTitle = 'personalTitle';

const int NID_personalTitle = 487;

const int OBJ_personalTitle = 0;

const String LN_mobileTelephoneNumber = 'mobileTelephoneNumber';

const int NID_mobileTelephoneNumber = 488;

const int OBJ_mobileTelephoneNumber = 0;

const String LN_pagerTelephoneNumber = 'pagerTelephoneNumber';

const int NID_pagerTelephoneNumber = 489;

const int OBJ_pagerTelephoneNumber = 0;

const String LN_friendlyCountryName = 'friendlyCountryName';

const int NID_friendlyCountryName = 490;

const int OBJ_friendlyCountryName = 0;

const String SN_uniqueIdentifier = 'uid';

const String LN_uniqueIdentifier = 'uniqueIdentifier';

const int NID_uniqueIdentifier = 102;

const int OBJ_uniqueIdentifier = 0;

const String LN_organizationalStatus = 'organizationalStatus';

const int NID_organizationalStatus = 491;

const int OBJ_organizationalStatus = 0;

const String LN_janetMailbox = 'janetMailbox';

const int NID_janetMailbox = 492;

const int OBJ_janetMailbox = 0;

const String LN_mailPreferenceOption = 'mailPreferenceOption';

const int NID_mailPreferenceOption = 493;

const int OBJ_mailPreferenceOption = 0;

const String LN_buildingName = 'buildingName';

const int NID_buildingName = 494;

const int OBJ_buildingName = 0;

const String LN_dSAQuality = 'dSAQuality';

const int NID_dSAQuality = 495;

const int OBJ_dSAQuality = 0;

const String LN_singleLevelQuality = 'singleLevelQuality';

const int NID_singleLevelQuality = 496;

const int OBJ_singleLevelQuality = 0;

const String LN_subtreeMinimumQuality = 'subtreeMinimumQuality';

const int NID_subtreeMinimumQuality = 497;

const int OBJ_subtreeMinimumQuality = 0;

const String LN_subtreeMaximumQuality = 'subtreeMaximumQuality';

const int NID_subtreeMaximumQuality = 498;

const int OBJ_subtreeMaximumQuality = 0;

const String LN_personalSignature = 'personalSignature';

const int NID_personalSignature = 499;

const int OBJ_personalSignature = 0;

const String LN_dITRedirect = 'dITRedirect';

const int NID_dITRedirect = 500;

const int OBJ_dITRedirect = 0;

const String SN_audio = 'audio';

const int NID_audio = 501;

const int OBJ_audio = 0;

const String LN_documentPublisher = 'documentPublisher';

const int NID_documentPublisher = 502;

const int OBJ_documentPublisher = 0;

const String SN_id_set = 'id-set';

const String LN_id_set = 'Secure Electronic Transactions';

const int NID_id_set = 512;

const int OBJ_id_set = 2;

const String SN_set_ctype = 'set-ctype';

const String LN_set_ctype = 'content types';

const int NID_set_ctype = 513;

const int OBJ_set_ctype = 2;

const String SN_set_msgExt = 'set-msgExt';

const String LN_set_msgExt = 'message extensions';

const int NID_set_msgExt = 514;

const int OBJ_set_msgExt = 2;

const String SN_set_attr = 'set-attr';

const int NID_set_attr = 515;

const int OBJ_set_attr = 2;

const String SN_set_policy = 'set-policy';

const int NID_set_policy = 516;

const int OBJ_set_policy = 2;

const String SN_set_certExt = 'set-certExt';

const String LN_set_certExt = 'certificate extensions';

const int NID_set_certExt = 517;

const int OBJ_set_certExt = 2;

const String SN_set_brand = 'set-brand';

const int NID_set_brand = 518;

const int OBJ_set_brand = 2;

const String SN_setct_PANData = 'setct-PANData';

const int NID_setct_PANData = 519;

const int OBJ_setct_PANData = 2;

const String SN_setct_PANToken = 'setct-PANToken';

const int NID_setct_PANToken = 520;

const int OBJ_setct_PANToken = 2;

const String SN_setct_PANOnly = 'setct-PANOnly';

const int NID_setct_PANOnly = 521;

const int OBJ_setct_PANOnly = 2;

const String SN_setct_OIData = 'setct-OIData';

const int NID_setct_OIData = 522;

const int OBJ_setct_OIData = 2;

const String SN_setct_PI = 'setct-PI';

const int NID_setct_PI = 523;

const int OBJ_setct_PI = 2;

const String SN_setct_PIData = 'setct-PIData';

const int NID_setct_PIData = 524;

const int OBJ_setct_PIData = 2;

const String SN_setct_PIDataUnsigned = 'setct-PIDataUnsigned';

const int NID_setct_PIDataUnsigned = 525;

const int OBJ_setct_PIDataUnsigned = 2;

const String SN_setct_HODInput = 'setct-HODInput';

const int NID_setct_HODInput = 526;

const int OBJ_setct_HODInput = 2;

const String SN_setct_AuthResBaggage = 'setct-AuthResBaggage';

const int NID_setct_AuthResBaggage = 527;

const int OBJ_setct_AuthResBaggage = 2;

const String SN_setct_AuthRevReqBaggage = 'setct-AuthRevReqBaggage';

const int NID_setct_AuthRevReqBaggage = 528;

const int OBJ_setct_AuthRevReqBaggage = 2;

const String SN_setct_AuthRevResBaggage = 'setct-AuthRevResBaggage';

const int NID_setct_AuthRevResBaggage = 529;

const int OBJ_setct_AuthRevResBaggage = 2;

const String SN_setct_CapTokenSeq = 'setct-CapTokenSeq';

const int NID_setct_CapTokenSeq = 530;

const int OBJ_setct_CapTokenSeq = 2;

const String SN_setct_PInitResData = 'setct-PInitResData';

const int NID_setct_PInitResData = 531;

const int OBJ_setct_PInitResData = 2;

const String SN_setct_PI_TBS = 'setct-PI-TBS';

const int NID_setct_PI_TBS = 532;

const int OBJ_setct_PI_TBS = 2;

const String SN_setct_PResData = 'setct-PResData';

const int NID_setct_PResData = 533;

const int OBJ_setct_PResData = 2;

const String SN_setct_AuthReqTBS = 'setct-AuthReqTBS';

const int NID_setct_AuthReqTBS = 534;

const int OBJ_setct_AuthReqTBS = 2;

const String SN_setct_AuthResTBS = 'setct-AuthResTBS';

const int NID_setct_AuthResTBS = 535;

const int OBJ_setct_AuthResTBS = 2;

const String SN_setct_AuthResTBSX = 'setct-AuthResTBSX';

const int NID_setct_AuthResTBSX = 536;

const int OBJ_setct_AuthResTBSX = 2;

const String SN_setct_AuthTokenTBS = 'setct-AuthTokenTBS';

const int NID_setct_AuthTokenTBS = 537;

const int OBJ_setct_AuthTokenTBS = 2;

const String SN_setct_CapTokenData = 'setct-CapTokenData';

const int NID_setct_CapTokenData = 538;

const int OBJ_setct_CapTokenData = 2;

const String SN_setct_CapTokenTBS = 'setct-CapTokenTBS';

const int NID_setct_CapTokenTBS = 539;

const int OBJ_setct_CapTokenTBS = 2;

const String SN_setct_AcqCardCodeMsg = 'setct-AcqCardCodeMsg';

const int NID_setct_AcqCardCodeMsg = 540;

const int OBJ_setct_AcqCardCodeMsg = 2;

const String SN_setct_AuthRevReqTBS = 'setct-AuthRevReqTBS';

const int NID_setct_AuthRevReqTBS = 541;

const int OBJ_setct_AuthRevReqTBS = 2;

const String SN_setct_AuthRevResData = 'setct-AuthRevResData';

const int NID_setct_AuthRevResData = 542;

const int OBJ_setct_AuthRevResData = 2;

const String SN_setct_AuthRevResTBS = 'setct-AuthRevResTBS';

const int NID_setct_AuthRevResTBS = 543;

const int OBJ_setct_AuthRevResTBS = 2;

const String SN_setct_CapReqTBS = 'setct-CapReqTBS';

const int NID_setct_CapReqTBS = 544;

const int OBJ_setct_CapReqTBS = 2;

const String SN_setct_CapReqTBSX = 'setct-CapReqTBSX';

const int NID_setct_CapReqTBSX = 545;

const int OBJ_setct_CapReqTBSX = 2;

const String SN_setct_CapResData = 'setct-CapResData';

const int NID_setct_CapResData = 546;

const int OBJ_setct_CapResData = 2;

const String SN_setct_CapRevReqTBS = 'setct-CapRevReqTBS';

const int NID_setct_CapRevReqTBS = 547;

const int OBJ_setct_CapRevReqTBS = 2;

const String SN_setct_CapRevReqTBSX = 'setct-CapRevReqTBSX';

const int NID_setct_CapRevReqTBSX = 548;

const int OBJ_setct_CapRevReqTBSX = 2;

const String SN_setct_CapRevResData = 'setct-CapRevResData';

const int NID_setct_CapRevResData = 549;

const int OBJ_setct_CapRevResData = 2;

const String SN_setct_CredReqTBS = 'setct-CredReqTBS';

const int NID_setct_CredReqTBS = 550;

const int OBJ_setct_CredReqTBS = 2;

const String SN_setct_CredReqTBSX = 'setct-CredReqTBSX';

const int NID_setct_CredReqTBSX = 551;

const int OBJ_setct_CredReqTBSX = 2;

const String SN_setct_CredResData = 'setct-CredResData';

const int NID_setct_CredResData = 552;

const int OBJ_setct_CredResData = 2;

const String SN_setct_CredRevReqTBS = 'setct-CredRevReqTBS';

const int NID_setct_CredRevReqTBS = 553;

const int OBJ_setct_CredRevReqTBS = 2;

const String SN_setct_CredRevReqTBSX = 'setct-CredRevReqTBSX';

const int NID_setct_CredRevReqTBSX = 554;

const int OBJ_setct_CredRevReqTBSX = 2;

const String SN_setct_CredRevResData = 'setct-CredRevResData';

const int NID_setct_CredRevResData = 555;

const int OBJ_setct_CredRevResData = 2;

const String SN_setct_PCertReqData = 'setct-PCertReqData';

const int NID_setct_PCertReqData = 556;

const int OBJ_setct_PCertReqData = 2;

const String SN_setct_PCertResTBS = 'setct-PCertResTBS';

const int NID_setct_PCertResTBS = 557;

const int OBJ_setct_PCertResTBS = 2;

const String SN_setct_BatchAdminReqData = 'setct-BatchAdminReqData';

const int NID_setct_BatchAdminReqData = 558;

const int OBJ_setct_BatchAdminReqData = 2;

const String SN_setct_BatchAdminResData = 'setct-BatchAdminResData';

const int NID_setct_BatchAdminResData = 559;

const int OBJ_setct_BatchAdminResData = 2;

const String SN_setct_CardCInitResTBS = 'setct-CardCInitResTBS';

const int NID_setct_CardCInitResTBS = 560;

const int OBJ_setct_CardCInitResTBS = 2;

const String SN_setct_MeAqCInitResTBS = 'setct-MeAqCInitResTBS';

const int NID_setct_MeAqCInitResTBS = 561;

const int OBJ_setct_MeAqCInitResTBS = 2;

const String SN_setct_RegFormResTBS = 'setct-RegFormResTBS';

const int NID_setct_RegFormResTBS = 562;

const int OBJ_setct_RegFormResTBS = 2;

const String SN_setct_CertReqData = 'setct-CertReqData';

const int NID_setct_CertReqData = 563;

const int OBJ_setct_CertReqData = 2;

const String SN_setct_CertReqTBS = 'setct-CertReqTBS';

const int NID_setct_CertReqTBS = 564;

const int OBJ_setct_CertReqTBS = 2;

const String SN_setct_CertResData = 'setct-CertResData';

const int NID_setct_CertResData = 565;

const int OBJ_setct_CertResData = 2;

const String SN_setct_CertInqReqTBS = 'setct-CertInqReqTBS';

const int NID_setct_CertInqReqTBS = 566;

const int OBJ_setct_CertInqReqTBS = 2;

const String SN_setct_ErrorTBS = 'setct-ErrorTBS';

const int NID_setct_ErrorTBS = 567;

const int OBJ_setct_ErrorTBS = 2;

const String SN_setct_PIDualSignedTBE = 'setct-PIDualSignedTBE';

const int NID_setct_PIDualSignedTBE = 568;

const int OBJ_setct_PIDualSignedTBE = 2;

const String SN_setct_PIUnsignedTBE = 'setct-PIUnsignedTBE';

const int NID_setct_PIUnsignedTBE = 569;

const int OBJ_setct_PIUnsignedTBE = 2;

const String SN_setct_AuthReqTBE = 'setct-AuthReqTBE';

const int NID_setct_AuthReqTBE = 570;

const int OBJ_setct_AuthReqTBE = 2;

const String SN_setct_AuthResTBE = 'setct-AuthResTBE';

const int NID_setct_AuthResTBE = 571;

const int OBJ_setct_AuthResTBE = 2;

const String SN_setct_AuthResTBEX = 'setct-AuthResTBEX';

const int NID_setct_AuthResTBEX = 572;

const int OBJ_setct_AuthResTBEX = 2;

const String SN_setct_AuthTokenTBE = 'setct-AuthTokenTBE';

const int NID_setct_AuthTokenTBE = 573;

const int OBJ_setct_AuthTokenTBE = 2;

const String SN_setct_CapTokenTBE = 'setct-CapTokenTBE';

const int NID_setct_CapTokenTBE = 574;

const int OBJ_setct_CapTokenTBE = 2;

const String SN_setct_CapTokenTBEX = 'setct-CapTokenTBEX';

const int NID_setct_CapTokenTBEX = 575;

const int OBJ_setct_CapTokenTBEX = 2;

const String SN_setct_AcqCardCodeMsgTBE = 'setct-AcqCardCodeMsgTBE';

const int NID_setct_AcqCardCodeMsgTBE = 576;

const int OBJ_setct_AcqCardCodeMsgTBE = 2;

const String SN_setct_AuthRevReqTBE = 'setct-AuthRevReqTBE';

const int NID_setct_AuthRevReqTBE = 577;

const int OBJ_setct_AuthRevReqTBE = 2;

const String SN_setct_AuthRevResTBE = 'setct-AuthRevResTBE';

const int NID_setct_AuthRevResTBE = 578;

const int OBJ_setct_AuthRevResTBE = 2;

const String SN_setct_AuthRevResTBEB = 'setct-AuthRevResTBEB';

const int NID_setct_AuthRevResTBEB = 579;

const int OBJ_setct_AuthRevResTBEB = 2;

const String SN_setct_CapReqTBE = 'setct-CapReqTBE';

const int NID_setct_CapReqTBE = 580;

const int OBJ_setct_CapReqTBE = 2;

const String SN_setct_CapReqTBEX = 'setct-CapReqTBEX';

const int NID_setct_CapReqTBEX = 581;

const int OBJ_setct_CapReqTBEX = 2;

const String SN_setct_CapResTBE = 'setct-CapResTBE';

const int NID_setct_CapResTBE = 582;

const int OBJ_setct_CapResTBE = 2;

const String SN_setct_CapRevReqTBE = 'setct-CapRevReqTBE';

const int NID_setct_CapRevReqTBE = 583;

const int OBJ_setct_CapRevReqTBE = 2;

const String SN_setct_CapRevReqTBEX = 'setct-CapRevReqTBEX';

const int NID_setct_CapRevReqTBEX = 584;

const int OBJ_setct_CapRevReqTBEX = 2;

const String SN_setct_CapRevResTBE = 'setct-CapRevResTBE';

const int NID_setct_CapRevResTBE = 585;

const int OBJ_setct_CapRevResTBE = 2;

const String SN_setct_CredReqTBE = 'setct-CredReqTBE';

const int NID_setct_CredReqTBE = 586;

const int OBJ_setct_CredReqTBE = 2;

const String SN_setct_CredReqTBEX = 'setct-CredReqTBEX';

const int NID_setct_CredReqTBEX = 587;

const int OBJ_setct_CredReqTBEX = 2;

const String SN_setct_CredResTBE = 'setct-CredResTBE';

const int NID_setct_CredResTBE = 588;

const int OBJ_setct_CredResTBE = 2;

const String SN_setct_CredRevReqTBE = 'setct-CredRevReqTBE';

const int NID_setct_CredRevReqTBE = 589;

const int OBJ_setct_CredRevReqTBE = 2;

const String SN_setct_CredRevReqTBEX = 'setct-CredRevReqTBEX';

const int NID_setct_CredRevReqTBEX = 590;

const int OBJ_setct_CredRevReqTBEX = 2;

const String SN_setct_CredRevResTBE = 'setct-CredRevResTBE';

const int NID_setct_CredRevResTBE = 591;

const int OBJ_setct_CredRevResTBE = 2;

const String SN_setct_BatchAdminReqTBE = 'setct-BatchAdminReqTBE';

const int NID_setct_BatchAdminReqTBE = 592;

const int OBJ_setct_BatchAdminReqTBE = 2;

const String SN_setct_BatchAdminResTBE = 'setct-BatchAdminResTBE';

const int NID_setct_BatchAdminResTBE = 593;

const int OBJ_setct_BatchAdminResTBE = 2;

const String SN_setct_RegFormReqTBE = 'setct-RegFormReqTBE';

const int NID_setct_RegFormReqTBE = 594;

const int OBJ_setct_RegFormReqTBE = 2;

const String SN_setct_CertReqTBE = 'setct-CertReqTBE';

const int NID_setct_CertReqTBE = 595;

const int OBJ_setct_CertReqTBE = 2;

const String SN_setct_CertReqTBEX = 'setct-CertReqTBEX';

const int NID_setct_CertReqTBEX = 596;

const int OBJ_setct_CertReqTBEX = 2;

const String SN_setct_CertResTBE = 'setct-CertResTBE';

const int NID_setct_CertResTBE = 597;

const int OBJ_setct_CertResTBE = 2;

const String SN_setct_CRLNotificationTBS = 'setct-CRLNotificationTBS';

const int NID_setct_CRLNotificationTBS = 598;

const int OBJ_setct_CRLNotificationTBS = 2;

const String SN_setct_CRLNotificationResTBS = 'setct-CRLNotificationResTBS';

const int NID_setct_CRLNotificationResTBS = 599;

const int OBJ_setct_CRLNotificationResTBS = 2;

const String SN_setct_BCIDistributionTBS = 'setct-BCIDistributionTBS';

const int NID_setct_BCIDistributionTBS = 600;

const int OBJ_setct_BCIDistributionTBS = 2;

const String SN_setext_genCrypt = 'setext-genCrypt';

const String LN_setext_genCrypt = 'generic cryptogram';

const int NID_setext_genCrypt = 601;

const int OBJ_setext_genCrypt = 2;

const String SN_setext_miAuth = 'setext-miAuth';

const String LN_setext_miAuth = 'merchant initiated auth';

const int NID_setext_miAuth = 602;

const int OBJ_setext_miAuth = 2;

const String SN_setext_pinSecure = 'setext-pinSecure';

const int NID_setext_pinSecure = 603;

const int OBJ_setext_pinSecure = 2;

const String SN_setext_pinAny = 'setext-pinAny';

const int NID_setext_pinAny = 604;

const int OBJ_setext_pinAny = 2;

const String SN_setext_track2 = 'setext-track2';

const int NID_setext_track2 = 605;

const int OBJ_setext_track2 = 2;

const String SN_setext_cv = 'setext-cv';

const String LN_setext_cv = 'additional verification';

const int NID_setext_cv = 606;

const int OBJ_setext_cv = 2;

const String SN_set_policy_root = 'set-policy-root';

const int NID_set_policy_root = 607;

const int OBJ_set_policy_root = 2;

const String SN_setCext_hashedRoot = 'setCext-hashedRoot';

const int NID_setCext_hashedRoot = 608;

const int OBJ_setCext_hashedRoot = 2;

const String SN_setCext_certType = 'setCext-certType';

const int NID_setCext_certType = 609;

const int OBJ_setCext_certType = 2;

const String SN_setCext_merchData = 'setCext-merchData';

const int NID_setCext_merchData = 610;

const int OBJ_setCext_merchData = 2;

const String SN_setCext_cCertRequired = 'setCext-cCertRequired';

const int NID_setCext_cCertRequired = 611;

const int OBJ_setCext_cCertRequired = 2;

const String SN_setCext_tunneling = 'setCext-tunneling';

const int NID_setCext_tunneling = 612;

const int OBJ_setCext_tunneling = 2;

const String SN_setCext_setExt = 'setCext-setExt';

const int NID_setCext_setExt = 613;

const int OBJ_setCext_setExt = 2;

const String SN_setCext_setQualf = 'setCext-setQualf';

const int NID_setCext_setQualf = 614;

const int OBJ_setCext_setQualf = 2;

const String SN_setCext_PGWYcapabilities = 'setCext-PGWYcapabilities';

const int NID_setCext_PGWYcapabilities = 615;

const int OBJ_setCext_PGWYcapabilities = 2;

const String SN_setCext_TokenIdentifier = 'setCext-TokenIdentifier';

const int NID_setCext_TokenIdentifier = 616;

const int OBJ_setCext_TokenIdentifier = 2;

const String SN_setCext_Track2Data = 'setCext-Track2Data';

const int NID_setCext_Track2Data = 617;

const int OBJ_setCext_Track2Data = 2;

const String SN_setCext_TokenType = 'setCext-TokenType';

const int NID_setCext_TokenType = 618;

const int OBJ_setCext_TokenType = 2;

const String SN_setCext_IssuerCapabilities = 'setCext-IssuerCapabilities';

const int NID_setCext_IssuerCapabilities = 619;

const int OBJ_setCext_IssuerCapabilities = 2;

const String SN_setAttr_Cert = 'setAttr-Cert';

const int NID_setAttr_Cert = 620;

const int OBJ_setAttr_Cert = 2;

const String SN_setAttr_PGWYcap = 'setAttr-PGWYcap';

const String LN_setAttr_PGWYcap = 'payment gateway capabilities';

const int NID_setAttr_PGWYcap = 621;

const int OBJ_setAttr_PGWYcap = 2;

const String SN_setAttr_TokenType = 'setAttr-TokenType';

const int NID_setAttr_TokenType = 622;

const int OBJ_setAttr_TokenType = 2;

const String SN_setAttr_IssCap = 'setAttr-IssCap';

const String LN_setAttr_IssCap = 'issuer capabilities';

const int NID_setAttr_IssCap = 623;

const int OBJ_setAttr_IssCap = 2;

const String SN_set_rootKeyThumb = 'set-rootKeyThumb';

const int NID_set_rootKeyThumb = 624;

const int OBJ_set_rootKeyThumb = 2;

const String SN_set_addPolicy = 'set-addPolicy';

const int NID_set_addPolicy = 625;

const int OBJ_set_addPolicy = 2;

const String SN_setAttr_Token_EMV = 'setAttr-Token-EMV';

const int NID_setAttr_Token_EMV = 626;

const int OBJ_setAttr_Token_EMV = 2;

const String SN_setAttr_Token_B0Prime = 'setAttr-Token-B0Prime';

const int NID_setAttr_Token_B0Prime = 627;

const int OBJ_setAttr_Token_B0Prime = 2;

const String SN_setAttr_IssCap_CVM = 'setAttr-IssCap-CVM';

const int NID_setAttr_IssCap_CVM = 628;

const int OBJ_setAttr_IssCap_CVM = 2;

const String SN_setAttr_IssCap_T2 = 'setAttr-IssCap-T2';

const int NID_setAttr_IssCap_T2 = 629;

const int OBJ_setAttr_IssCap_T2 = 2;

const String SN_setAttr_IssCap_Sig = 'setAttr-IssCap-Sig';

const int NID_setAttr_IssCap_Sig = 630;

const int OBJ_setAttr_IssCap_Sig = 2;

const String SN_setAttr_GenCryptgrm = 'setAttr-GenCryptgrm';

const String LN_setAttr_GenCryptgrm = 'generate cryptogram';

const int NID_setAttr_GenCryptgrm = 631;

const int OBJ_setAttr_GenCryptgrm = 2;

const String SN_setAttr_T2Enc = 'setAttr-T2Enc';

const String LN_setAttr_T2Enc = 'encrypted track 2';

const int NID_setAttr_T2Enc = 632;

const int OBJ_setAttr_T2Enc = 2;

const String SN_setAttr_T2cleartxt = 'setAttr-T2cleartxt';

const String LN_setAttr_T2cleartxt = 'cleartext track 2';

const int NID_setAttr_T2cleartxt = 633;

const int OBJ_setAttr_T2cleartxt = 2;

const String SN_setAttr_TokICCsig = 'setAttr-TokICCsig';

const String LN_setAttr_TokICCsig = 'ICC or token signature';

const int NID_setAttr_TokICCsig = 634;

const int OBJ_setAttr_TokICCsig = 2;

const String SN_setAttr_SecDevSig = 'setAttr-SecDevSig';

const String LN_setAttr_SecDevSig = 'secure device signature';

const int NID_setAttr_SecDevSig = 635;

const int OBJ_setAttr_SecDevSig = 2;

const String SN_set_brand_IATA_ATA = 'set-brand-IATA-ATA';

const int NID_set_brand_IATA_ATA = 636;

const int OBJ_set_brand_IATA_ATA = 2;

const String SN_set_brand_Diners = 'set-brand-Diners';

const int NID_set_brand_Diners = 637;

const int OBJ_set_brand_Diners = 2;

const String SN_set_brand_AmericanExpress = 'set-brand-AmericanExpress';

const int NID_set_brand_AmericanExpress = 638;

const int OBJ_set_brand_AmericanExpress = 2;

const String SN_set_brand_JCB = 'set-brand-JCB';

const int NID_set_brand_JCB = 639;

const int OBJ_set_brand_JCB = 2;

const String SN_set_brand_Visa = 'set-brand-Visa';

const int NID_set_brand_Visa = 640;

const int OBJ_set_brand_Visa = 2;

const String SN_set_brand_MasterCard = 'set-brand-MasterCard';

const int NID_set_brand_MasterCard = 641;

const int OBJ_set_brand_MasterCard = 2;

const String SN_set_brand_Novus = 'set-brand-Novus';

const int NID_set_brand_Novus = 642;

const int OBJ_set_brand_Novus = 2;

const String SN_des_cdmf = 'DES-CDMF';

const String LN_des_cdmf = 'des-cdmf';

const int NID_des_cdmf = 643;

const int OBJ_des_cdmf = 1;

const String SN_rsaOAEPEncryptionSET = 'rsaOAEPEncryptionSET';

const int NID_rsaOAEPEncryptionSET = 644;

const int OBJ_rsaOAEPEncryptionSET = 1;

const String SN_ipsec3 = 'Oakley-EC2N-3';

const String LN_ipsec3 = 'ipsec3';

const int NID_ipsec3 = 749;

const String SN_ipsec4 = 'Oakley-EC2N-4';

const String LN_ipsec4 = 'ipsec4';

const int NID_ipsec4 = 750;

const String SN_whirlpool = 'whirlpool';

const int NID_whirlpool = 804;

const int OBJ_whirlpool = 1;

const String SN_cryptopro = 'cryptopro';

const int NID_cryptopro = 805;

const int OBJ_cryptopro = 1;

const String SN_cryptocom = 'cryptocom';

const int NID_cryptocom = 806;

const int OBJ_cryptocom = 1;

const String SN_id_tc26 = 'id-tc26';

const int NID_id_tc26 = 974;

const int OBJ_id_tc26 = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001 =
    'id-GostR3411-94-with-GostR3410-2001';

const String LN_id_GostR3411_94_with_GostR3410_2001 =
    'GOST R 34.11-94 with GOST R 34.10-2001';

const int NID_id_GostR3411_94_with_GostR3410_2001 = 807;

const int OBJ_id_GostR3411_94_with_GostR3410_2001 = 1;

const String SN_id_GostR3411_94_with_GostR3410_94 =
    'id-GostR3411-94-with-GostR3410-94';

const String LN_id_GostR3411_94_with_GostR3410_94 =
    'GOST R 34.11-94 with GOST R 34.10-94';

const int NID_id_GostR3411_94_with_GostR3410_94 = 808;

const int OBJ_id_GostR3411_94_with_GostR3410_94 = 1;

const String SN_id_GostR3411_94 = 'md_gost94';

const String LN_id_GostR3411_94 = 'GOST R 34.11-94';

const int NID_id_GostR3411_94 = 809;

const int OBJ_id_GostR3411_94 = 1;

const String SN_id_HMACGostR3411_94 = 'id-HMACGostR3411-94';

const String LN_id_HMACGostR3411_94 = 'HMAC GOST 34.11-94';

const int NID_id_HMACGostR3411_94 = 810;

const int OBJ_id_HMACGostR3411_94 = 1;

const String SN_id_GostR3410_2001 = 'gost2001';

const String LN_id_GostR3410_2001 = 'GOST R 34.10-2001';

const int NID_id_GostR3410_2001 = 811;

const int OBJ_id_GostR3410_2001 = 1;

const String SN_id_GostR3410_94 = 'gost94';

const String LN_id_GostR3410_94 = 'GOST R 34.10-94';

const int NID_id_GostR3410_94 = 812;

const int OBJ_id_GostR3410_94 = 1;

const String SN_id_Gost28147_89 = 'gost89';

const String LN_id_Gost28147_89 = 'GOST 28147-89';

const int NID_id_Gost28147_89 = 813;

const int OBJ_id_Gost28147_89 = 1;

const String SN_gost89_cnt = 'gost89-cnt';

const int NID_gost89_cnt = 814;

const String SN_gost89_cnt_12 = 'gost89-cnt-12';

const int NID_gost89_cnt_12 = 975;

const String SN_gost89_cbc = 'gost89-cbc';

const int NID_gost89_cbc = 1009;

const String SN_gost89_ecb = 'gost89-ecb';

const int NID_gost89_ecb = 1010;

const String SN_gost89_ctr = 'gost89-ctr';

const int NID_gost89_ctr = 1011;

const String SN_id_Gost28147_89_MAC = 'gost-mac';

const String LN_id_Gost28147_89_MAC = 'GOST 28147-89 MAC';

const int NID_id_Gost28147_89_MAC = 815;

const int OBJ_id_Gost28147_89_MAC = 1;

const String SN_gost_mac_12 = 'gost-mac-12';

const int NID_gost_mac_12 = 976;

const String SN_id_GostR3411_94_prf = 'prf-gostr3411-94';

const String LN_id_GostR3411_94_prf = 'GOST R 34.11-94 PRF';

const int NID_id_GostR3411_94_prf = 816;

const int OBJ_id_GostR3411_94_prf = 1;

const String SN_id_GostR3410_2001DH = 'id-GostR3410-2001DH';

const String LN_id_GostR3410_2001DH = 'GOST R 34.10-2001 DH';

const int NID_id_GostR3410_2001DH = 817;

const int OBJ_id_GostR3410_2001DH = 1;

const String SN_id_GostR3410_94DH = 'id-GostR3410-94DH';

const String LN_id_GostR3410_94DH = 'GOST R 34.10-94 DH';

const int NID_id_GostR3410_94DH = 818;

const int OBJ_id_GostR3410_94DH = 1;

const String SN_id_Gost28147_89_CryptoPro_KeyMeshing =
    'id-Gost28147-89-CryptoPro-KeyMeshing';

const int NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;

const int OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = 1;

const String SN_id_Gost28147_89_None_KeyMeshing =
    'id-Gost28147-89-None-KeyMeshing';

const int NID_id_Gost28147_89_None_KeyMeshing = 820;

const int OBJ_id_Gost28147_89_None_KeyMeshing = 1;

const String SN_id_GostR3411_94_TestParamSet = 'id-GostR3411-94-TestParamSet';

const int NID_id_GostR3411_94_TestParamSet = 821;

const int OBJ_id_GostR3411_94_TestParamSet = 1;

const String SN_id_GostR3411_94_CryptoProParamSet =
    'id-GostR3411-94-CryptoProParamSet';

const int NID_id_GostR3411_94_CryptoProParamSet = 822;

const int OBJ_id_GostR3411_94_CryptoProParamSet = 1;

const String SN_id_Gost28147_89_TestParamSet = 'id-Gost28147-89-TestParamSet';

const int NID_id_Gost28147_89_TestParamSet = 823;

const int OBJ_id_Gost28147_89_TestParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_A_ParamSet =
    'id-Gost28147-89-CryptoPro-A-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;

const int OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_B_ParamSet =
    'id-Gost28147-89-CryptoPro-B-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;

const int OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_C_ParamSet =
    'id-Gost28147-89-CryptoPro-C-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;

const int OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_D_ParamSet =
    'id-Gost28147-89-CryptoPro-D-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;

const int OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet =
    'id-Gost28147-89-CryptoPro-RIC-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;

const int OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 1;

const String SN_id_GostR3410_94_TestParamSet = 'id-GostR3410-94-TestParamSet';

const int NID_id_GostR3410_94_TestParamSet = 831;

const int OBJ_id_GostR3410_94_TestParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_A_ParamSet =
    'id-GostR3410-94-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;

const int OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_B_ParamSet =
    'id-GostR3410-94-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;

const int OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_C_ParamSet =
    'id-GostR3410-94-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;

const int OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_D_ParamSet =
    'id-GostR3410-94-CryptoPro-D-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;

const int OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchA_ParamSet =
    'id-GostR3410-94-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;

const int OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchB_ParamSet =
    'id-GostR3410-94-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;

const int OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchC_ParamSet =
    'id-GostR3410-94-CryptoPro-XchC-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;

const int OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = 1;

const String SN_id_GostR3410_2001_TestParamSet =
    'id-GostR3410-2001-TestParamSet';

const int NID_id_GostR3410_2001_TestParamSet = 839;

const int OBJ_id_GostR3410_2001_TestParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_A_ParamSet =
    'id-GostR3410-2001-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;

const int OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_B_ParamSet =
    'id-GostR3410-2001-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;

const int OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_C_ParamSet =
    'id-GostR3410-2001-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;

const int OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;

const int OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;

const int OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_a = 'id-GostR3410-94-a';

const int NID_id_GostR3410_94_a = 845;

const int OBJ_id_GostR3410_94_a = 1;

const String SN_id_GostR3410_94_aBis = 'id-GostR3410-94-aBis';

const int NID_id_GostR3410_94_aBis = 846;

const int OBJ_id_GostR3410_94_aBis = 1;

const String SN_id_GostR3410_94_b = 'id-GostR3410-94-b';

const int NID_id_GostR3410_94_b = 847;

const int OBJ_id_GostR3410_94_b = 1;

const String SN_id_GostR3410_94_bBis = 'id-GostR3410-94-bBis';

const int NID_id_GostR3410_94_bBis = 848;

const int OBJ_id_GostR3410_94_bBis = 1;

const String SN_id_Gost28147_89_cc = 'id-Gost28147-89-cc';

const String LN_id_Gost28147_89_cc = 'GOST 28147-89 Cryptocom ParamSet';

const int NID_id_Gost28147_89_cc = 849;

const int OBJ_id_Gost28147_89_cc = 1;

const String SN_id_GostR3410_94_cc = 'gost94cc';

const String LN_id_GostR3410_94_cc = 'GOST 34.10-94 Cryptocom';

const int NID_id_GostR3410_94_cc = 850;

const int OBJ_id_GostR3410_94_cc = 1;

const String SN_id_GostR3410_2001_cc = 'gost2001cc';

const String LN_id_GostR3410_2001_cc = 'GOST 34.10-2001 Cryptocom';

const int NID_id_GostR3410_2001_cc = 851;

const int OBJ_id_GostR3410_2001_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_94_cc =
    'id-GostR3411-94-with-GostR3410-94-cc';

const String LN_id_GostR3411_94_with_GostR3410_94_cc =
    'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_94_cc = 852;

const int OBJ_id_GostR3411_94_with_GostR3410_94_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001_cc =
    'id-GostR3411-94-with-GostR3410-2001-cc';

const String LN_id_GostR3411_94_with_GostR3410_2001_cc =
    'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;

const int OBJ_id_GostR3411_94_with_GostR3410_2001_cc = 1;

const String SN_id_GostR3410_2001_ParamSet_cc = 'id-GostR3410-2001-ParamSet-cc';

const String LN_id_GostR3410_2001_ParamSet_cc =
    'GOST R 3410-2001 Parameter Set Cryptocom';

const int NID_id_GostR3410_2001_ParamSet_cc = 854;

const int OBJ_id_GostR3410_2001_ParamSet_cc = 1;

const String SN_id_tc26_algorithms = 'id-tc26-algorithms';

const int NID_id_tc26_algorithms = 977;

const int OBJ_id_tc26_algorithms = 1;

const String SN_id_tc26_sign = 'id-tc26-sign';

const int NID_id_tc26_sign = 978;

const int OBJ_id_tc26_sign = 1;

const String SN_id_GostR3410_2012_256 = 'gost2012_256';

const String LN_id_GostR3410_2012_256 =
    'GOST R 34.10-2012 with 256 bit modulus';

const int NID_id_GostR3410_2012_256 = 979;

const int OBJ_id_GostR3410_2012_256 = 1;

const String SN_id_GostR3410_2012_512 = 'gost2012_512';

const String LN_id_GostR3410_2012_512 =
    'GOST R 34.10-2012 with 512 bit modulus';

const int NID_id_GostR3410_2012_512 = 980;

const int OBJ_id_GostR3410_2012_512 = 1;

const String SN_id_tc26_digest = 'id-tc26-digest';

const int NID_id_tc26_digest = 981;

const int OBJ_id_tc26_digest = 1;

const String SN_id_GostR3411_2012_256 = 'md_gost12_256';

const String LN_id_GostR3411_2012_256 = 'GOST R 34.11-2012 with 256 bit hash';

const int NID_id_GostR3411_2012_256 = 982;

const int OBJ_id_GostR3411_2012_256 = 1;

const String SN_id_GostR3411_2012_512 = 'md_gost12_512';

const String LN_id_GostR3411_2012_512 = 'GOST R 34.11-2012 with 512 bit hash';

const int NID_id_GostR3411_2012_512 = 983;

const int OBJ_id_GostR3411_2012_512 = 1;

const String SN_id_tc26_signwithdigest = 'id-tc26-signwithdigest';

const int NID_id_tc26_signwithdigest = 984;

const int OBJ_id_tc26_signwithdigest = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_256 =
    'id-tc26-signwithdigest-gost3410-2012-256';

const String LN_id_tc26_signwithdigest_gost3410_2012_256 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_256 = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_512 =
    'id-tc26-signwithdigest-gost3410-2012-512';

const String LN_id_tc26_signwithdigest_gost3410_2012_512 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_512 = 1;

const String SN_id_tc26_mac = 'id-tc26-mac';

const int NID_id_tc26_mac = 987;

const int OBJ_id_tc26_mac = 1;

const String SN_id_tc26_hmac_gost_3411_2012_256 =
    'id-tc26-hmac-gost-3411-2012-256';

const String LN_id_tc26_hmac_gost_3411_2012_256 =
    'HMAC GOST 34.11-2012 256 bit';

const int NID_id_tc26_hmac_gost_3411_2012_256 = 988;

const int OBJ_id_tc26_hmac_gost_3411_2012_256 = 1;

const String SN_id_tc26_hmac_gost_3411_2012_512 =
    'id-tc26-hmac-gost-3411-2012-512';

const String LN_id_tc26_hmac_gost_3411_2012_512 =
    'HMAC GOST 34.11-2012 512 bit';

const int NID_id_tc26_hmac_gost_3411_2012_512 = 989;

const int OBJ_id_tc26_hmac_gost_3411_2012_512 = 1;

const String SN_id_tc26_cipher = 'id-tc26-cipher';

const int NID_id_tc26_cipher = 990;

const int OBJ_id_tc26_cipher = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma =
    'id-tc26-cipher-gostr3412-2015-magma';

const int NID_id_tc26_cipher_gostr3412_2015_magma = 1173;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm =
    'id-tc26-cipher-gostr3412-2015-magma-ctracpkm';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac =
    'id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik =
    'id-tc26-cipher-gostr3412-2015-kuznyechik';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm =
    'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac =
    'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1;

const String SN_id_tc26_agreement = 'id-tc26-agreement';

const int NID_id_tc26_agreement = 991;

const int OBJ_id_tc26_agreement = 1;

const String SN_id_tc26_agreement_gost_3410_2012_256 =
    'id-tc26-agreement-gost-3410-2012-256';

const int NID_id_tc26_agreement_gost_3410_2012_256 = 992;

const int OBJ_id_tc26_agreement_gost_3410_2012_256 = 1;

const String SN_id_tc26_agreement_gost_3410_2012_512 =
    'id-tc26-agreement-gost-3410-2012-512';

const int NID_id_tc26_agreement_gost_3410_2012_512 = 993;

const int OBJ_id_tc26_agreement_gost_3410_2012_512 = 1;

const String SN_id_tc26_wrap = 'id-tc26-wrap';

const int NID_id_tc26_wrap = 1179;

const int OBJ_id_tc26_wrap = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma =
    'id-tc26-wrap-gostr3412-2015-magma';

const int NID_id_tc26_wrap_gostr3412_2015_magma = 1180;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 =
    'id-tc26-wrap-gostr3412-2015-magma-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik =
    'id-tc26-wrap-gostr3412-2015-kuznyechik';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 =
    'id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1;

const String SN_id_tc26_constants = 'id-tc26-constants';

const int NID_id_tc26_constants = 994;

const int OBJ_id_tc26_constants = 1;

const String SN_id_tc26_sign_constants = 'id-tc26-sign-constants';

const int NID_id_tc26_sign_constants = 995;

const int OBJ_id_tc26_sign_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_constants =
    'id-tc26-gost-3410-2012-256-constants';

const int NID_id_tc26_gost_3410_2012_256_constants = 1147;

const int OBJ_id_tc26_gost_3410_2012_256_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetA =
    'id-tc26-gost-3410-2012-256-paramSetA';

const String LN_id_tc26_gost_3410_2012_256_paramSetA =
    'GOST R 34.10-2012 (256 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetB =
    'id-tc26-gost-3410-2012-256-paramSetB';

const String LN_id_tc26_gost_3410_2012_256_paramSetB =
    'GOST R 34.10-2012 (256 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetC =
    'id-tc26-gost-3410-2012-256-paramSetC';

const String LN_id_tc26_gost_3410_2012_256_paramSetC =
    'GOST R 34.10-2012 (256 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetC = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetD =
    'id-tc26-gost-3410-2012-256-paramSetD';

const String LN_id_tc26_gost_3410_2012_256_paramSetD =
    'GOST R 34.10-2012 (256 bit) ParamSet D';

const int NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetD = 1;

const String SN_id_tc26_gost_3410_2012_512_constants =
    'id-tc26-gost-3410-2012-512-constants';

const int NID_id_tc26_gost_3410_2012_512_constants = 996;

const int OBJ_id_tc26_gost_3410_2012_512_constants = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetTest =
    'id-tc26-gost-3410-2012-512-paramSetTest';

const String LN_id_tc26_gost_3410_2012_512_paramSetTest =
    'GOST R 34.10-2012 (512 bit) testing parameter set';

const int NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetTest = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetA =
    'id-tc26-gost-3410-2012-512-paramSetA';

const String LN_id_tc26_gost_3410_2012_512_paramSetA =
    'GOST R 34.10-2012 (512 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_512_paramSetA = 998;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetB =
    'id-tc26-gost-3410-2012-512-paramSetB';

const String LN_id_tc26_gost_3410_2012_512_paramSetB =
    'GOST R 34.10-2012 (512 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_512_paramSetB = 999;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetC =
    'id-tc26-gost-3410-2012-512-paramSetC';

const String LN_id_tc26_gost_3410_2012_512_paramSetC =
    'GOST R 34.10-2012 (512 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetC = 1;

const String SN_id_tc26_digest_constants = 'id-tc26-digest-constants';

const int NID_id_tc26_digest_constants = 1000;

const int OBJ_id_tc26_digest_constants = 1;

const String SN_id_tc26_cipher_constants = 'id-tc26-cipher-constants';

const int NID_id_tc26_cipher_constants = 1001;

const int OBJ_id_tc26_cipher_constants = 1;

const String SN_id_tc26_gost_28147_constants = 'id-tc26-gost-28147-constants';

const int NID_id_tc26_gost_28147_constants = 1002;

const int OBJ_id_tc26_gost_28147_constants = 1;

const String SN_id_tc26_gost_28147_param_Z = 'id-tc26-gost-28147-param-Z';

const String LN_id_tc26_gost_28147_param_Z = 'GOST 28147-89 TC26 parameter set';

const int NID_id_tc26_gost_28147_param_Z = 1003;

const int OBJ_id_tc26_gost_28147_param_Z = 1;

const String SN_INN = 'INN';

const String LN_INN = 'INN';

const int NID_INN = 1004;

const int OBJ_INN = 1;

const String SN_OGRN = 'OGRN';

const String LN_OGRN = 'OGRN';

const int NID_OGRN = 1005;

const int OBJ_OGRN = 1;

const String SN_SNILS = 'SNILS';

const String LN_SNILS = 'SNILS';

const int NID_SNILS = 1006;

const int OBJ_SNILS = 1;

const String SN_subjectSignTool = 'subjectSignTool';

const String LN_subjectSignTool = 'Signing Tool of Subject';

const int NID_subjectSignTool = 1007;

const int OBJ_subjectSignTool = 1;

const String SN_issuerSignTool = 'issuerSignTool';

const String LN_issuerSignTool = 'Signing Tool of Issuer';

const int NID_issuerSignTool = 1008;

const int OBJ_issuerSignTool = 1;

const String SN_grasshopper_ecb = 'grasshopper-ecb';

const int NID_grasshopper_ecb = 1012;

const String SN_grasshopper_ctr = 'grasshopper-ctr';

const int NID_grasshopper_ctr = 1013;

const String SN_grasshopper_ofb = 'grasshopper-ofb';

const int NID_grasshopper_ofb = 1014;

const String SN_grasshopper_cbc = 'grasshopper-cbc';

const int NID_grasshopper_cbc = 1015;

const String SN_grasshopper_cfb = 'grasshopper-cfb';

const int NID_grasshopper_cfb = 1016;

const String SN_grasshopper_mac = 'grasshopper-mac';

const int NID_grasshopper_mac = 1017;

const String SN_magma_ecb = 'magma-ecb';

const int NID_magma_ecb = 1187;

const String SN_magma_ctr = 'magma-ctr';

const int NID_magma_ctr = 1188;

const String SN_magma_ofb = 'magma-ofb';

const int NID_magma_ofb = 1189;

const String SN_magma_cbc = 'magma-cbc';

const int NID_magma_cbc = 1190;

const String SN_magma_cfb = 'magma-cfb';

const int NID_magma_cfb = 1191;

const String SN_magma_mac = 'magma-mac';

const int NID_magma_mac = 1192;

const String SN_camellia_128_cbc = 'CAMELLIA-128-CBC';

const String LN_camellia_128_cbc = 'camellia-128-cbc';

const int NID_camellia_128_cbc = 751;

const int OBJ_camellia_128_cbc = 1;

const String SN_camellia_192_cbc = 'CAMELLIA-192-CBC';

const String LN_camellia_192_cbc = 'camellia-192-cbc';

const int NID_camellia_192_cbc = 752;

const int OBJ_camellia_192_cbc = 1;

const String SN_camellia_256_cbc = 'CAMELLIA-256-CBC';

const String LN_camellia_256_cbc = 'camellia-256-cbc';

const int NID_camellia_256_cbc = 753;

const int OBJ_camellia_256_cbc = 1;

const String SN_id_camellia128_wrap = 'id-camellia128-wrap';

const int NID_id_camellia128_wrap = 907;

const int OBJ_id_camellia128_wrap = 1;

const String SN_id_camellia192_wrap = 'id-camellia192-wrap';

const int NID_id_camellia192_wrap = 908;

const int OBJ_id_camellia192_wrap = 1;

const String SN_id_camellia256_wrap = 'id-camellia256-wrap';

const int NID_id_camellia256_wrap = 909;

const int OBJ_id_camellia256_wrap = 1;

const int OBJ_ntt_ds = 0;

const int OBJ_camellia = 0;

const String SN_camellia_128_ecb = 'CAMELLIA-128-ECB';

const String LN_camellia_128_ecb = 'camellia-128-ecb';

const int NID_camellia_128_ecb = 754;

const int OBJ_camellia_128_ecb = 0;

const String SN_camellia_128_ofb128 = 'CAMELLIA-128-OFB';

const String LN_camellia_128_ofb128 = 'camellia-128-ofb';

const int NID_camellia_128_ofb128 = 766;

const int OBJ_camellia_128_ofb128 = 0;

const String SN_camellia_128_cfb128 = 'CAMELLIA-128-CFB';

const String LN_camellia_128_cfb128 = 'camellia-128-cfb';

const int NID_camellia_128_cfb128 = 757;

const int OBJ_camellia_128_cfb128 = 0;

const String SN_camellia_128_gcm = 'CAMELLIA-128-GCM';

const String LN_camellia_128_gcm = 'camellia-128-gcm';

const int NID_camellia_128_gcm = 961;

const int OBJ_camellia_128_gcm = 0;

const String SN_camellia_128_ccm = 'CAMELLIA-128-CCM';

const String LN_camellia_128_ccm = 'camellia-128-ccm';

const int NID_camellia_128_ccm = 962;

const int OBJ_camellia_128_ccm = 0;

const String SN_camellia_128_ctr = 'CAMELLIA-128-CTR';

const String LN_camellia_128_ctr = 'camellia-128-ctr';

const int NID_camellia_128_ctr = 963;

const int OBJ_camellia_128_ctr = 0;

const String SN_camellia_128_cmac = 'CAMELLIA-128-CMAC';

const String LN_camellia_128_cmac = 'camellia-128-cmac';

const int NID_camellia_128_cmac = 964;

const int OBJ_camellia_128_cmac = 0;

const String SN_camellia_192_ecb = 'CAMELLIA-192-ECB';

const String LN_camellia_192_ecb = 'camellia-192-ecb';

const int NID_camellia_192_ecb = 755;

const int OBJ_camellia_192_ecb = 0;

const String SN_camellia_192_ofb128 = 'CAMELLIA-192-OFB';

const String LN_camellia_192_ofb128 = 'camellia-192-ofb';

const int NID_camellia_192_ofb128 = 767;

const int OBJ_camellia_192_ofb128 = 0;

const String SN_camellia_192_cfb128 = 'CAMELLIA-192-CFB';

const String LN_camellia_192_cfb128 = 'camellia-192-cfb';

const int NID_camellia_192_cfb128 = 758;

const int OBJ_camellia_192_cfb128 = 0;

const String SN_camellia_192_gcm = 'CAMELLIA-192-GCM';

const String LN_camellia_192_gcm = 'camellia-192-gcm';

const int NID_camellia_192_gcm = 965;

const int OBJ_camellia_192_gcm = 0;

const String SN_camellia_192_ccm = 'CAMELLIA-192-CCM';

const String LN_camellia_192_ccm = 'camellia-192-ccm';

const int NID_camellia_192_ccm = 966;

const int OBJ_camellia_192_ccm = 0;

const String SN_camellia_192_ctr = 'CAMELLIA-192-CTR';

const String LN_camellia_192_ctr = 'camellia-192-ctr';

const int NID_camellia_192_ctr = 967;

const int OBJ_camellia_192_ctr = 0;

const String SN_camellia_192_cmac = 'CAMELLIA-192-CMAC';

const String LN_camellia_192_cmac = 'camellia-192-cmac';

const int NID_camellia_192_cmac = 968;

const int OBJ_camellia_192_cmac = 0;

const String SN_camellia_256_ecb = 'CAMELLIA-256-ECB';

const String LN_camellia_256_ecb = 'camellia-256-ecb';

const int NID_camellia_256_ecb = 756;

const int OBJ_camellia_256_ecb = 0;

const String SN_camellia_256_ofb128 = 'CAMELLIA-256-OFB';

const String LN_camellia_256_ofb128 = 'camellia-256-ofb';

const int NID_camellia_256_ofb128 = 768;

const int OBJ_camellia_256_ofb128 = 0;

const String SN_camellia_256_cfb128 = 'CAMELLIA-256-CFB';

const String LN_camellia_256_cfb128 = 'camellia-256-cfb';

const int NID_camellia_256_cfb128 = 759;

const int OBJ_camellia_256_cfb128 = 0;

const String SN_camellia_256_gcm = 'CAMELLIA-256-GCM';

const String LN_camellia_256_gcm = 'camellia-256-gcm';

const int NID_camellia_256_gcm = 969;

const int OBJ_camellia_256_gcm = 0;

const String SN_camellia_256_ccm = 'CAMELLIA-256-CCM';

const String LN_camellia_256_ccm = 'camellia-256-ccm';

const int NID_camellia_256_ccm = 970;

const int OBJ_camellia_256_ccm = 0;

const String SN_camellia_256_ctr = 'CAMELLIA-256-CTR';

const String LN_camellia_256_ctr = 'camellia-256-ctr';

const int NID_camellia_256_ctr = 971;

const int OBJ_camellia_256_ctr = 0;

const String SN_camellia_256_cmac = 'CAMELLIA-256-CMAC';

const String LN_camellia_256_cmac = 'camellia-256-cmac';

const int NID_camellia_256_cmac = 972;

const int OBJ_camellia_256_cmac = 0;

const String SN_camellia_128_cfb1 = 'CAMELLIA-128-CFB1';

const String LN_camellia_128_cfb1 = 'camellia-128-cfb1';

const int NID_camellia_128_cfb1 = 760;

const String SN_camellia_192_cfb1 = 'CAMELLIA-192-CFB1';

const String LN_camellia_192_cfb1 = 'camellia-192-cfb1';

const int NID_camellia_192_cfb1 = 761;

const String SN_camellia_256_cfb1 = 'CAMELLIA-256-CFB1';

const String LN_camellia_256_cfb1 = 'camellia-256-cfb1';

const int NID_camellia_256_cfb1 = 762;

const String SN_camellia_128_cfb8 = 'CAMELLIA-128-CFB8';

const String LN_camellia_128_cfb8 = 'camellia-128-cfb8';

const int NID_camellia_128_cfb8 = 763;

const String SN_camellia_192_cfb8 = 'CAMELLIA-192-CFB8';

const String LN_camellia_192_cfb8 = 'camellia-192-cfb8';

const int NID_camellia_192_cfb8 = 764;

const String SN_camellia_256_cfb8 = 'CAMELLIA-256-CFB8';

const String LN_camellia_256_cfb8 = 'camellia-256-cfb8';

const int NID_camellia_256_cfb8 = 765;

const int OBJ_aria = 1;

const String SN_aria_128_ecb = 'ARIA-128-ECB';

const String LN_aria_128_ecb = 'aria-128-ecb';

const int NID_aria_128_ecb = 1065;

const int OBJ_aria_128_ecb = 1;

const String SN_aria_128_cbc = 'ARIA-128-CBC';

const String LN_aria_128_cbc = 'aria-128-cbc';

const int NID_aria_128_cbc = 1066;

const int OBJ_aria_128_cbc = 1;

const String SN_aria_128_cfb128 = 'ARIA-128-CFB';

const String LN_aria_128_cfb128 = 'aria-128-cfb';

const int NID_aria_128_cfb128 = 1067;

const int OBJ_aria_128_cfb128 = 1;

const String SN_aria_128_ofb128 = 'ARIA-128-OFB';

const String LN_aria_128_ofb128 = 'aria-128-ofb';

const int NID_aria_128_ofb128 = 1068;

const int OBJ_aria_128_ofb128 = 1;

const String SN_aria_128_ctr = 'ARIA-128-CTR';

const String LN_aria_128_ctr = 'aria-128-ctr';

const int NID_aria_128_ctr = 1069;

const int OBJ_aria_128_ctr = 1;

const String SN_aria_192_ecb = 'ARIA-192-ECB';

const String LN_aria_192_ecb = 'aria-192-ecb';

const int NID_aria_192_ecb = 1070;

const int OBJ_aria_192_ecb = 1;

const String SN_aria_192_cbc = 'ARIA-192-CBC';

const String LN_aria_192_cbc = 'aria-192-cbc';

const int NID_aria_192_cbc = 1071;

const int OBJ_aria_192_cbc = 1;

const String SN_aria_192_cfb128 = 'ARIA-192-CFB';

const String LN_aria_192_cfb128 = 'aria-192-cfb';

const int NID_aria_192_cfb128 = 1072;

const int OBJ_aria_192_cfb128 = 1;

const String SN_aria_192_ofb128 = 'ARIA-192-OFB';

const String LN_aria_192_ofb128 = 'aria-192-ofb';

const int NID_aria_192_ofb128 = 1073;

const int OBJ_aria_192_ofb128 = 1;

const String SN_aria_192_ctr = 'ARIA-192-CTR';

const String LN_aria_192_ctr = 'aria-192-ctr';

const int NID_aria_192_ctr = 1074;

const int OBJ_aria_192_ctr = 1;

const String SN_aria_256_ecb = 'ARIA-256-ECB';

const String LN_aria_256_ecb = 'aria-256-ecb';

const int NID_aria_256_ecb = 1075;

const int OBJ_aria_256_ecb = 1;

const String SN_aria_256_cbc = 'ARIA-256-CBC';

const String LN_aria_256_cbc = 'aria-256-cbc';

const int NID_aria_256_cbc = 1076;

const int OBJ_aria_256_cbc = 1;

const String SN_aria_256_cfb128 = 'ARIA-256-CFB';

const String LN_aria_256_cfb128 = 'aria-256-cfb';

const int NID_aria_256_cfb128 = 1077;

const int OBJ_aria_256_cfb128 = 1;

const String SN_aria_256_ofb128 = 'ARIA-256-OFB';

const String LN_aria_256_ofb128 = 'aria-256-ofb';

const int NID_aria_256_ofb128 = 1078;

const int OBJ_aria_256_ofb128 = 1;

const String SN_aria_256_ctr = 'ARIA-256-CTR';

const String LN_aria_256_ctr = 'aria-256-ctr';

const int NID_aria_256_ctr = 1079;

const int OBJ_aria_256_ctr = 1;

const String SN_aria_128_cfb1 = 'ARIA-128-CFB1';

const String LN_aria_128_cfb1 = 'aria-128-cfb1';

const int NID_aria_128_cfb1 = 1080;

const String SN_aria_192_cfb1 = 'ARIA-192-CFB1';

const String LN_aria_192_cfb1 = 'aria-192-cfb1';

const int NID_aria_192_cfb1 = 1081;

const String SN_aria_256_cfb1 = 'ARIA-256-CFB1';

const String LN_aria_256_cfb1 = 'aria-256-cfb1';

const int NID_aria_256_cfb1 = 1082;

const String SN_aria_128_cfb8 = 'ARIA-128-CFB8';

const String LN_aria_128_cfb8 = 'aria-128-cfb8';

const int NID_aria_128_cfb8 = 1083;

const String SN_aria_192_cfb8 = 'ARIA-192-CFB8';

const String LN_aria_192_cfb8 = 'aria-192-cfb8';

const int NID_aria_192_cfb8 = 1084;

const String SN_aria_256_cfb8 = 'ARIA-256-CFB8';

const String LN_aria_256_cfb8 = 'aria-256-cfb8';

const int NID_aria_256_cfb8 = 1085;

const String SN_aria_128_ccm = 'ARIA-128-CCM';

const String LN_aria_128_ccm = 'aria-128-ccm';

const int NID_aria_128_ccm = 1120;

const int OBJ_aria_128_ccm = 1;

const String SN_aria_192_ccm = 'ARIA-192-CCM';

const String LN_aria_192_ccm = 'aria-192-ccm';

const int NID_aria_192_ccm = 1121;

const int OBJ_aria_192_ccm = 1;

const String SN_aria_256_ccm = 'ARIA-256-CCM';

const String LN_aria_256_ccm = 'aria-256-ccm';

const int NID_aria_256_ccm = 1122;

const int OBJ_aria_256_ccm = 1;

const String SN_aria_128_gcm = 'ARIA-128-GCM';

const String LN_aria_128_gcm = 'aria-128-gcm';

const int NID_aria_128_gcm = 1123;

const int OBJ_aria_128_gcm = 1;

const String SN_aria_192_gcm = 'ARIA-192-GCM';

const String LN_aria_192_gcm = 'aria-192-gcm';

const int NID_aria_192_gcm = 1124;

const int OBJ_aria_192_gcm = 1;

const String SN_aria_256_gcm = 'ARIA-256-GCM';

const String LN_aria_256_gcm = 'aria-256-gcm';

const int NID_aria_256_gcm = 1125;

const int OBJ_aria_256_gcm = 1;

const String SN_kisa = 'KISA';

const String LN_kisa = 'kisa';

const int NID_kisa = 773;

const int OBJ_kisa = 1;

const String SN_seed_ecb = 'SEED-ECB';

const String LN_seed_ecb = 'seed-ecb';

const int NID_seed_ecb = 776;

const int OBJ_seed_ecb = 1;

const String SN_seed_cbc = 'SEED-CBC';

const String LN_seed_cbc = 'seed-cbc';

const int NID_seed_cbc = 777;

const int OBJ_seed_cbc = 1;

const String SN_seed_cfb128 = 'SEED-CFB';

const String LN_seed_cfb128 = 'seed-cfb';

const int NID_seed_cfb128 = 779;

const int OBJ_seed_cfb128 = 1;

const String SN_seed_ofb128 = 'SEED-OFB';

const String LN_seed_ofb128 = 'seed-ofb';

const int NID_seed_ofb128 = 778;

const int OBJ_seed_ofb128 = 1;

const String SN_sm4_ecb = 'SM4-ECB';

const String LN_sm4_ecb = 'sm4-ecb';

const int NID_sm4_ecb = 1133;

const int OBJ_sm4_ecb = 1;

const String SN_sm4_cbc = 'SM4-CBC';

const String LN_sm4_cbc = 'sm4-cbc';

const int NID_sm4_cbc = 1134;

const int OBJ_sm4_cbc = 1;

const String SN_sm4_ofb128 = 'SM4-OFB';

const String LN_sm4_ofb128 = 'sm4-ofb';

const int NID_sm4_ofb128 = 1135;

const int OBJ_sm4_ofb128 = 1;

const String SN_sm4_cfb128 = 'SM4-CFB';

const String LN_sm4_cfb128 = 'sm4-cfb';

const int NID_sm4_cfb128 = 1137;

const int OBJ_sm4_cfb128 = 1;

const String SN_sm4_cfb1 = 'SM4-CFB1';

const String LN_sm4_cfb1 = 'sm4-cfb1';

const int NID_sm4_cfb1 = 1136;

const int OBJ_sm4_cfb1 = 1;

const String SN_sm4_cfb8 = 'SM4-CFB8';

const String LN_sm4_cfb8 = 'sm4-cfb8';

const int NID_sm4_cfb8 = 1138;

const int OBJ_sm4_cfb8 = 1;

const String SN_sm4_ctr = 'SM4-CTR';

const String LN_sm4_ctr = 'sm4-ctr';

const int NID_sm4_ctr = 1139;

const int OBJ_sm4_ctr = 1;

const String SN_hmac = 'HMAC';

const String LN_hmac = 'hmac';

const int NID_hmac = 855;

const String SN_cmac = 'CMAC';

const String LN_cmac = 'cmac';

const int NID_cmac = 894;

const String SN_rc4_hmac_md5 = 'RC4-HMAC-MD5';

const String LN_rc4_hmac_md5 = 'rc4-hmac-md5';

const int NID_rc4_hmac_md5 = 915;

const String SN_aes_128_cbc_hmac_sha1 = 'AES-128-CBC-HMAC-SHA1';

const String LN_aes_128_cbc_hmac_sha1 = 'aes-128-cbc-hmac-sha1';

const int NID_aes_128_cbc_hmac_sha1 = 916;

const String SN_aes_192_cbc_hmac_sha1 = 'AES-192-CBC-HMAC-SHA1';

const String LN_aes_192_cbc_hmac_sha1 = 'aes-192-cbc-hmac-sha1';

const int NID_aes_192_cbc_hmac_sha1 = 917;

const String SN_aes_256_cbc_hmac_sha1 = 'AES-256-CBC-HMAC-SHA1';

const String LN_aes_256_cbc_hmac_sha1 = 'aes-256-cbc-hmac-sha1';

const int NID_aes_256_cbc_hmac_sha1 = 918;

const String SN_aes_128_cbc_hmac_sha256 = 'AES-128-CBC-HMAC-SHA256';

const String LN_aes_128_cbc_hmac_sha256 = 'aes-128-cbc-hmac-sha256';

const int NID_aes_128_cbc_hmac_sha256 = 948;

const String SN_aes_192_cbc_hmac_sha256 = 'AES-192-CBC-HMAC-SHA256';

const String LN_aes_192_cbc_hmac_sha256 = 'aes-192-cbc-hmac-sha256';

const int NID_aes_192_cbc_hmac_sha256 = 949;

const String SN_aes_256_cbc_hmac_sha256 = 'AES-256-CBC-HMAC-SHA256';

const String LN_aes_256_cbc_hmac_sha256 = 'aes-256-cbc-hmac-sha256';

const int NID_aes_256_cbc_hmac_sha256 = 950;

const String SN_chacha20_poly1305 = 'ChaCha20-Poly1305';

const String LN_chacha20_poly1305 = 'chacha20-poly1305';

const int NID_chacha20_poly1305 = 1018;

const String SN_chacha20 = 'ChaCha20';

const String LN_chacha20 = 'chacha20';

const int NID_chacha20 = 1019;

const String SN_dhpublicnumber = 'dhpublicnumber';

const String LN_dhpublicnumber = 'X9.42 DH';

const int NID_dhpublicnumber = 920;

const int OBJ_dhpublicnumber = 1;

const String SN_brainpoolP160r1 = 'brainpoolP160r1';

const int NID_brainpoolP160r1 = 921;

const int OBJ_brainpoolP160r1 = 1;

const String SN_brainpoolP160t1 = 'brainpoolP160t1';

const int NID_brainpoolP160t1 = 922;

const int OBJ_brainpoolP160t1 = 1;

const String SN_brainpoolP192r1 = 'brainpoolP192r1';

const int NID_brainpoolP192r1 = 923;

const int OBJ_brainpoolP192r1 = 1;

const String SN_brainpoolP192t1 = 'brainpoolP192t1';

const int NID_brainpoolP192t1 = 924;

const int OBJ_brainpoolP192t1 = 1;

const String SN_brainpoolP224r1 = 'brainpoolP224r1';

const int NID_brainpoolP224r1 = 925;

const int OBJ_brainpoolP224r1 = 1;

const String SN_brainpoolP224t1 = 'brainpoolP224t1';

const int NID_brainpoolP224t1 = 926;

const int OBJ_brainpoolP224t1 = 1;

const String SN_brainpoolP256r1 = 'brainpoolP256r1';

const int NID_brainpoolP256r1 = 927;

const int OBJ_brainpoolP256r1 = 1;

const String SN_brainpoolP256t1 = 'brainpoolP256t1';

const int NID_brainpoolP256t1 = 928;

const int OBJ_brainpoolP256t1 = 1;

const String SN_brainpoolP320r1 = 'brainpoolP320r1';

const int NID_brainpoolP320r1 = 929;

const int OBJ_brainpoolP320r1 = 1;

const String SN_brainpoolP320t1 = 'brainpoolP320t1';

const int NID_brainpoolP320t1 = 930;

const int OBJ_brainpoolP320t1 = 1;

const String SN_brainpoolP384r1 = 'brainpoolP384r1';

const int NID_brainpoolP384r1 = 931;

const int OBJ_brainpoolP384r1 = 1;

const String SN_brainpoolP384t1 = 'brainpoolP384t1';

const int NID_brainpoolP384t1 = 932;

const int OBJ_brainpoolP384t1 = 1;

const String SN_brainpoolP512r1 = 'brainpoolP512r1';

const int NID_brainpoolP512r1 = 933;

const int OBJ_brainpoolP512r1 = 1;

const String SN_brainpoolP512t1 = 'brainpoolP512t1';

const int NID_brainpoolP512t1 = 934;

const int OBJ_brainpoolP512t1 = 1;

const int OBJ_x9_63_scheme = 1;

const int OBJ_secg_scheme = 1;

const String SN_dhSinglePass_stdDH_sha1kdf_scheme =
    'dhSinglePass-stdDH-sha1kdf-scheme';

const int NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;

const int OBJ_dhSinglePass_stdDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha224kdf_scheme =
    'dhSinglePass-stdDH-sha224kdf-scheme';

const int NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;

const int OBJ_dhSinglePass_stdDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha256kdf_scheme =
    'dhSinglePass-stdDH-sha256kdf-scheme';

const int NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;

const int OBJ_dhSinglePass_stdDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha384kdf_scheme =
    'dhSinglePass-stdDH-sha384kdf-scheme';

const int NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;

const int OBJ_dhSinglePass_stdDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha512kdf_scheme =
    'dhSinglePass-stdDH-sha512kdf-scheme';

const int NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;

const int OBJ_dhSinglePass_stdDH_sha512kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha1kdf_scheme =
    'dhSinglePass-cofactorDH-sha1kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;

const int OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha224kdf_scheme =
    'dhSinglePass-cofactorDH-sha224kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;

const int OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha256kdf_scheme =
    'dhSinglePass-cofactorDH-sha256kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;

const int OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha384kdf_scheme =
    'dhSinglePass-cofactorDH-sha384kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;

const int OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha512kdf_scheme =
    'dhSinglePass-cofactorDH-sha512kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;

const int OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = 1;

const String SN_dh_std_kdf = 'dh-std-kdf';

const int NID_dh_std_kdf = 946;

const String SN_dh_cofactor_kdf = 'dh-cofactor-kdf';

const int NID_dh_cofactor_kdf = 947;

const String SN_ct_precert_scts = 'ct_precert_scts';

const String LN_ct_precert_scts = 'CT Precertificate SCTs';

const int NID_ct_precert_scts = 951;

const int OBJ_ct_precert_scts = 1;

const String SN_ct_precert_poison = 'ct_precert_poison';

const String LN_ct_precert_poison = 'CT Precertificate Poison';

const int NID_ct_precert_poison = 952;

const int OBJ_ct_precert_poison = 1;

const String SN_ct_precert_signer = 'ct_precert_signer';

const String LN_ct_precert_signer = 'CT Precertificate Signer';

const int NID_ct_precert_signer = 953;

const int OBJ_ct_precert_signer = 1;

const String SN_ct_cert_scts = 'ct_cert_scts';

const String LN_ct_cert_scts = 'CT Certificate SCTs';

const int NID_ct_cert_scts = 954;

const int OBJ_ct_cert_scts = 1;

const String SN_jurisdictionLocalityName = 'jurisdictionL';

const String LN_jurisdictionLocalityName = 'jurisdictionLocalityName';

const int NID_jurisdictionLocalityName = 955;

const int OBJ_jurisdictionLocalityName = 1;

const String SN_jurisdictionStateOrProvinceName = 'jurisdictionST';

const String LN_jurisdictionStateOrProvinceName =
    'jurisdictionStateOrProvinceName';

const int NID_jurisdictionStateOrProvinceName = 956;

const int OBJ_jurisdictionStateOrProvinceName = 1;

const String SN_jurisdictionCountryName = 'jurisdictionC';

const String LN_jurisdictionCountryName = 'jurisdictionCountryName';

const int NID_jurisdictionCountryName = 957;

const int OBJ_jurisdictionCountryName = 1;

const String SN_id_scrypt = 'id-scrypt';

const String LN_id_scrypt = 'scrypt';

const int NID_id_scrypt = 973;

const int OBJ_id_scrypt = 1;

const String SN_tls1_prf = 'TLS1-PRF';

const String LN_tls1_prf = 'tls1-prf';

const int NID_tls1_prf = 1021;

const String SN_hkdf = 'HKDF';

const String LN_hkdf = 'hkdf';

const int NID_hkdf = 1036;

const String SN_id_pkinit = 'id-pkinit';

const int NID_id_pkinit = 1031;

const int OBJ_id_pkinit = 1;

const String SN_pkInitClientAuth = 'pkInitClientAuth';

const String LN_pkInitClientAuth = 'PKINIT Client Auth';

const int NID_pkInitClientAuth = 1032;

const int OBJ_pkInitClientAuth = 1;

const String SN_pkInitKDC = 'pkInitKDC';

const String LN_pkInitKDC = 'Signing KDC Response';

const int NID_pkInitKDC = 1033;

const int OBJ_pkInitKDC = 1;

const String SN_X25519 = 'X25519';

const int NID_X25519 = 1034;

const int OBJ_X25519 = 1;

const String SN_X448 = 'X448';

const int NID_X448 = 1035;

const int OBJ_X448 = 1;

const String SN_ED25519 = 'ED25519';

const int NID_ED25519 = 1087;

const int OBJ_ED25519 = 1;

const String SN_ED448 = 'ED448';

const int NID_ED448 = 1088;

const int OBJ_ED448 = 1;

const String SN_kx_rsa = 'KxRSA';

const String LN_kx_rsa = 'kx-rsa';

const int NID_kx_rsa = 1037;

const String SN_kx_ecdhe = 'KxECDHE';

const String LN_kx_ecdhe = 'kx-ecdhe';

const int NID_kx_ecdhe = 1038;

const String SN_kx_dhe = 'KxDHE';

const String LN_kx_dhe = 'kx-dhe';

const int NID_kx_dhe = 1039;

const String SN_kx_ecdhe_psk = 'KxECDHE-PSK';

const String LN_kx_ecdhe_psk = 'kx-ecdhe-psk';

const int NID_kx_ecdhe_psk = 1040;

const String SN_kx_dhe_psk = 'KxDHE-PSK';

const String LN_kx_dhe_psk = 'kx-dhe-psk';

const int NID_kx_dhe_psk = 1041;

const String SN_kx_rsa_psk = 'KxRSA_PSK';

const String LN_kx_rsa_psk = 'kx-rsa-psk';

const int NID_kx_rsa_psk = 1042;

const String SN_kx_psk = 'KxPSK';

const String LN_kx_psk = 'kx-psk';

const int NID_kx_psk = 1043;

const String SN_kx_srp = 'KxSRP';

const String LN_kx_srp = 'kx-srp';

const int NID_kx_srp = 1044;

const String SN_kx_gost = 'KxGOST';

const String LN_kx_gost = 'kx-gost';

const int NID_kx_gost = 1045;

const String SN_kx_any = 'KxANY';

const String LN_kx_any = 'kx-any';

const int NID_kx_any = 1063;

const String SN_auth_rsa = 'AuthRSA';

const String LN_auth_rsa = 'auth-rsa';

const int NID_auth_rsa = 1046;

const String SN_auth_ecdsa = 'AuthECDSA';

const String LN_auth_ecdsa = 'auth-ecdsa';

const int NID_auth_ecdsa = 1047;

const String SN_auth_psk = 'AuthPSK';

const String LN_auth_psk = 'auth-psk';

const int NID_auth_psk = 1048;

const String SN_auth_dss = 'AuthDSS';

const String LN_auth_dss = 'auth-dss';

const int NID_auth_dss = 1049;

const String SN_auth_gost01 = 'AuthGOST01';

const String LN_auth_gost01 = 'auth-gost01';

const int NID_auth_gost01 = 1050;

const String SN_auth_gost12 = 'AuthGOST12';

const String LN_auth_gost12 = 'auth-gost12';

const int NID_auth_gost12 = 1051;

const String SN_auth_srp = 'AuthSRP';

const String LN_auth_srp = 'auth-srp';

const int NID_auth_srp = 1052;

const String SN_auth_null = 'AuthNULL';

const String LN_auth_null = 'auth-null';

const int NID_auth_null = 1053;

const String SN_auth_any = 'AuthANY';

const String LN_auth_any = 'auth-any';

const int NID_auth_any = 1064;

const String SN_poly1305 = 'Poly1305';

const String LN_poly1305 = 'poly1305';

const int NID_poly1305 = 1061;

const String SN_siphash = 'SipHash';

const String LN_siphash = 'siphash';

const int NID_siphash = 1062;

const String SN_ffdhe2048 = 'ffdhe2048';

const int NID_ffdhe2048 = 1126;

const String SN_ffdhe3072 = 'ffdhe3072';

const int NID_ffdhe3072 = 1127;

const String SN_ffdhe4096 = 'ffdhe4096';

const int NID_ffdhe4096 = 1128;

const String SN_ffdhe6144 = 'ffdhe6144';

const int NID_ffdhe6144 = 1129;

const String SN_ffdhe8192 = 'ffdhe8192';

const int NID_ffdhe8192 = 1130;

const String SN_ISO_UA = 'ISO-UA';

const int NID_ISO_UA = 1150;

const int OBJ_ISO_UA = 1;

const String SN_ua_pki = 'ua-pki';

const int NID_ua_pki = 1151;

const int OBJ_ua_pki = 1;

const String SN_dstu28147 = 'dstu28147';

const String LN_dstu28147 = 'DSTU Gost 28147-2009';

const int NID_dstu28147 = 1152;

const int OBJ_dstu28147 = 1;

const String SN_dstu28147_ofb = 'dstu28147-ofb';

const String LN_dstu28147_ofb = 'DSTU Gost 28147-2009 OFB mode';

const int NID_dstu28147_ofb = 1153;

const int OBJ_dstu28147_ofb = 1;

const String SN_dstu28147_cfb = 'dstu28147-cfb';

const String LN_dstu28147_cfb = 'DSTU Gost 28147-2009 CFB mode';

const int NID_dstu28147_cfb = 1154;

const int OBJ_dstu28147_cfb = 1;

const String SN_dstu28147_wrap = 'dstu28147-wrap';

const String LN_dstu28147_wrap = 'DSTU Gost 28147-2009 key wrap';

const int NID_dstu28147_wrap = 1155;

const int OBJ_dstu28147_wrap = 1;

const String SN_hmacWithDstu34311 = 'hmacWithDstu34311';

const String LN_hmacWithDstu34311 = 'HMAC DSTU Gost 34311-95';

const int NID_hmacWithDstu34311 = 1156;

const int OBJ_hmacWithDstu34311 = 1;

const String SN_dstu34311 = 'dstu34311';

const String LN_dstu34311 = 'DSTU Gost 34311-95';

const int NID_dstu34311 = 1157;

const int OBJ_dstu34311 = 1;

const String SN_dstu4145le = 'dstu4145le';

const String LN_dstu4145le = 'DSTU 4145-2002 little endian';

const int NID_dstu4145le = 1158;

const int OBJ_dstu4145le = 1;

const String SN_dstu4145be = 'dstu4145be';

const String LN_dstu4145be = 'DSTU 4145-2002 big endian';

const int NID_dstu4145be = 1159;

const int OBJ_dstu4145be = 1;

const String SN_uacurve0 = 'uacurve0';

const String LN_uacurve0 = 'DSTU curve 0';

const int NID_uacurve0 = 1160;

const int OBJ_uacurve0 = 1;

const String SN_uacurve1 = 'uacurve1';

const String LN_uacurve1 = 'DSTU curve 1';

const int NID_uacurve1 = 1161;

const int OBJ_uacurve1 = 1;

const String SN_uacurve2 = 'uacurve2';

const String LN_uacurve2 = 'DSTU curve 2';

const int NID_uacurve2 = 1162;

const int OBJ_uacurve2 = 1;

const String SN_uacurve3 = 'uacurve3';

const String LN_uacurve3 = 'DSTU curve 3';

const int NID_uacurve3 = 1163;

const int OBJ_uacurve3 = 1;

const String SN_uacurve4 = 'uacurve4';

const String LN_uacurve4 = 'DSTU curve 4';

const int NID_uacurve4 = 1164;

const int OBJ_uacurve4 = 1;

const String SN_uacurve5 = 'uacurve5';

const String LN_uacurve5 = 'DSTU curve 5';

const int NID_uacurve5 = 1165;

const int OBJ_uacurve5 = 1;

const String SN_uacurve6 = 'uacurve6';

const String LN_uacurve6 = 'DSTU curve 6';

const int NID_uacurve6 = 1166;

const int OBJ_uacurve6 = 1;

const String SN_uacurve7 = 'uacurve7';

const String LN_uacurve7 = 'DSTU curve 7';

const int NID_uacurve7 = 1167;

const int OBJ_uacurve7 = 1;

const String SN_uacurve8 = 'uacurve8';

const String LN_uacurve8 = 'DSTU curve 8';

const int NID_uacurve8 = 1168;

const int OBJ_uacurve8 = 1;

const String SN_uacurve9 = 'uacurve9';

const String LN_uacurve9 = 'DSTU curve 9';

const int NID_uacurve9 = 1169;

const int OBJ_uacurve9 = 1;

const int ASN1_F_A2D_ASN1_OBJECT = 100;

const int ASN1_F_A2I_ASN1_INTEGER = 102;

const int ASN1_F_A2I_ASN1_STRING = 103;

const int ASN1_F_APPEND_EXP = 176;

const int ASN1_F_ASN1_BIO_INIT = 113;

const int ASN1_F_ASN1_BIT_STRING_SET_BIT = 183;

const int ASN1_F_ASN1_CB = 177;

const int ASN1_F_ASN1_CHECK_TLEN = 104;

const int ASN1_F_ASN1_COLLECT = 106;

const int ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108;

const int ASN1_F_ASN1_D2I_FP = 109;

const int ASN1_F_ASN1_D2I_READ_BIO = 107;

const int ASN1_F_ASN1_DIGEST = 184;

const int ASN1_F_ASN1_DO_ADB = 110;

const int ASN1_F_ASN1_DO_LOCK = 233;

const int ASN1_F_ASN1_DUP = 111;

const int ASN1_F_ASN1_ENC_SAVE = 115;

const int ASN1_F_ASN1_EX_C2I = 204;

const int ASN1_F_ASN1_FIND_END = 190;

const int ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 216;

const int ASN1_F_ASN1_GENERATE_V3 = 178;

const int ASN1_F_ASN1_GET_INT64 = 224;

const int ASN1_F_ASN1_GET_OBJECT = 114;

const int ASN1_F_ASN1_GET_UINT64 = 225;

const int ASN1_F_ASN1_I2D_BIO = 116;

const int ASN1_F_ASN1_I2D_FP = 117;

const int ASN1_F_ASN1_ITEM_D2I_FP = 206;

const int ASN1_F_ASN1_ITEM_DUP = 191;

const int ASN1_F_ASN1_ITEM_EMBED_D2I = 120;

const int ASN1_F_ASN1_ITEM_EMBED_NEW = 121;

const int ASN1_F_ASN1_ITEM_EX_I2D = 144;

const int ASN1_F_ASN1_ITEM_FLAGS_I2D = 118;

const int ASN1_F_ASN1_ITEM_I2D_BIO = 192;

const int ASN1_F_ASN1_ITEM_I2D_FP = 193;

const int ASN1_F_ASN1_ITEM_PACK = 198;

const int ASN1_F_ASN1_ITEM_SIGN = 195;

const int ASN1_F_ASN1_ITEM_SIGN_CTX = 220;

const int ASN1_F_ASN1_ITEM_UNPACK = 199;

const int ASN1_F_ASN1_ITEM_VERIFY = 197;

const int ASN1_F_ASN1_MBSTRING_NCOPY = 122;

const int ASN1_F_ASN1_OBJECT_NEW = 123;

const int ASN1_F_ASN1_OUTPUT_DATA = 214;

const int ASN1_F_ASN1_PCTX_NEW = 205;

const int ASN1_F_ASN1_PRIMITIVE_NEW = 119;

const int ASN1_F_ASN1_SCTX_NEW = 221;

const int ASN1_F_ASN1_SIGN = 128;

const int ASN1_F_ASN1_STR2TYPE = 179;

const int ASN1_F_ASN1_STRING_GET_INT64 = 227;

const int ASN1_F_ASN1_STRING_GET_UINT64 = 230;

const int ASN1_F_ASN1_STRING_SET = 186;

const int ASN1_F_ASN1_STRING_TABLE_ADD = 129;

const int ASN1_F_ASN1_STRING_TO_BN = 228;

const int ASN1_F_ASN1_STRING_TYPE_NEW = 130;

const int ASN1_F_ASN1_TEMPLATE_EX_D2I = 132;

const int ASN1_F_ASN1_TEMPLATE_NEW = 133;

const int ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131;

const int ASN1_F_ASN1_TIME_ADJ = 217;

const int ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134;

const int ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135;

const int ASN1_F_ASN1_UTCTIME_ADJ = 218;

const int ASN1_F_ASN1_VERIFY = 137;

const int ASN1_F_B64_READ_ASN1 = 209;

const int ASN1_F_B64_WRITE_ASN1 = 210;

const int ASN1_F_BIO_NEW_NDEF = 208;

const int ASN1_F_BITSTR_CB = 180;

const int ASN1_F_BN_TO_ASN1_STRING = 229;

const int ASN1_F_C2I_ASN1_BIT_STRING = 189;

const int ASN1_F_C2I_ASN1_INTEGER = 194;

const int ASN1_F_C2I_ASN1_OBJECT = 196;

const int ASN1_F_C2I_IBUF = 226;

const int ASN1_F_C2I_UINT64_INT = 101;

const int ASN1_F_COLLECT_DATA = 140;

const int ASN1_F_D2I_ASN1_OBJECT = 147;

const int ASN1_F_D2I_ASN1_UINTEGER = 150;

const int ASN1_F_D2I_AUTOPRIVATEKEY = 207;

const int ASN1_F_D2I_PRIVATEKEY = 154;

const int ASN1_F_D2I_PUBLICKEY = 155;

const int ASN1_F_DO_BUF = 142;

const int ASN1_F_DO_CREATE = 124;

const int ASN1_F_DO_DUMP = 125;

const int ASN1_F_DO_TCREATE = 222;

const int ASN1_F_I2A_ASN1_OBJECT = 126;

const int ASN1_F_I2D_ASN1_BIO_STREAM = 211;

const int ASN1_F_I2D_ASN1_OBJECT = 143;

const int ASN1_F_I2D_DSA_PUBKEY = 161;

const int ASN1_F_I2D_EC_PUBKEY = 181;

const int ASN1_F_I2D_PRIVATEKEY = 163;

const int ASN1_F_I2D_PUBLICKEY = 164;

const int ASN1_F_I2D_RSA_PUBKEY = 165;

const int ASN1_F_LONG_C2I = 166;

const int ASN1_F_NDEF_PREFIX = 127;

const int ASN1_F_NDEF_SUFFIX = 136;

const int ASN1_F_OID_MODULE_INIT = 174;

const int ASN1_F_PARSE_TAGGING = 182;

const int ASN1_F_PKCS5_PBE2_SET_IV = 167;

const int ASN1_F_PKCS5_PBE2_SET_SCRYPT = 231;

const int ASN1_F_PKCS5_PBE_SET = 202;

const int ASN1_F_PKCS5_PBE_SET0_ALGOR = 215;

const int ASN1_F_PKCS5_PBKDF2_SET = 219;

const int ASN1_F_PKCS5_SCRYPT_SET = 232;

const int ASN1_F_SMIME_READ_ASN1 = 212;

const int ASN1_F_SMIME_TEXT = 213;

const int ASN1_F_STABLE_GET = 138;

const int ASN1_F_STBL_MODULE_INIT = 223;

const int ASN1_F_UINT32_C2I = 105;

const int ASN1_F_UINT32_NEW = 139;

const int ASN1_F_UINT64_C2I = 112;

const int ASN1_F_UINT64_NEW = 141;

const int ASN1_F_X509_CRL_ADD0_REVOKED = 169;

const int ASN1_F_X509_INFO_NEW = 170;

const int ASN1_F_X509_NAME_ENCODE = 203;

const int ASN1_F_X509_NAME_EX_D2I = 158;

const int ASN1_F_X509_NAME_EX_NEW = 171;

const int ASN1_F_X509_PKEY_NEW = 173;

const int ASN1_R_ADDING_OBJECT = 171;

const int ASN1_R_ASN1_PARSE_ERROR = 203;

const int ASN1_R_ASN1_SIG_PARSE_ERROR = 204;

const int ASN1_R_AUX_ERROR = 100;

const int ASN1_R_BAD_OBJECT_HEADER = 102;

const int ASN1_R_BAD_TEMPLATE = 230;

const int ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;

const int ASN1_R_BN_LIB = 105;

const int ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;

const int ASN1_R_BUFFER_TOO_SMALL = 107;

const int ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;

const int ASN1_R_CONTEXT_NOT_INITIALISED = 217;

const int ASN1_R_DATA_IS_WRONG = 109;

const int ASN1_R_DECODE_ERROR = 110;

const int ASN1_R_DEPTH_EXCEEDED = 174;

const int ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;

const int ASN1_R_ENCODE_ERROR = 112;

const int ASN1_R_ERROR_GETTING_TIME = 173;

const int ASN1_R_ERROR_LOADING_SECTION = 172;

const int ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;

const int ASN1_R_EXPECTING_AN_INTEGER = 115;

const int ASN1_R_EXPECTING_AN_OBJECT = 116;

const int ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;

const int ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;

const int ASN1_R_FIELD_MISSING = 121;

const int ASN1_R_FIRST_NUM_TOO_LARGE = 122;

const int ASN1_R_HEADER_TOO_LONG = 123;

const int ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;

const int ASN1_R_ILLEGAL_BOOLEAN = 176;

const int ASN1_R_ILLEGAL_CHARACTERS = 124;

const int ASN1_R_ILLEGAL_FORMAT = 177;

const int ASN1_R_ILLEGAL_HEX = 178;

const int ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;

const int ASN1_R_ILLEGAL_INTEGER = 180;

const int ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;

const int ASN1_R_ILLEGAL_NESTED_TAGGING = 181;

const int ASN1_R_ILLEGAL_NULL = 125;

const int ASN1_R_ILLEGAL_NULL_VALUE = 182;

const int ASN1_R_ILLEGAL_OBJECT = 183;

const int ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;

const int ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;

const int ASN1_R_ILLEGAL_PADDING = 221;

const int ASN1_R_ILLEGAL_TAGGED_ANY = 127;

const int ASN1_R_ILLEGAL_TIME_VALUE = 184;

const int ASN1_R_ILLEGAL_ZERO_CONTENT = 222;

const int ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;

const int ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;

const int ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;

const int ASN1_R_INVALID_BMPSTRING_LENGTH = 129;

const int ASN1_R_INVALID_DIGIT = 130;

const int ASN1_R_INVALID_MIME_TYPE = 205;

const int ASN1_R_INVALID_MODIFIER = 186;

const int ASN1_R_INVALID_NUMBER = 187;

const int ASN1_R_INVALID_OBJECT_ENCODING = 216;

const int ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;

const int ASN1_R_INVALID_SEPARATOR = 131;

const int ASN1_R_INVALID_STRING_TABLE_VALUE = 218;

const int ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;

const int ASN1_R_INVALID_UTF8STRING = 134;

const int ASN1_R_INVALID_VALUE = 219;

const int ASN1_R_LIST_ERROR = 188;

const int ASN1_R_MIME_NO_CONTENT_TYPE = 206;

const int ASN1_R_MIME_PARSE_ERROR = 207;

const int ASN1_R_MIME_SIG_PARSE_ERROR = 208;

const int ASN1_R_MISSING_EOC = 137;

const int ASN1_R_MISSING_SECOND_NUMBER = 138;

const int ASN1_R_MISSING_VALUE = 189;

const int ASN1_R_MSTRING_NOT_UNIVERSAL = 139;

const int ASN1_R_MSTRING_WRONG_TAG = 140;

const int ASN1_R_NESTED_ASN1_STRING = 197;

const int ASN1_R_NESTED_TOO_DEEP = 201;

const int ASN1_R_NON_HEX_CHARACTERS = 141;

const int ASN1_R_NOT_ASCII_FORMAT = 190;

const int ASN1_R_NOT_ENOUGH_DATA = 142;

const int ASN1_R_NO_CONTENT_TYPE = 209;

const int ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;

const int ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;

const int ASN1_R_NO_MULTIPART_BOUNDARY = 211;

const int ASN1_R_NO_SIG_CONTENT_TYPE = 212;

const int ASN1_R_NULL_IS_WRONG_LENGTH = 144;

const int ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;

const int ASN1_R_ODD_NUMBER_OF_CHARS = 145;

const int ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;

const int ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;

const int ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;

const int ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;

const int ASN1_R_SHORT_LINE = 150;

const int ASN1_R_SIG_INVALID_MIME_TYPE = 213;

const int ASN1_R_STREAMING_NOT_SUPPORTED = 202;

const int ASN1_R_STRING_TOO_LONG = 151;

const int ASN1_R_STRING_TOO_SHORT = 152;

const int ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;

const int ASN1_R_TIME_NOT_ASCII_FORMAT = 193;

const int ASN1_R_TOO_LARGE = 223;

const int ASN1_R_TOO_LONG = 155;

const int ASN1_R_TOO_SMALL = 224;

const int ASN1_R_TYPE_NOT_CONSTRUCTED = 156;

const int ASN1_R_TYPE_NOT_PRIMITIVE = 195;

const int ASN1_R_UNEXPECTED_EOC = 159;

const int ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;

const int ASN1_R_UNKNOWN_FORMAT = 160;

const int ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;

const int ASN1_R_UNKNOWN_OBJECT_TYPE = 162;

const int ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;

const int ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;

const int ASN1_R_UNKNOWN_TAG = 194;

const int ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;

const int ASN1_R_UNSUPPORTED_CIPHER = 228;

const int ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;

const int ASN1_R_UNSUPPORTED_TYPE = 196;

const int ASN1_R_WRONG_INTEGER_TYPE = 225;

const int ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;

const int ASN1_R_WRONG_TAG = 168;

const int BN_F_BNRAND = 127;

const int BN_F_BNRAND_RANGE = 138;

const int BN_F_BN_BLINDING_CONVERT_EX = 100;

const int BN_F_BN_BLINDING_CREATE_PARAM = 128;

const int BN_F_BN_BLINDING_INVERT_EX = 101;

const int BN_F_BN_BLINDING_NEW = 102;

const int BN_F_BN_BLINDING_UPDATE = 103;

const int BN_F_BN_BN2DEC = 104;

const int BN_F_BN_BN2HEX = 105;

const int BN_F_BN_COMPUTE_WNAF = 142;

const int BN_F_BN_CTX_GET = 116;

const int BN_F_BN_CTX_NEW = 106;

const int BN_F_BN_CTX_START = 129;

const int BN_F_BN_DIV = 107;

const int BN_F_BN_DIV_RECP = 130;

const int BN_F_BN_EXP = 123;

const int BN_F_BN_EXPAND_INTERNAL = 120;

const int BN_F_BN_GENCB_NEW = 143;

const int BN_F_BN_GENERATE_DSA_NONCE = 140;

const int BN_F_BN_GENERATE_PRIME_EX = 141;

const int BN_F_BN_GF2M_MOD = 131;

const int BN_F_BN_GF2M_MOD_EXP = 132;

const int BN_F_BN_GF2M_MOD_MUL = 133;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135;

const int BN_F_BN_GF2M_MOD_SQR = 136;

const int BN_F_BN_GF2M_MOD_SQRT = 137;

const int BN_F_BN_LSHIFT = 145;

const int BN_F_BN_MOD_EXP2_MONT = 118;

const int BN_F_BN_MOD_EXP_MONT = 109;

const int BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124;

const int BN_F_BN_MOD_EXP_MONT_WORD = 117;

const int BN_F_BN_MOD_EXP_RECP = 125;

const int BN_F_BN_MOD_EXP_SIMPLE = 126;

const int BN_F_BN_MOD_INVERSE = 110;

const int BN_F_BN_MOD_INVERSE_NO_BRANCH = 139;

const int BN_F_BN_MOD_LSHIFT_QUICK = 119;

const int BN_F_BN_MOD_SQRT = 121;

const int BN_F_BN_MONT_CTX_NEW = 149;

const int BN_F_BN_MPI2BN = 112;

const int BN_F_BN_NEW = 113;

const int BN_F_BN_POOL_GET = 147;

const int BN_F_BN_RAND = 114;

const int BN_F_BN_RAND_RANGE = 122;

const int BN_F_BN_RECP_CTX_NEW = 150;

const int BN_F_BN_RSHIFT = 146;

const int BN_F_BN_SET_WORDS = 144;

const int BN_F_BN_STACK_PUSH = 148;

const int BN_F_BN_USUB = 115;

const int BN_F_OSSL_BN_RSA_DO_UNBLIND = 151;

const int BN_R_ARG2_LT_ARG3 = 100;

const int BN_R_BAD_RECIPROCAL = 101;

const int BN_R_BIGNUM_TOO_LONG = 114;

const int BN_R_BITS_TOO_SMALL = 118;

const int BN_R_CALLED_WITH_EVEN_MODULUS = 102;

const int BN_R_DIV_BY_ZERO = 103;

const int BN_R_ENCODING_ERROR = 104;

const int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;

const int BN_R_INPUT_NOT_REDUCED = 110;

const int BN_R_INVALID_LENGTH = 106;

const int BN_R_INVALID_RANGE = 115;

const int BN_R_INVALID_SHIFT = 119;

const int BN_R_NOT_A_SQUARE = 111;

const int BN_R_NOT_INITIALIZED = 107;

const int BN_R_NO_INVERSE = 108;

const int BN_R_NO_SOLUTION = 116;

const int BN_R_PRIVATE_KEY_TOO_LARGE = 117;

const int BN_R_P_IS_NOT_PRIME = 112;

const int BN_R_TOO_MANY_ITERATIONS = 113;

const int BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;

const int BN_BYTES = 8;

const int BN_BITS2 = 64;

const int BN_BITS = 128;

const int BN_TBIT = -9223372036854775808;

const int BN_FLG_MALLOCED = 1;

const int BN_FLG_STATIC_DATA = 2;

const int BN_FLG_CONSTTIME = 4;

const int BN_FLG_SECURE = 8;

const int BN_FLG_EXP_CONSTTIME = 4;

const int BN_FLG_FREE = 32768;

const int BN_RAND_TOP_ANY = -1;

const int BN_RAND_TOP_ONE = 0;

const int BN_RAND_TOP_TWO = 1;

const int BN_RAND_BOTTOM_ANY = 0;

const int BN_RAND_BOTTOM_ODD = 1;

const int BN_prime_checks = 0;

const int BN_BLINDING_NO_UPDATE = 1;

const int BN_BLINDING_NO_RECREATE = 2;

const int V_ASN1_UNIVERSAL = 0;

const int V_ASN1_APPLICATION = 64;

const int V_ASN1_CONTEXT_SPECIFIC = 128;

const int V_ASN1_PRIVATE = 192;

const int V_ASN1_CONSTRUCTED = 32;

const int V_ASN1_PRIMITIVE_TAG = 31;

const int V_ASN1_PRIMATIVE_TAG = 31;

const int V_ASN1_APP_CHOOSE = -2;

const int V_ASN1_OTHER = -3;

const int V_ASN1_ANY = -4;

const int V_ASN1_UNDEF = -1;

const int V_ASN1_EOC = 0;

const int V_ASN1_BOOLEAN = 1;

const int V_ASN1_INTEGER = 2;

const int V_ASN1_BIT_STRING = 3;

const int V_ASN1_OCTET_STRING = 4;

const int V_ASN1_NULL = 5;

const int V_ASN1_OBJECT = 6;

const int V_ASN1_OBJECT_DESCRIPTOR = 7;

const int V_ASN1_EXTERNAL = 8;

const int V_ASN1_REAL = 9;

const int V_ASN1_ENUMERATED = 10;

const int V_ASN1_UTF8STRING = 12;

const int V_ASN1_SEQUENCE = 16;

const int V_ASN1_SET = 17;

const int V_ASN1_NUMERICSTRING = 18;

const int V_ASN1_PRINTABLESTRING = 19;

const int V_ASN1_T61STRING = 20;

const int V_ASN1_TELETEXSTRING = 20;

const int V_ASN1_VIDEOTEXSTRING = 21;

const int V_ASN1_IA5STRING = 22;

const int V_ASN1_UTCTIME = 23;

const int V_ASN1_GENERALIZEDTIME = 24;

const int V_ASN1_GRAPHICSTRING = 25;

const int V_ASN1_ISO64STRING = 26;

const int V_ASN1_VISIBLESTRING = 26;

const int V_ASN1_GENERALSTRING = 27;

const int V_ASN1_UNIVERSALSTRING = 28;

const int V_ASN1_BMPSTRING = 30;

const int V_ASN1_NEG = 256;

const int V_ASN1_NEG_INTEGER = 258;

const int V_ASN1_NEG_ENUMERATED = 266;

const int B_ASN1_NUMERICSTRING = 1;

const int B_ASN1_PRINTABLESTRING = 2;

const int B_ASN1_T61STRING = 4;

const int B_ASN1_TELETEXSTRING = 4;

const int B_ASN1_VIDEOTEXSTRING = 8;

const int B_ASN1_IA5STRING = 16;

const int B_ASN1_GRAPHICSTRING = 32;

const int B_ASN1_ISO64STRING = 64;

const int B_ASN1_VISIBLESTRING = 64;

const int B_ASN1_GENERALSTRING = 128;

const int B_ASN1_UNIVERSALSTRING = 256;

const int B_ASN1_OCTET_STRING = 512;

const int B_ASN1_BIT_STRING = 1024;

const int B_ASN1_BMPSTRING = 2048;

const int B_ASN1_UNKNOWN = 4096;

const int B_ASN1_UTF8STRING = 8192;

const int B_ASN1_UTCTIME = 16384;

const int B_ASN1_GENERALIZEDTIME = 32768;

const int B_ASN1_SEQUENCE = 65536;

const int MBSTRING_FLAG = 4096;

const int MBSTRING_UTF8 = 4096;

const int MBSTRING_ASC = 4097;

const int MBSTRING_BMP = 4098;

const int MBSTRING_UNIV = 4100;

const int SMIME_OLDMIME = 1024;

const int SMIME_CRLFEOL = 2048;

const int SMIME_STREAM = 4096;

const int ASN1_STRING_FLAG_BITS_LEFT = 8;

const int ASN1_STRING_FLAG_NDEF = 16;

const int ASN1_STRING_FLAG_CONT = 32;

const int ASN1_STRING_FLAG_MSTRING = 64;

const int ASN1_STRING_FLAG_EMBED = 128;

const int ASN1_STRING_FLAG_X509_TIME = 256;

const int ASN1_LONG_UNDEF = 2147483647;

const int STABLE_FLAGS_MALLOC = 1;

const int STABLE_FLAGS_CLEAR = 1;

const int STABLE_NO_MASK = 2;

const int DIRSTRING_TYPE = 10246;

const int PKCS9STRING_TYPE = 10262;

const int ub_name = 32768;

const int ub_common_name = 64;

const int ub_locality_name = 128;

const int ub_state_name = 128;

const int ub_organization_name = 64;

const int ub_organization_unit_name = 64;

const int ub_title = 64;

const int ub_email_address = 128;

const int ASN1_STRFLGS_ESC_2253 = 1;

const int ASN1_STRFLGS_ESC_CTRL = 2;

const int ASN1_STRFLGS_ESC_MSB = 4;

const int ASN1_STRFLGS_ESC_QUOTE = 8;

const int CHARTYPE_PRINTABLESTRING = 16;

const int CHARTYPE_FIRST_ESC_2253 = 32;

const int CHARTYPE_LAST_ESC_2253 = 64;

const int ASN1_STRFLGS_UTF8_CONVERT = 16;

const int ASN1_STRFLGS_IGNORE_TYPE = 32;

const int ASN1_STRFLGS_SHOW_TYPE = 64;

const int ASN1_STRFLGS_DUMP_ALL = 128;

const int ASN1_STRFLGS_DUMP_UNKNOWN = 256;

const int ASN1_STRFLGS_DUMP_DER = 512;

const int ASN1_STRFLGS_ESC_2254 = 1024;

const int ASN1_STRFLGS_RFC2253 = 791;

const int B_ASN1_TIME = 49152;

const int B_ASN1_PRINTABLE = 81175;

const int B_ASN1_DIRECTORYSTRING = 10502;

const int B_ASN1_DISPLAYTEXT = 10320;

const int ASN1_PCTX_FLAGS_SHOW_ABSENT = 1;

const int ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 2;

const int ASN1_PCTX_FLAGS_SHOW_SSOF = 4;

const int ASN1_PCTX_FLAGS_SHOW_TYPE = 8;

const int ASN1_PCTX_FLAGS_NO_ANY_TYPE = 16;

const int ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 32;

const int ASN1_PCTX_FLAGS_NO_FIELD_NAME = 64;

const int ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 128;

const int ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 256;

const int OBJ_F_OBJ_ADD_OBJECT = 105;

const int OBJ_F_OBJ_ADD_SIGID = 107;

const int OBJ_F_OBJ_CREATE = 100;

const int OBJ_F_OBJ_DUP = 101;

const int OBJ_F_OBJ_NAME_NEW_INDEX = 106;

const int OBJ_F_OBJ_NID2LN = 102;

const int OBJ_F_OBJ_NID2OBJ = 103;

const int OBJ_F_OBJ_NID2SN = 104;

const int OBJ_F_OBJ_TXT2OBJ = 108;

const int OBJ_R_OID_EXISTS = 102;

const int OBJ_R_UNKNOWN_NID = 101;

const int OBJ_NAME_TYPE_UNDEF = 0;

const int OBJ_NAME_TYPE_MD_METH = 1;

const int OBJ_NAME_TYPE_CIPHER_METH = 2;

const int OBJ_NAME_TYPE_PKEY_METH = 3;

const int OBJ_NAME_TYPE_COMP_METH = 4;

const int OBJ_NAME_TYPE_NUM = 5;

const int OBJ_NAME_ALIAS = 32768;

const int OBJ_BSEARCH_VALUE_ON_NOMATCH = 1;

const int OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 2;

const int EVP_PK_RSA = 1;

const int EVP_PK_DSA = 2;

const int EVP_PK_DH = 4;

const int EVP_PK_EC = 8;

const int EVP_PKT_SIGN = 16;

const int EVP_PKT_ENC = 32;

const int EVP_PKT_EXCH = 64;

const int EVP_PKS_RSA = 256;

const int EVP_PKS_DSA = 512;

const int EVP_PKS_EC = 1024;

const int EVP_PKEY_NONE = 0;

const int EVP_PKEY_RSA = 6;

const int EVP_PKEY_RSA2 = 19;

const int EVP_PKEY_RSA_PSS = 912;

const int EVP_PKEY_DSA = 116;

const int EVP_PKEY_DSA1 = 67;

const int EVP_PKEY_DSA2 = 66;

const int EVP_PKEY_DSA3 = 113;

const int EVP_PKEY_DSA4 = 70;

const int EVP_PKEY_DH = 28;

const int EVP_PKEY_DHX = 920;

const int EVP_PKEY_EC = 408;

const int EVP_PKEY_SM2 = 1172;

const int EVP_PKEY_HMAC = 855;

const int EVP_PKEY_CMAC = 894;

const int EVP_PKEY_SCRYPT = 973;

const int EVP_PKEY_TLS1_PRF = 1021;

const int EVP_PKEY_HKDF = 1036;

const int EVP_PKEY_POLY1305 = 1061;

const int EVP_PKEY_SIPHASH = 1062;

const int EVP_PKEY_X25519 = 1034;

const int EVP_PKEY_ED25519 = 1087;

const int EVP_PKEY_X448 = 1035;

const int EVP_PKEY_ED448 = 1088;

const int EVP_PKEY_MO_SIGN = 1;

const int EVP_PKEY_MO_VERIFY = 2;

const int EVP_PKEY_MO_ENCRYPT = 4;

const int EVP_PKEY_MO_DECRYPT = 8;

const int EVP_MD_FLAG_ONESHOT = 1;

const int EVP_MD_FLAG_XOF = 2;

const int EVP_MD_FLAG_DIGALGID_MASK = 24;

const int EVP_MD_FLAG_DIGALGID_NULL = 0;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 8;

const int EVP_MD_FLAG_DIGALGID_CUSTOM = 24;

const int EVP_MD_FLAG_FIPS = 1024;

const int EVP_MD_CTRL_DIGALGID = 1;

const int EVP_MD_CTRL_MICALG = 2;

const int EVP_MD_CTRL_XOF_LEN = 3;

const int EVP_MD_CTRL_ALG_CTRL = 4096;

const int EVP_MD_CTX_FLAG_ONESHOT = 1;

const int EVP_MD_CTX_FLAG_CLEANED = 2;

const int EVP_MD_CTX_FLAG_REUSE = 4;

const int EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 8;

const int EVP_MD_CTX_FLAG_PAD_MASK = 240;

const int EVP_MD_CTX_FLAG_PAD_PKCS1 = 0;

const int EVP_MD_CTX_FLAG_PAD_X931 = 16;

const int EVP_MD_CTX_FLAG_PAD_PSS = 32;

const int EVP_MD_CTX_FLAG_NO_INIT = 256;

const int EVP_MD_CTX_FLAG_FINALISE = 512;

const int EVP_CIPH_STREAM_CIPHER = 0;

const int EVP_CIPH_ECB_MODE = 1;

const int EVP_CIPH_CBC_MODE = 2;

const int EVP_CIPH_CFB_MODE = 3;

const int EVP_CIPH_OFB_MODE = 4;

const int EVP_CIPH_CTR_MODE = 5;

const int EVP_CIPH_GCM_MODE = 6;

const int EVP_CIPH_CCM_MODE = 7;

const int EVP_CIPH_XTS_MODE = 65537;

const int EVP_CIPH_WRAP_MODE = 65538;

const int EVP_CIPH_OCB_MODE = 65539;

const int EVP_CIPH_MODE = 983047;

const int EVP_CIPH_VARIABLE_LENGTH = 8;

const int EVP_CIPH_CUSTOM_IV = 16;

const int EVP_CIPH_ALWAYS_CALL_INIT = 32;

const int EVP_CIPH_CTRL_INIT = 64;

const int EVP_CIPH_CUSTOM_KEY_LENGTH = 128;

const int EVP_CIPH_NO_PADDING = 256;

const int EVP_CIPH_RAND_KEY = 512;

const int EVP_CIPH_CUSTOM_COPY = 1024;

const int EVP_CIPH_CUSTOM_IV_LENGTH = 2048;

const int EVP_CIPH_FLAG_DEFAULT_ASN1 = 4096;

const int EVP_CIPH_FLAG_LENGTH_BITS = 8192;

const int EVP_CIPH_FLAG_FIPS = 16384;

const int EVP_CIPH_FLAG_NON_FIPS_ALLOW = 32768;

const int EVP_CIPH_FLAG_CUSTOM_CIPHER = 1048576;

const int EVP_CIPH_FLAG_AEAD_CIPHER = 2097152;

const int EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 4194304;

const int EVP_CIPH_FLAG_PIPELINE = 8388608;

const int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 1;

const int EVP_CTRL_INIT = 0;

const int EVP_CTRL_SET_KEY_LENGTH = 1;

const int EVP_CTRL_GET_RC2_KEY_BITS = 2;

const int EVP_CTRL_SET_RC2_KEY_BITS = 3;

const int EVP_CTRL_GET_RC5_ROUNDS = 4;

const int EVP_CTRL_SET_RC5_ROUNDS = 5;

const int EVP_CTRL_RAND_KEY = 6;

const int EVP_CTRL_PBE_PRF_NID = 7;

const int EVP_CTRL_COPY = 8;

const int EVP_CTRL_AEAD_SET_IVLEN = 9;

const int EVP_CTRL_AEAD_GET_TAG = 16;

const int EVP_CTRL_AEAD_SET_TAG = 17;

const int EVP_CTRL_AEAD_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_SET_IVLEN = 9;

const int EVP_CTRL_GCM_GET_TAG = 16;

const int EVP_CTRL_GCM_SET_TAG = 17;

const int EVP_CTRL_GCM_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_IV_GEN = 19;

const int EVP_CTRL_CCM_SET_IVLEN = 9;

const int EVP_CTRL_CCM_GET_TAG = 16;

const int EVP_CTRL_CCM_SET_TAG = 17;

const int EVP_CTRL_CCM_SET_IV_FIXED = 18;

const int EVP_CTRL_CCM_SET_L = 20;

const int EVP_CTRL_CCM_SET_MSGLEN = 21;

const int EVP_CTRL_AEAD_TLS1_AAD = 22;

const int EVP_CTRL_AEAD_SET_MAC_KEY = 23;

const int EVP_CTRL_GCM_SET_IV_INV = 24;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 25;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 26;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 27;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 28;

const int EVP_CTRL_SSL3_MASTER_SECRET = 29;

const int EVP_CTRL_SET_SBOX = 30;

const int EVP_CTRL_SBOX_USED = 31;

const int EVP_CTRL_KEY_MESH = 32;

const int EVP_CTRL_BLOCK_PADDING_MODE = 33;

const int EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 34;

const int EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 35;

const int EVP_CTRL_SET_PIPELINE_INPUT_LENS = 36;

const int EVP_CTRL_GET_IVLEN = 37;

const int EVP_PADDING_PKCS7 = 1;

const int EVP_PADDING_ISO7816_4 = 2;

const int EVP_PADDING_ANSI923 = 3;

const int EVP_PADDING_ISO10126 = 4;

const int EVP_PADDING_ZERO = 5;

const int EVP_AEAD_TLS1_AAD_LEN = 13;

const int EVP_GCM_TLS_FIXED_IV_LEN = 4;

const int EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_GCM_TLS_TAG_LEN = 16;

const int EVP_CCM_TLS_FIXED_IV_LEN = 4;

const int EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_CCM_TLS_IV_LEN = 12;

const int EVP_CCM_TLS_TAG_LEN = 16;

const int EVP_CCM8_TLS_TAG_LEN = 8;

const int EVP_CHACHAPOLY_TLS_TAG_LEN = 16;

const int EVP_PBE_TYPE_OUTER = 0;

const int EVP_PBE_TYPE_PRF = 1;

const int EVP_PBE_TYPE_KDF = 2;

const int ASN1_PKEY_ALIAS = 1;

const int ASN1_PKEY_DYNAMIC = 2;

const int ASN1_PKEY_SIGPARAM_NULL = 4;

const int ASN1_PKEY_CTRL_PKCS7_SIGN = 1;

const int ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 2;

const int ASN1_PKEY_CTRL_DEFAULT_MD_NID = 3;

const int ASN1_PKEY_CTRL_CMS_SIGN = 5;

const int ASN1_PKEY_CTRL_CMS_ENVELOPE = 7;

const int ASN1_PKEY_CTRL_CMS_RI_TYPE = 8;

const int ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 9;

const int ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 10;

const int EVP_PKEY_OP_UNDEFINED = 0;

const int EVP_PKEY_OP_PARAMGEN = 2;

const int EVP_PKEY_OP_KEYGEN = 4;

const int EVP_PKEY_OP_SIGN = 8;

const int EVP_PKEY_OP_VERIFY = 16;

const int EVP_PKEY_OP_VERIFYRECOVER = 32;

const int EVP_PKEY_OP_SIGNCTX = 64;

const int EVP_PKEY_OP_VERIFYCTX = 128;

const int EVP_PKEY_OP_ENCRYPT = 256;

const int EVP_PKEY_OP_DECRYPT = 512;

const int EVP_PKEY_OP_DERIVE = 1024;

const int EVP_PKEY_OP_TYPE_SIG = 248;

const int EVP_PKEY_OP_TYPE_CRYPT = 768;

const int EVP_PKEY_OP_TYPE_NOGEN = 2040;

const int EVP_PKEY_OP_TYPE_GEN = 6;

const int EVP_PKEY_CTRL_MD = 1;

const int EVP_PKEY_CTRL_PEER_KEY = 2;

const int EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;

const int EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;

const int EVP_PKEY_CTRL_PKCS7_SIGN = 5;

const int EVP_PKEY_CTRL_SET_MAC_KEY = 6;

const int EVP_PKEY_CTRL_DIGESTINIT = 7;

const int EVP_PKEY_CTRL_SET_IV = 8;

const int EVP_PKEY_CTRL_CMS_ENCRYPT = 9;

const int EVP_PKEY_CTRL_CMS_DECRYPT = 10;

const int EVP_PKEY_CTRL_CMS_SIGN = 11;

const int EVP_PKEY_CTRL_CIPHER = 12;

const int EVP_PKEY_CTRL_GET_MD = 13;

const int EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;

const int EVP_PKEY_ALG_CTRL = 4096;

const int EVP_PKEY_FLAG_AUTOARGLEN = 2;

const int EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;

const int _CTAES_H_ = 1;

const int _MATH_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int __MATH_DECLARE_LDOUBLE = 1;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int BOOST_RESULT_OF_NUM_ARGS = 16;

const int BOOST_PP_SLOT_TEMP_10 = 0;

const int BOOST_PP_SLOT_TEMP_9 = 0;

const int BOOST_PP_SLOT_TEMP_8 = 0;

const int BOOST_PP_SLOT_TEMP_7 = 0;

const int BOOST_PP_SLOT_TEMP_6 = 0;

const int BOOST_PP_SLOT_TEMP_5 = 0;

const int BOOST_PP_SLOT_TEMP_4 = 0;

const int BOOST_PP_SLOT_TEMP_3 = 0;

const int BOOST_PP_SLOT_TEMP_2 = 1;

const int BOOST_PP_SLOT_TEMP_1 = 6;

const int BOOST_PP_ITERATION_START_1_DIGIT_3 = 0;

const int BOOST_PP_ITERATION_START_1_DIGIT_2 = 0;

const int BOOST_PP_ITERATION_START_1_DIGIT_1 = 0;

const int BOOST_PP_ITERATION_FINISH_1_DIGIT_3 = 0;

const int BOOST_PP_ITERATION_FINISH_1_DIGIT_2 = 1;

const int BOOST_PP_ITERATION_FINISH_1_DIGIT_1 = 6;

const int BIP44_SPARK_INDEX = 6;

const int SPARK_OUT_LIMIT_PER_TX = 16;

const int SPARK_VALUE_SPEND_LIMIT_PER_TRANSACTION = 1000000000000;

const int OP_SPARKSPEND = 211;

const int TRANSACTION_SPARK = 9;

const int SPARK_TX_VERSION = 3;
